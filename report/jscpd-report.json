{
  "statistics": {
    "detectionDate": "2025-06-06T20:15:11.846Z",
    "formats": {
      "tsx": {
        "sources": {
          "src/shared/hooks/form/__tests__/useZodForm.test.tsx": {
            "lines": 135,
            "tokens": 1086,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 208,
            "percentage": 20.74,
            "percentageTokens": 19.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/__tests__/useFormSubmitHandler.test.tsx": {
            "lines": 159,
            "tokens": 1369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/base/__tests__/useEntityDialog.test.tsx": {
            "lines": 126,
            "tokens": 1123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/base/__tests__/useBaseDialog.test.tsx": {
            "lines": 104,
            "tokens": 905,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 156,
            "percentage": 17.31,
            "percentageTokens": 17.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/StandardDialog.tsx": {
            "lines": 182,
            "tokens": 758,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/FormDialog.tsx": {
            "lines": 184,
            "tokens": 831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/DeleteConfirmDialog.tsx": {
            "lines": 144,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/ConfirmDialog.tsx": {
            "lines": 157,
            "tokens": 749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/datepicker/StandardDatePicker.tsx": {
            "lines": 378,
            "tokens": 2470,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/datepicker/FormStandardDatePicker.tsx": {
            "lines": 163,
            "tokens": 822,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/form/PriceAndEmployeeInputs.tsx": {
            "lines": 49,
            "tokens": 353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/form/FillingSystemSelect.tsx": {
            "lines": 170,
            "tokens": 1380,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 156,
            "duplicatedTokens": 1302,
            "percentage": 91.76,
            "percentageTokens": 94.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/reports/hooks/__tests__/useReportGenerator.test.tsx": {
            "lines": 203,
            "tokens": 1596,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 98,
            "percentage": 6.4,
            "percentageTokens": 6.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/summary/FuelSuppliesSummary.tsx": {
            "lines": 823,
            "tokens": 6796,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 156,
            "percentage": 1.22,
            "percentageTokens": 2.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/summary/FuelSalesSummary.tsx": {
            "lines": 83,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/TankEmployee.tsx": {
            "lines": 79,
            "tokens": 624,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/QuantityAndPrice.tsx": {
            "lines": 190,
            "tokens": 1397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/DeliveryDateProvider.tsx": {
            "lines": 111,
            "tokens": 734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/CommentsField.tsx": {
            "lines": 31,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/RangeSliderFilter.tsx": {
            "lines": 210,
            "tokens": 1781,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/ProviderFilter.tsx": {
            "lines": 144,
            "tokens": 1072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/FilterBar.tsx": {
            "lines": 434,
            "tokens": 3296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/DateRangePicker.tsx": {
            "lines": 212,
            "tokens": 1617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/DateRangeFilter.tsx": {
            "lines": 71,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/AdvancedSearchInput.tsx": {
            "lines": 110,
            "tokens": 801,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/data-table/FuelSuppliesDataTable.tsx": {
            "lines": 258,
            "tokens": 2074,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/form/FillingSystemSelect.tsx": {
            "lines": 182,
            "tokens": 1444,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 156,
            "duplicatedTokens": 1302,
            "percentage": 85.71,
            "percentageTokens": 90.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/styled/dialog.tsx": {
            "lines": 256,
            "tokens": 1664,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 107,
            "duplicatedTokens": 714,
            "percentage": 41.8,
            "percentageTokens": 42.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/tooltip.tsx": {
            "lines": 29,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle.tsx": {
            "lines": 42,
            "tokens": 300,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-group.tsx": {
            "lines": 57,
            "tokens": 431,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-button.tsx": {
            "lines": 97,
            "tokens": 541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-button-group.tsx": {
            "lines": 178,
            "tokens": 990,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toaster.tsx": {
            "lines": 11,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toast.tsx": {
            "lines": 137,
            "tokens": 954,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toast-container.tsx": {
            "lines": 116,
            "tokens": 984,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/ThemeSwitcher.tsx": {
            "lines": 131,
            "tokens": 930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/tabs.tsx": {
            "lines": 52,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/table.tsx": {
            "lines": 234,
            "tokens": 1373,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/switch.tsx": {
            "lines": 26,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/StandardizedForm.tsx": {
            "lines": 64,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/spinner.tsx": {
            "lines": 87,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/skeleton.tsx": {
            "lines": 14,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/sheet.tsx": {
            "lines": 147,
            "tokens": 940,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 86,
            "duplicatedTokens": 528,
            "percentage": 58.5,
            "percentageTokens": 56.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/select.tsx": {
            "lines": 157,
            "tokens": 1057,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/searchbar.tsx": {
            "lines": 89,
            "tokens": 666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/radio-group.tsx": {
            "lines": 41,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/progress.tsx": {
            "lines": 40,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/popover.tsx": {
            "lines": 28,
            "tokens": 214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/navigation-menu.tsx": {
            "lines": 127,
            "tokens": 843,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/multi-select.tsx": {
            "lines": 162,
            "tokens": 1248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/menubar.tsx": {
            "lines": 233,
            "tokens": 1529,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/loading-button.tsx": {
            "lines": 87,
            "tokens": 487,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/language-switcher.tsx": {
            "lines": 138,
            "tokens": 1084,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 342,
            "percentage": 33.33,
            "percentageTokens": 31.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/label.tsx": {
            "lines": 19,
            "tokens": 147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/input.tsx": {
            "lines": 45,
            "tokens": 318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/input-otp.tsx": {
            "lines": 68,
            "tokens": 575,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/icon-button.tsx": {
            "lines": 48,
            "tokens": 223,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/hover-card.tsx": {
            "lines": 26,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/header-breadcrumb.tsx": {
            "lines": 65,
            "tokens": 464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/form.tsx": {
            "lines": 176,
            "tokens": 1282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/form-fields.tsx": {
            "lines": 498,
            "tokens": 3478,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 52,
            "duplicatedTokens": 488,
            "percentage": 10.44,
            "percentageTokens": 14.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/dropdown-menu.tsx": {
            "lines": 197,
            "tokens": 1303,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 135,
            "duplicatedTokens": 758,
            "percentage": 68.53,
            "percentageTokens": 58.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/dialog.tsx": {
            "lines": 38,
            "tokens": 138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/dev-menu.tsx": {
            "lines": 52,
            "tokens": 374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/daterangepicker.tsx": {
            "lines": 89,
            "tokens": 752,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 110,
            "percentage": 13.48,
            "percentageTokens": 14.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/datepicker.tsx": {
            "lines": 69,
            "tokens": 483,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 110,
            "percentage": 17.39,
            "percentageTokens": 22.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/data-table.tsx": {
            "lines": 700,
            "tokens": 5639,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/currency-input.tsx": {
            "lines": 65,
            "tokens": 491,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/create-button.tsx": {
            "lines": 48,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/context-menu.tsx": {
            "lines": 197,
            "tokens": 1289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/checkbox.tsx": {
            "lines": 54,
            "tokens": 421,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/card.tsx": {
            "lines": 237,
            "tokens": 1575,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/calendar.tsx": {
            "lines": 284,
            "tokens": 2301,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/button.tsx": {
            "lines": 166,
            "tokens": 950,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 230,
            "percentage": 21.08,
            "percentageTokens": 24.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/button-group.tsx": {
            "lines": 136,
            "tokens": 679,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/breadcrumb.tsx": {
            "lines": 207,
            "tokens": 1359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/badge.tsx": {
            "lines": 62,
            "tokens": 374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/avatar.tsx": {
            "lines": 47,
            "tokens": 353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/alert.tsx": {
            "lines": 58,
            "tokens": 410,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/alert-dialog.tsx": {
            "lines": 138,
            "tokens": 903,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 107,
            "duplicatedTokens": 714,
            "percentage": 77.54,
            "percentageTokens": 79.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/action-button.tsx": {
            "lines": 97,
            "tokens": 424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/accordion.tsx": {
            "lines": 55,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/toast-system.tsx": {
            "lines": 332,
            "tokens": 3046,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/metric-card.tsx": {
            "lines": 261,
            "tokens": 2032,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/loading-states.tsx": {
            "lines": 242,
            "tokens": 1999,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/loading-overlay.tsx": {
            "lines": 179,
            "tokens": 1524,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/form-builder.tsx": {
            "lines": 666,
            "tokens": 5862,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 46,
            "duplicatedTokens": 412,
            "percentage": 6.91,
            "percentageTokens": 7.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/data-table.tsx": {
            "lines": 427,
            "tokens": 3793,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/dashboard-widgets.tsx": {
            "lines": 588,
            "tokens": 5084,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/visually-hidden.tsx": {
            "lines": 19,
            "tokens": 125,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 103,
            "percentage": 89.47,
            "percentageTokens": 82.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/textarea.tsx": {
            "lines": 20,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/supabase-connection-status.tsx": {
            "lines": 171,
            "tokens": 1327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sonner.tsx": {
            "lines": 28,
            "tokens": 201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/slider.tsx": {
            "lines": 25,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/skip-to-content.tsx": {
            "lines": 34,
            "tokens": 197,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sidebar-shortcuts.tsx": {
            "lines": 93,
            "tokens": 743,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sidebar-section.tsx": {
            "lines": 50,
            "tokens": 324,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sheet.tsx": {
            "lines": 137,
            "tokens": 889,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 86,
            "duplicatedTokens": 528,
            "percentage": 62.77,
            "percentageTokens": 59.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/separator.tsx": {
            "lines": 28,
            "tokens": 196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/SearchBar.tsx": {
            "lines": 30,
            "tokens": 221,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/scroll-area.tsx": {
            "lines": 45,
            "tokens": 339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/resizable.tsx": {
            "lines": 42,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/pagination.tsx": {
            "lines": 116,
            "tokens": 807,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/page-header.tsx": {
            "lines": 117,
            "tokens": 690,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/nav-item.tsx": {
            "lines": 111,
            "tokens": 657,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/loading.tsx": {
            "lines": 46,
            "tokens": 404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/keyboard-shortcut.tsx": {
            "lines": 52,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/header.tsx": {
            "lines": 57,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/form.tsx": {
            "lines": 239,
            "tokens": 1692,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/form-fields.tsx": {
            "lines": 783,
            "tokens": 5115,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 396,
            "duplicatedTokens": 2494,
            "percentage": 50.57,
            "percentageTokens": 48.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/error-handler.tsx": {
            "lines": 213,
            "tokens": 1501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/drawer.tsx": {
            "lines": 115,
            "tokens": 763,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/dialog.tsx": {
            "lines": 91,
            "tokens": 529,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/dev-menu.tsx": {
            "lines": 23,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/date-range-picker.tsx": {
            "lines": 64,
            "tokens": 464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/data-table.tsx": {
            "lines": 23,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/connectivity-debugger.tsx": {
            "lines": 268,
            "tokens": 2082,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 280,
            "percentage": 16.42,
            "percentageTokens": 13.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/command.tsx": {
            "lines": 184,
            "tokens": 1189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/color-contrast-checker.tsx": {
            "lines": 142,
            "tokens": 1075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/collapsible.tsx": {
            "lines": 8,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/chart.tsx": {
            "lines": 362,
            "tokens": 2541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/carousel.tsx": {
            "lines": 259,
            "tokens": 1816,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/calendar.tsx": {
            "lines": 63,
            "tokens": 457,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/base-form.tsx": {
            "lines": 155,
            "tokens": 958,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/base-dialog.tsx": {
            "lines": 248,
            "tokens": 1391,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/aspect-ratio.tsx": {
            "lines": 4,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/summary-card.tsx": {
            "lines": 119,
            "tokens": 760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/stats-card.tsx": {
            "lines": 74,
            "tokens": 480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/metric-card.tsx": {
            "lines": 148,
            "tokens": 917,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/info-card.tsx": {
            "lines": 105,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/card.tsx": {
            "lines": 288,
            "tokens": 1668,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 48,
            "duplicatedTokens": 248,
            "percentage": 16.67,
            "percentageTokens": 14.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/card-grid.tsx": {
            "lines": 157,
            "tokens": 922,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/action-card.tsx": {
            "lines": 110,
            "tokens": 677,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/loading-button.tsx": {
            "lines": 94,
            "tokens": 331,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/icon-button.tsx": {
            "lines": 93,
            "tokens": 350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/button.tsx": {
            "lines": 143,
            "tokens": 694,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/accessibility/visually-hidden.tsx": {
            "lines": 27,
            "tokens": 132,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 103,
            "percentage": 62.96,
            "percentageTokens": 78.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/StandardizedDataTable.tsx": {
            "lines": 461,
            "tokens": 3855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/SearchHighlighter.tsx": {
            "lines": 110,
            "tokens": 765,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/ResponsiveDataTable.tsx": {
            "lines": 345,
            "tokens": 2522,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/MetricCard.tsx": {
            "lines": 208,
            "tokens": 1594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/DebouncedSearch.tsx": {
            "lines": 140,
            "tokens": 935,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/theme-toggle.tsx": {
            "lines": 140,
            "tokens": 1108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/theme-provider.tsx": {
            "lines": 107,
            "tokens": 925,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/StatusIndicator.tsx": {
            "lines": 158,
            "tokens": 1311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/shimmer-loader.tsx": {
            "lines": 355,
            "tokens": 3662,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/Loading.tsx": {
            "lines": 328,
            "tokens": 2744,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 216,
            "percentage": 4.88,
            "percentageTokens": 7.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/LazyLoader.tsx": {
            "lines": 143,
            "tokens": 1190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarNavSection.tsx": {
            "lines": 182,
            "tokens": 1430,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarLogo.tsx": {
            "lines": 59,
            "tokens": 335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarFooter.tsx": {
            "lines": 188,
            "tokens": 1200,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/PaymentMethodFormStandardized.tsx": {
            "lines": 155,
            "tokens": 1170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/MultiPaymentMethodFormStandardized.tsx": {
            "lines": 439,
            "tokens": 3162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/InvoiceFormStandardized.tsx": {
            "lines": 111,
            "tokens": 781,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/ThemeToggle.tsx": {
            "lines": 48,
            "tokens": 393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/SettingsDropdown.tsx": {
            "lines": 128,
            "tokens": 868,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/PageHeader.tsx": {
            "lines": 90,
            "tokens": 610,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/PageContainer.tsx": {
            "lines": 58,
            "tokens": 413,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationGrid.tsx": {
            "lines": 43,
            "tokens": 334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationCard.tsx": {
            "lines": 231,
            "tokens": 1583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationBreadcrumbs.tsx": {
            "lines": 86,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/Breadcrumbs.tsx": {
            "lines": 188,
            "tokens": 1394,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/WindowContainer.tsx": {
            "lines": 67,
            "tokens": 582,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/PageHeader.tsx": {
            "lines": 74,
            "tokens": 485,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/PageContainer.tsx": {
            "lines": 60,
            "tokens": 493,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/DashboardGrid.tsx": {
            "lines": 140,
            "tokens": 984,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/Breadcrumb.tsx": {
            "lines": 79,
            "tokens": 607,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/form/PriceAndEmployeeInputs.tsx": {
            "lines": 116,
            "tokens": 969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/enhanced/ErrorBoundary.tsx": {
            "lines": 143,
            "tokens": 904,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dialogs/ConfirmationDialogStandardized.tsx": {
            "lines": 66,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dialogs/ConfirmationController.tsx": {
            "lines": 69,
            "tokens": 370,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dev/DevToolsMenu.tsx": {
            "lines": 66,
            "tokens": 533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dev/DeprecationTracker.tsx": {
            "lines": 49,
            "tokens": 332,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/StatsCard.tsx": {
            "lines": 61,
            "tokens": 380,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/ModuleCard.tsx": {
            "lines": 121,
            "tokens": 792,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/MetricCard.tsx": {
            "lines": 271,
            "tokens": 1976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/DashboardCard.tsx": {
            "lines": 257,
            "tokens": 1949,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/sidebar/components/Sidebar.tsx": {
            "lines": 131,
            "tokens": 996,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 243,
            "percentage": 24.43,
            "percentageTokens": 24.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsPage.tsx": {
            "lines": 385,
            "tokens": 3289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsManagementPage.tsx": {
            "lines": 562,
            "tokens": 5141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsMainPage.tsx": {
            "lines": 421,
            "tokens": 3560,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 59,
            "duplicatedTokens": 537,
            "percentage": 14.01,
            "percentageTokens": 15.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsDashboard.tsx": {
            "lines": 699,
            "tokens": 6215,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 465,
            "duplicatedTokens": 4482,
            "percentage": 66.52,
            "percentageTokens": 72.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/Shifts.tsx": {
            "lines": 586,
            "tokens": 4714,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 299,
            "percentage": 6.31,
            "percentageTokens": 6.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftOpen.tsx": {
            "lines": 707,
            "tokens": 4805,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 17,
            "duplicatedTokens": 149,
            "percentage": 2.4,
            "percentageTokens": 3.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftDetails.tsx": {
            "lines": 602,
            "tokens": 4848,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 30,
            "duplicatedTokens": 341,
            "percentage": 4.98,
            "percentageTokens": 7.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftClose.tsx": {
            "lines": 581,
            "tokens": 4142,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 337,
            "percentage": 9.29,
            "percentageTokens": 8.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/components/ShiftMetricCard.tsx": {
            "lines": 173,
            "tokens": 1296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/SettingsPage.tsx": {
            "lines": 435,
            "tokens": 3071,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 254,
            "duplicatedTokens": 2067,
            "percentage": 58.39,
            "percentageTokens": 67.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/SecuritySettings.tsx": {
            "lines": 855,
            "tokens": 5729,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 49,
            "duplicatedTokens": 363,
            "percentage": 5.73,
            "percentageTokens": 6.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/ProfileSettings.tsx": {
            "lines": 89,
            "tokens": 554,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/PrivacySettings.tsx": {
            "lines": 496,
            "tokens": 3291,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 100,
            "percentage": 2.82,
            "percentageTokens": 3.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/NotificationSettings.tsx": {
            "lines": 362,
            "tokens": 2325,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 149,
            "percentage": 5.25,
            "percentageTokens": 6.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/AppearanceSettings.tsx": {
            "lines": 250,
            "tokens": 1938,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 114,
            "percentage": 6.4,
            "percentageTokens": 5.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/AccountSettings.tsx": {
            "lines": 230,
            "tokens": 1653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/ThemeSettings.tsx": {
            "lines": 304,
            "tokens": 2599,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/SecuritySettings.tsx": {
            "lines": 301,
            "tokens": 2585,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 102,
            "percentage": 2.33,
            "percentageTokens": 3.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/ProfileSettings.tsx": {
            "lines": 376,
            "tokens": 3229,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 102,
            "percentage": 1.86,
            "percentageTokens": 3.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/NotificationSettings.tsx": {
            "lines": 171,
            "tokens": 1729,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesPage.tsx": {
            "lines": 203,
            "tokens": 1612,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 131,
            "percentage": 6.4,
            "percentageTokens": 8.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesNew.tsx": {
            "lines": 195,
            "tokens": 1412,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 195,
            "duplicatedTokens": 1401,
            "percentage": 100,
            "percentageTokens": 99.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesMainPage.tsx": {
            "lines": 543,
            "tokens": 4627,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 54,
            "duplicatedTokens": 493,
            "percentage": 9.94,
            "percentageTokens": 10.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesDashboard.tsx": {
            "lines": 748,
            "tokens": 6613,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 759,
            "duplicatedTokens": 7201,
            "percentage": 101.47,
            "percentageTokens": 108.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesCreate.tsx": {
            "lines": 102,
            "tokens": 929,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 73,
            "duplicatedTokens": 552,
            "percentage": 71.57,
            "percentageTokens": 59.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/TankFormDialogStandardized.tsx": {
            "lines": 152,
            "tokens": 1116,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 144,
            "duplicatedTokens": 1044,
            "percentage": 94.74,
            "percentageTokens": 93.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/ShiftControl.tsx": {
            "lines": 63,
            "tokens": 478,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 60,
            "duplicatedTokens": 448,
            "percentage": 95.24,
            "percentageTokens": 93.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesTableStandardized.tsx": {
            "lines": 143,
            "tokens": 1289,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 143,
            "duplicatedTokens": 1289,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesSystemSelect.tsx": {
            "lines": 23,
            "tokens": 154,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 154,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesSearchBar.tsx": {
            "lines": 17,
            "tokens": 115,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 115,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesRangesFilters.tsx": {
            "lines": 177,
            "tokens": 1092,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 304,
            "duplicatedTokens": 1823,
            "percentage": 171.75,
            "percentageTokens": 166.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesManager.tsx": {
            "lines": 117,
            "tokens": 663,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 117,
            "duplicatedTokens": 662,
            "percentage": 100,
            "percentageTokens": 99.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesHeader.tsx": {
            "lines": 71,
            "tokens": 546,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 76,
            "duplicatedTokens": 686,
            "percentage": 107.04,
            "percentageTokens": 125.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFormStandardized.tsx": {
            "lines": 339,
            "tokens": 2643,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 246,
            "percentage": 8.55,
            "percentageTokens": 9.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFilters.tsx": {
            "lines": 43,
            "tokens": 350,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 51,
            "duplicatedTokens": 451,
            "percentage": 118.6,
            "percentageTokens": 128.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFilterPanel.tsx": {
            "lines": 90,
            "tokens": 858,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 63,
            "duplicatedTokens": 605,
            "percentage": 70,
            "percentageTokens": 70.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesDialogsStandardized.tsx": {
            "lines": 326,
            "tokens": 2622,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 273,
            "duplicatedTokens": 1901,
            "percentage": 83.74,
            "percentageTokens": 72.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesDatePicker.tsx": {
            "lines": 18,
            "tokens": 129,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 129,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesController.tsx": {
            "lines": 67,
            "tokens": 514,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 217,
            "percentage": 62.69,
            "percentageTokens": 42.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/NewSaleButton.tsx": {
            "lines": 76,
            "tokens": 709,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 68,
            "duplicatedTokens": 558,
            "percentage": 89.47,
            "percentageTokens": 78.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/FillingSystemSelect.tsx": {
            "lines": 49,
            "tokens": 372,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 372,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/reports/pages/ReportsPage.tsx": {
            "lines": 390,
            "tokens": 3119,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 506,
            "percentage": 14.87,
            "percentageTokens": 16.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/pages/NavigationPage.tsx": {
            "lines": 566,
            "tokens": 4170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/pages/ShiftsDashboard.tsx": {
            "lines": 783,
            "tokens": 7219,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 258,
            "duplicatedTokens": 2667,
            "percentage": 32.95,
            "percentageTokens": 36.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeesTableStandardized.tsx": {
            "lines": 369,
            "tokens": 2913,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 407,
            "duplicatedTokens": 3333,
            "percentage": 110.3,
            "percentageTokens": 114.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeManager.tsx": {
            "lines": 71,
            "tokens": 417,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 417,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeDialogStandardized.tsx": {
            "lines": 288,
            "tokens": 2191,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 304,
            "duplicatedTokens": 2363,
            "percentage": 105.56,
            "percentageTokens": 107.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeDialog.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/DeleteConfirmDialogStandardized.tsx": {
            "lines": 48,
            "tokens": 386,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 386,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/layout/pages/SyncUpPage.tsx": {
            "lines": 264,
            "tokens": 1911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/layout/pages/NotFound.tsx": {
            "lines": 26,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/layout/pages/Index.tsx": {
            "lines": 53,
            "tokens": 438,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/TanksPage.tsx": {
            "lines": 224,
            "tokens": 1883,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 239,
            "duplicatedTokens": 1740,
            "percentage": 106.7,
            "percentageTokens": 92.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/ProvidersPage.tsx": {
            "lines": 141,
            "tokens": 945,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 260,
            "percentage": 26.95,
            "percentageTokens": 27.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/PetrolProviders.tsx": {
            "lines": 225,
            "tokens": 1830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelTypesPage.tsx": {
            "lines": 141,
            "tokens": 947,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 260,
            "percentage": 26.95,
            "percentageTokens": 27.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelSuppliesPage.tsx": {
            "lines": 141,
            "tokens": 947,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 262,
            "percentage": 26.95,
            "percentageTokens": 27.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelSalesPage.tsx": {
            "lines": 90,
            "tokens": 805,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 292,
            "percentage": 42.22,
            "percentageTokens": 36.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelPricesPage.tsx": {
            "lines": 276,
            "tokens": 2695,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelManagementPage.tsx": {
            "lines": 441,
            "tokens": 3515,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 78,
            "duplicatedTokens": 647,
            "percentage": 17.69,
            "percentageTokens": 18.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelManagementDashboard.tsx": {
            "lines": 548,
            "tokens": 4736,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 60,
            "duplicatedTokens": 496,
            "percentage": 10.95,
            "percentageTokens": 10.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelDashboardPage.tsx": {
            "lines": 471,
            "tokens": 3778,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 98,
            "percentage": 2.34,
            "percentageTokens": 2.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelAnalyticsPage.tsx": {
            "lines": 141,
            "tokens": 1076,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 292,
            "percentage": 26.95,
            "percentageTokens": 27.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FillingSystemsPage.tsx": {
            "lines": 141,
            "tokens": 945,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 260,
            "percentage": 26.95,
            "percentageTokens": 27.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelTankMonitor.test.tsx": {
            "lines": 332,
            "tokens": 2419,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 89,
            "duplicatedTokens": 650,
            "percentage": 26.81,
            "percentageTokens": 26.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankManager.tsx": {
            "lines": 89,
            "tokens": 737,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankList.tsx": {
            "lines": 258,
            "tokens": 2236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankLevelEditor.tsx": {
            "lines": 97,
            "tokens": 867,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankHistory.tsx": {
            "lines": 93,
            "tokens": 714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankFormDialog.tsx": {
            "lines": 302,
            "tokens": 2195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankController.tsx": {
            "lines": 64,
            "tokens": 423,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 217,
            "percentage": 65.63,
            "percentageTokens": 51.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/SuppliesTableStandardized.tsx": {
            "lines": 200,
            "tokens": 1627,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/SuppliesDashboard.tsx": {
            "lines": 121,
            "tokens": 1224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/ProviderDialogStandardized.tsx": {
            "lines": 128,
            "tokens": 1093,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/KpiCardGrid.tsx": {
            "lines": 154,
            "tokens": 1250,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelTankCard.tsx": {
            "lines": 55,
            "tokens": 495,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSupplyList.tsx": {
            "lines": 55,
            "tokens": 413,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSuppliesTable.tsx": {
            "lines": 8,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSuppliesManagerStandardized.tsx": {
            "lines": 59,
            "tokens": 475,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesTable.tsx": {
            "lines": 82,
            "tokens": 674,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 126,
            "percentage": 15.85,
            "percentageTokens": 18.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesStatusUpdate.tsx": {
            "lines": 104,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesManagerStandardized.tsx": {
            "lines": 197,
            "tokens": 1646,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 91,
            "percentage": 2.54,
            "percentageTokens": 5.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesFormStandardized.tsx": {
            "lines": 219,
            "tokens": 1841,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 15,
            "duplicatedTokens": 175,
            "percentage": 6.85,
            "percentageTokens": 9.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesFilter.tsx": {
            "lines": 152,
            "tokens": 1267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSaleList.tsx": {
            "lines": 53,
            "tokens": 413,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 126,
            "percentage": 24.53,
            "percentageTokens": 30.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemManagerStandardized.tsx": {
            "lines": 93,
            "tokens": 646,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 646,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemList.tsx": {
            "lines": 147,
            "tokens": 1216,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 136,
            "duplicatedTokens": 1140,
            "percentage": 92.52,
            "percentageTokens": 93.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemHeader.tsx": {
            "lines": 35,
            "tokens": 275,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 35,
            "duplicatedTokens": 275,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemFormStandardized.tsx": {
            "lines": 148,
            "tokens": 1134,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 118,
            "duplicatedTokens": 985,
            "percentage": 79.73,
            "percentageTokens": 86.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemCard.tsx": {
            "lines": 79,
            "tokens": 805,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 69,
            "duplicatedTokens": 656,
            "percentage": 87.34,
            "percentageTokens": 81.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/ConsumptionChart.tsx": {
            "lines": 29,
            "tokens": 259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/TransactionsPage.tsx": {
            "lines": 54,
            "tokens": 450,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesNew.tsx": {
            "lines": 195,
            "tokens": 1401,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 195,
            "duplicatedTokens": 1401,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesDashboard.tsx": {
            "lines": 748,
            "tokens": 7291,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 684,
            "duplicatedTokens": 6690,
            "percentage": 91.44,
            "percentageTokens": 91.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesCreate.tsx": {
            "lines": 87,
            "tokens": 727,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 73,
            "duplicatedTokens": 552,
            "percentage": 83.91,
            "percentageTokens": 75.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/RevenuePage.tsx": {
            "lines": 468,
            "tokens": 3386,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 86,
            "percentage": 2.78,
            "percentageTokens": 2.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/PaymentMethodsPage.tsx": {
            "lines": 122,
            "tokens": 1130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/FinancePage.tsx": {
            "lines": 365,
            "tokens": 2558,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 78,
            "duplicatedTokens": 591,
            "percentage": 21.37,
            "percentageTokens": 23.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/FinanceDashboard.tsx": {
            "lines": 213,
            "tokens": 1593,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 178,
            "percentage": 14.08,
            "percentageTokens": 11.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpensesPage.tsx": {
            "lines": 821,
            "tokens": 6706,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 238,
            "percentage": 3.17,
            "percentageTokens": 3.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpenseForm.tsx": {
            "lines": 355,
            "tokens": 2255,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpenseCreate.tsx": {
            "lines": 185,
            "tokens": 1402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TransactionsTableStandardized.tsx": {
            "lines": 171,
            "tokens": 1472,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 107,
            "percentage": 4.09,
            "percentageTokens": 7.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TransactionDialogStandardized.tsx": {
            "lines": 275,
            "tokens": 1888,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 99,
            "percentage": 6.91,
            "percentageTokens": 5.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TankFormDialogStandardized.tsx": {
            "lines": 147,
            "tokens": 1080,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 134,
            "duplicatedTokens": 960,
            "percentage": 91.16,
            "percentageTokens": 88.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ShiftControl.tsx": {
            "lines": 63,
            "tokens": 478,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 60,
            "duplicatedTokens": 448,
            "percentage": 95.24,
            "percentageTokens": 93.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesTableStandardized.tsx": {
            "lines": 143,
            "tokens": 1289,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 143,
            "duplicatedTokens": 1289,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesSystemSelect.tsx": {
            "lines": 23,
            "tokens": 154,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 154,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesSearchBar.tsx": {
            "lines": 17,
            "tokens": 115,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 115,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesRangesFilters.tsx": {
            "lines": 179,
            "tokens": 1121,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 146,
            "duplicatedTokens": 1005,
            "percentage": 81.56,
            "percentageTokens": 89.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesManager.tsx": {
            "lines": 117,
            "tokens": 662,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 117,
            "duplicatedTokens": 662,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesHeader.tsx": {
            "lines": 73,
            "tokens": 569,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 68,
            "duplicatedTokens": 587,
            "percentage": 93.15,
            "percentageTokens": 103.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFormStandardized.tsx": {
            "lines": 345,
            "tokens": 2517,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 93,
            "duplicatedTokens": 650,
            "percentage": 26.96,
            "percentageTokens": 25.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFilters.tsx": {
            "lines": 43,
            "tokens": 350,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 350,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFilterPanel.tsx": {
            "lines": 88,
            "tokens": 789,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 63,
            "duplicatedTokens": 605,
            "percentage": 71.59,
            "percentageTokens": 76.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesDialogsStandardized.tsx": {
            "lines": 359,
            "tokens": 2483,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 315,
            "duplicatedTokens": 2077,
            "percentage": 87.74,
            "percentageTokens": 83.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesDatePicker.tsx": {
            "lines": 18,
            "tokens": 129,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 129,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ProfitLossManagerStandardized.tsx": {
            "lines": 316,
            "tokens": 2248,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 99,
            "percentage": 6.01,
            "percentageTokens": 4.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/NewSaleButton.tsx": {
            "lines": 75,
            "tokens": 663,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 68,
            "duplicatedTokens": 558,
            "percentage": 90.67,
            "percentageTokens": 84.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinancialDashboardStandardized.tsx": {
            "lines": 200,
            "tokens": 1636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinanceManagerStandardized.tsx": {
            "lines": 138,
            "tokens": 969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinanceFiltersStandardized.tsx": {
            "lines": 293,
            "tokens": 2255,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FilterPanel.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FillingSystemSelect.tsx": {
            "lines": 49,
            "tokens": 372,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 372,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpensesTableStandardized.tsx": {
            "lines": 162,
            "tokens": 1385,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 107,
            "percentage": 4.32,
            "percentageTokens": 7.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpensesTable.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpenseManagerStandardized.tsx": {
            "lines": 83,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpenseDialogStandardized.tsx": {
            "lines": 223,
            "tokens": 1470,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemManagerStandardized.tsx": {
            "lines": 93,
            "tokens": 646,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 646,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemList.tsx": {
            "lines": 145,
            "tokens": 1204,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 136,
            "duplicatedTokens": 1140,
            "percentage": 93.79,
            "percentageTokens": 94.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemHeader.tsx": {
            "lines": 35,
            "tokens": 275,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 35,
            "duplicatedTokens": 275,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemFormStandardized.tsx": {
            "lines": 147,
            "tokens": 1128,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 118,
            "duplicatedTokens": 985,
            "percentage": 80.27,
            "percentageTokens": 87.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemCard.tsx": {
            "lines": 79,
            "tokens": 736,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 69,
            "duplicatedTokens": 656,
            "percentage": 87.34,
            "percentageTokens": 89.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/pages/ExpensesPage.tsx": {
            "lines": 269,
            "tokens": 2228,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 131,
            "percentage": 4.83,
            "percentageTokens": 5.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/components/FilterPanel.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/components/ExpensesTable.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/pages/EmployeesPage.tsx": {
            "lines": 362,
            "tokens": 2889,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 162,
            "percentage": 6.08,
            "percentageTokens": 5.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/pages/EmployeesMainPage.tsx": {
            "lines": 495,
            "tokens": 4306,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 67,
            "duplicatedTokens": 600,
            "percentage": 13.54,
            "percentageTokens": 13.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeesTableStandardized.tsx": {
            "lines": 369,
            "tokens": 2913,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 369,
            "duplicatedTokens": 2913,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeManager.tsx": {
            "lines": 71,
            "tokens": 417,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 417,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeDialogStandardized.tsx": {
            "lines": 288,
            "tokens": 2191,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 288,
            "duplicatedTokens": 2191,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeDialog.tsx": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 122,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/DeleteConfirmDialogStandardized.tsx": {
            "lines": 48,
            "tokens": 386,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 386,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/pages/DashboardPage.tsx": {
            "lines": 372,
            "tokens": 2357,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/pages/DashboardNew.tsx": {
            "lines": 40,
            "tokens": 321,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 178,
            "percentage": 60,
            "percentageTokens": 55.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/SalesSummaryWidgetStandardized.tsx": {
            "lines": 123,
            "tokens": 1014,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/SalesDashboard.tsx": {
            "lines": 301,
            "tokens": 2860,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 136,
            "duplicatedTokens": 1201,
            "percentage": 45.18,
            "percentageTokens": 41.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/RevenueExpensesChart.tsx": {
            "lines": 70,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/ProfitLossChart.tsx": {
            "lines": 58,
            "tokens": 555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/MetricsCardsStandardized.tsx": {
            "lines": 118,
            "tokens": 973,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 36,
            "duplicatedTokens": 292,
            "percentage": 30.51,
            "percentageTokens": 30.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/IncomeExpenseOverview.tsx": {
            "lines": 738,
            "tokens": 5777,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 106,
            "duplicatedTokens": 564,
            "percentage": 14.36,
            "percentageTokens": 9.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelManagementDashboardPro.tsx": {
            "lines": 636,
            "tokens": 5085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelManagementDashboard.tsx": {
            "lines": 299,
            "tokens": 2695,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 41,
            "duplicatedTokens": 352,
            "percentage": 13.71,
            "percentageTokens": 13.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelLevelVisualizationStandardized.tsx": {
            "lines": 108,
            "tokens": 831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FinanceDashboard.tsx": {
            "lines": 324,
            "tokens": 3073,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 95,
            "duplicatedTokens": 849,
            "percentage": 29.32,
            "percentageTokens": 27.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/DashboardOverviewStandardized.tsx": {
            "lines": 203,
            "tokens": 1601,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 72,
            "duplicatedTokens": 404,
            "percentage": 35.47,
            "percentageTokens": 25.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/DashboardMetrics.tsx": {
            "lines": 115,
            "tokens": 957,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 178,
            "percentage": 20.87,
            "percentageTokens": 18.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/pages/AuthPage.tsx": {
            "lines": 259,
            "tokens": 2278,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/pages/Auth.tsx": {
            "lines": 40,
            "tokens": 349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/SessionLogoutDialogStandardized.tsx": {
            "lines": 43,
            "tokens": 279,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/RegisterForm.tsx": {
            "lines": 202,
            "tokens": 1404,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 275,
            "percentage": 21.29,
            "percentageTokens": 19.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileFormStandardized.tsx": {
            "lines": 223,
            "tokens": 1620,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileDialogStandardized.tsx": {
            "lines": 253,
            "tokens": 1597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileController.tsx": {
            "lines": 79,
            "tokens": 537,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/LoginForm.tsx": {
            "lines": 117,
            "tokens": 852,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 275,
            "percentage": 36.75,
            "percentageTokens": 32.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/AuthProvider.tsx": {
            "lines": 9,
            "tokens": 78,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/AuthGuard.tsx": {
            "lines": 29,
            "tokens": 267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/tooltip.tsx": {
            "lines": 10,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toggle.tsx": {
            "lines": 5,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toggle-group.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toggle-button.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toggle-button-group.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toaster.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toast.tsx": {
            "lines": 18,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/toast-container.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/ThemeSwitcher.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/textarea.tsx": {
            "lines": 135,
            "tokens": 787,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/tabs.tsx": {
            "lines": 10,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/table.tsx": {
            "lines": 17,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/switch.tsx": {
            "lines": 60,
            "tokens": 353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/StandardizedForm.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/spinner.tsx": {
            "lines": 10,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/slider.tsx": {
            "lines": 217,
            "tokens": 1181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/skip-to-content.tsx": {
            "lines": 48,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/skeleton.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/sidebar-section.tsx": {
            "lines": 31,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/sheet.tsx": {
            "lines": 16,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/separator.tsx": {
            "lines": 113,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/select.tsx": {
            "lines": 16,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/SearchBar.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/scroll-area.tsx": {
            "lines": 18,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/radiogroup.tsx": {
            "lines": 155,
            "tokens": 748,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/radio-group.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/progress.tsx": {
            "lines": 39,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/popover.tsx": {
            "lines": 9,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/page-header.tsx": {
            "lines": 39,
            "tokens": 269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/navigation-menu.tsx": {
            "lines": 15,
            "tokens": 48,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/nav-item.tsx": {
            "lines": 76,
            "tokens": 470,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/multi-select.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/menubar.tsx": {
            "lines": 22,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/loading.tsx": {
            "lines": 59,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/loading-button.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/language-switcher.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/label.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/input.tsx": {
            "lines": 13,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/input-otp.tsx": {
            "lines": 10,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/icon-button.tsx": {
            "lines": 8,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/hover-card.tsx": {
            "lines": 9,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/header-breadcrumb.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/form.tsx": {
            "lines": 14,
            "tokens": 44,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/form-fields.tsx": {
            "lines": 23,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/FeatureCard.tsx": {
            "lines": 193,
            "tokens": 1454,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/dropdownmenu.tsx": {
            "lines": 263,
            "tokens": 1419,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 135,
            "duplicatedTokens": 758,
            "percentage": 51.33,
            "percentageTokens": 53.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/dropdown-menu.tsx": {
            "lines": 21,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/drawer.tsx": {
            "lines": 232,
            "tokens": 1606,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/dialog.tsx": {
            "lines": 40,
            "tokens": 144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/dev-menu.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/daterangepicker.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/datepicker.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/date-range-picker.tsx": {
            "lines": 113,
            "tokens": 869,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/data-table.tsx": {
            "lines": 12,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/currency-input.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/create-button.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/context-menu.tsx": {
            "lines": 21,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/command.tsx": {
            "lines": 54,
            "tokens": 295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/checkbox.tsx": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/card.tsx": {
            "lines": 26,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/calendar.tsx": {
            "lines": 8,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/button.tsx": {
            "lines": 62,
            "tokens": 407,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 230,
            "percentage": 56.45,
            "percentageTokens": 56.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/button-group.tsx": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/breadcrumbs.tsx": {
            "lines": 62,
            "tokens": 351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/breadcrumb.tsx": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/badge.tsx": {
            "lines": 9,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/avatar.tsx": {
            "lines": 9,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/alert.tsx": {
            "lines": 9,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/alert-dialog.tsx": {
            "lines": 17,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/action-button.tsx": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/accordion.tsx": {
            "lines": 10,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/performance.tsx": {
            "lines": 161,
            "tokens": 1146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/usePageBreadcrumbs.tsx": {
            "lines": 48,
            "tokens": 346,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useBreadcrumbs.tsx": {
            "lines": 246,
            "tokens": 1731,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/use-keyboard-navigation.tsx": {
            "lines": 143,
            "tokens": 996,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/TanksPage.tsx": {
            "lines": 44,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 185,
            "percentage": 54.55,
            "percentageTokens": 49.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/SettingsPage.tsx": {
            "lines": 19,
            "tokens": 205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/ManagementPage.tsx": {
            "lines": 320,
            "tokens": 2264,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 78,
            "duplicatedTokens": 591,
            "percentage": 24.38,
            "percentageTokens": 26.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/FuelSystemsPage.tsx": {
            "lines": 44,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 157,
            "percentage": 47.73,
            "percentageTokens": 42.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/FinancePage.tsx": {
            "lines": 19,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/EmployeesPage.tsx": {
            "lines": 616,
            "tokens": 5765,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 24,
            "duplicatedTokens": 248,
            "percentage": 3.9,
            "percentageTokens": 4.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/theme-provider.tsx": {
            "lines": 127,
            "tokens": 942,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/ErrorBoundary.tsx": {
            "lines": 102,
            "tokens": 710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/BreadcrumbProvider.tsx": {
            "lines": 41,
            "tokens": 296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useAuth.tsx": {
            "lines": 226,
            "tokens": 1810,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/Sidebar.tsx": {
            "lines": 300,
            "tokens": 1875,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 243,
            "percentage": 10.67,
            "percentageTokens": 12.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/PageLayout.tsx": {
            "lines": 102,
            "tokens": 689,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/MainLayout.tsx": {
            "lines": 148,
            "tokens": 965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/config/lazy-routes.tsx": {
            "lines": 147,
            "tokens": 1286,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/main.tsx": {
            "lines": 138,
            "tokens": 981,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/App.tsx": {
            "lines": 474,
            "tokens": 3211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 68433,
          "tokens": 515390,
          "sources": 437,
          "clones": 197,
          "duplicatedLines": 6298,
          "duplicatedTokens": 49576,
          "percentage": 9.2,
          "percentageTokens": 9.62,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "typescript": {
        "sources": {
          "src/shared/hooks/api/__tests__/useApiMutation.test.ts": {
            "lines": 211,
            "tokens": 2090,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/icons/index.ts": {
            "lines": 348,
            "tokens": 1956,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/index.ts": {
            "lines": 4,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/datepicker/index.ts": {
            "lines": 10,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/__tests__/useSalesQuery.test.ts": {
            "lines": 206,
            "tokens": 1893,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1893,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/__tests__/useTanks.test.ts": {
            "lines": 398,
            "tokens": 3231,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 112,
            "duplicatedTokens": 856,
            "percentage": 28.14,
            "percentageTokens": 26.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/__tests__/useSalesQuery.test.ts": {
            "lines": 206,
            "tokens": 1893,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 206,
            "duplicatedTokens": 1893,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/__tests__/useFinance.test.ts": {
            "lines": 340,
            "tokens": 2654,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/hooks/__tests__/useEmployees.test.ts": {
            "lines": 332,
            "tokens": 2636,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 400,
            "percentage": 15.66,
            "percentageTokens": 15.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/hooks/__tests__/useDashboard.test.ts": {
            "lines": 382,
            "tokens": 3321,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 210,
            "duplicatedTokens": 1620,
            "percentage": 54.97,
            "percentageTokens": 48.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/types/model-types.ts": {
            "lines": 234,
            "tokens": 1129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/types/form-types.ts": {
            "lines": 187,
            "tokens": 1036,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/icons/index.ts": {
            "lines": 69,
            "tokens": 345,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/index.ts": {
            "lines": 47,
            "tokens": 327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/types.ts": {
            "lines": 348,
            "tokens": 1188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/index.ts": {
            "lines": 46,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/types.ts": {
            "lines": 86,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/index.ts": {
            "lines": 21,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/useZodForm.ts": {
            "lines": 29,
            "tokens": 178,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 128,
            "percentage": 75.86,
            "percentageTokens": 71.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/useFormValidation.ts": {
            "lines": 118,
            "tokens": 535,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 91,
            "duplicatedTokens": 385,
            "percentage": 77.12,
            "percentageTokens": 71.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/useFormSubmitHandler.ts": {
            "lines": 118,
            "tokens": 545,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/useCommonValidation.ts": {
            "lines": 209,
            "tokens": 1564,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 65,
            "duplicatedTokens": 420,
            "percentage": 31.1,
            "percentageTokens": 26.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form/index.ts": {
            "lines": 3,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/base/useEntityDialog.ts": {
            "lines": 102,
            "tokens": 544,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/base/useBaseDialog.ts": {
            "lines": 82,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/base/types.ts": {
            "lines": 54,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/useApiQuery.ts": {
            "lines": 68,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/useApiMutation.ts": {
            "lines": 86,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/useApiInfiniteQuery.ts": {
            "lines": 111,
            "tokens": 700,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/types.ts": {
            "lines": 206,
            "tokens": 1173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/index.ts": {
            "lines": 59,
            "tokens": 189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/createResourceHooks.ts": {
            "lines": 175,
            "tokens": 1063,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/api/cache-utils.ts": {
            "lines": 159,
            "tokens": 1007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/index.ts": {
            "lines": 18,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/index.ts": {
            "lines": 7,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/index.ts": {
            "lines": 7,
            "tokens": 10,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/services/shifts.ts": {
            "lines": 222,
            "tokens": 1772,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/services/shift-payment-methods.ts": {
            "lines": 150,
            "tokens": 1269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/index.ts": {
            "lines": 8,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/hooks/useShift.ts": {
            "lines": 492,
            "tokens": 3656,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 260,
            "percentage": 6.1,
            "percentageTokens": 7.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/types/index.ts": {
            "lines": 46,
            "tokens": 302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/index.ts": {
            "lines": 7,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/types/index.ts": {
            "lines": 122,
            "tokens": 798,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 112,
            "duplicatedTokens": 732,
            "percentage": 91.8,
            "percentageTokens": 91.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/services/index.ts": {
            "lines": 251,
            "tokens": 1995,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/index.ts": {
            "lines": 4,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/useSalesQuery.ts": {
            "lines": 186,
            "tokens": 1793,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 176,
            "duplicatedTokens": 1718,
            "percentage": 94.62,
            "percentageTokens": 95.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/useSalesMutations.ts": {
            "lines": 123,
            "tokens": 974,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 132,
            "duplicatedTokens": 1054,
            "percentage": 107.32,
            "percentageTokens": 108.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/useSalesFilters.ts": {
            "lines": 170,
            "tokens": 1519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/useSalesDialog.ts": {
            "lines": 182,
            "tokens": 1471,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 199,
            "duplicatedTokens": 1620,
            "percentage": 109.34,
            "percentageTokens": 110.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/hooks/index.ts": {
            "lines": 4,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/index.ts": {
            "lines": 11,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/reports/hooks/useReportGenerator.ts": {
            "lines": 213,
            "tokens": 1573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/services/index.ts": {
            "lines": 4,
            "tokens": 11,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/hooks/index.ts": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/components/index.ts": {
            "lines": 5,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/utils/index.ts": {
            "lines": 11,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/utils/employeeMappers.ts": {
            "lines": 98,
            "tokens": 696,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 696,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/types/employees.types.ts": {
            "lines": 44,
            "tokens": 281,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 281,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/hooks/useEmployeeDialog.ts": {
            "lines": 150,
            "tokens": 977,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 127,
            "duplicatedTokens": 804,
            "percentage": 84.67,
            "percentageTokens": 82.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/index.ts": {
            "lines": 3,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/inventory/hooks/useInventoryDialog.ts": {
            "lines": 239,
            "tokens": 1491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 239,
            "duplicatedTokens": 1491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/utils/export.ts": {
            "lines": 136,
            "tokens": 1181,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 12,
            "duplicatedTokens": 162,
            "percentage": 8.82,
            "percentageTokens": 13.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/utils/calculations.ts": {
            "lines": 72,
            "tokens": 272,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/tanks.types.ts": {
            "lines": 64,
            "tokens": 408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/petrol-providers.types.ts": {
            "lines": 33,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/index.ts": {
            "lines": 95,
            "tokens": 738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/fuel.types.ts": {
            "lines": 47,
            "tokens": 340,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 106,
            "percentage": 34.04,
            "percentageTokens": 31.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/fuel-supplies.types.ts": {
            "lines": 44,
            "tokens": 280,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 106,
            "percentage": 36.36,
            "percentageTokens": 37.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/fuel-sales.types.ts": {
            "lines": 93,
            "tokens": 513,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/types/fuel-prices.types.ts": {
            "lines": 52,
            "tokens": 236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/store/useSuppliesFilters.ts": {
            "lines": 46,
            "tokens": 714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/services/index.ts": {
            "lines": 98,
            "tokens": 883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/services/fuelSuppliesService.ts": {
            "lines": 56,
            "tokens": 518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/services/fuelSalesService.ts": {
            "lines": 80,
            "tokens": 672,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/services/fuel-sales.service.ts": {
            "lines": 267,
            "tokens": 1935,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 348,
            "percentage": 18.73,
            "percentageTokens": 17.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/services/adapters.ts": {
            "lines": 41,
            "tokens": 312,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/index.ts": {
            "lines": 5,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useTankDialog.ts": {
            "lines": 143,
            "tokens": 1108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/usePetrolProviders.ts": {
            "lines": 51,
            "tokens": 458,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useInventoryDialog.ts": {
            "lines": 239,
            "tokens": 1491,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 239,
            "duplicatedTokens": 1491,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelTankMonitor.ts": {
            "lines": 375,
            "tokens": 2505,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelSuppliesFilters.ts": {
            "lines": 161,
            "tokens": 1309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelSuppliesFilters.test.ts": {
            "lines": 228,
            "tokens": 1920,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 94,
            "duplicatedTokens": 932,
            "percentage": 41.23,
            "percentageTokens": 48.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelSupplies.ts": {
            "lines": 56,
            "tokens": 496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelSupplies.test.ts": {
            "lines": 205,
            "tokens": 1593,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 160,
            "percentage": 9.76,
            "percentageTokens": 10.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelSales.ts": {
            "lines": 149,
            "tokens": 974,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 178,
            "percentage": 13.42,
            "percentageTokens": 18.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuelPrices.ts": {
            "lines": 144,
            "tokens": 1012,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 172,
            "percentage": 11.11,
            "percentageTokens": 17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFuel.ts": {
            "lines": 114,
            "tokens": 1112,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 89,
            "percentage": 4.39,
            "percentageTokens": 8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/hooks/useFillingSystem.ts": {
            "lines": 179,
            "tokens": 1102,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1102,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/types/index.ts": {
            "lines": 99,
            "tokens": 639,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 626,
            "percentage": 98.99,
            "percentageTokens": 97.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/types/finance.types.ts": {
            "lines": 73,
            "tokens": 477,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/services/transactions.ts": {
            "lines": 130,
            "tokens": 1138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/services/profit-loss.ts": {
            "lines": 388,
            "tokens": 3020,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/services/index.ts": {
            "lines": 381,
            "tokens": 2831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/services/financials.ts": {
            "lines": 76,
            "tokens": 848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/services/expenses.ts": {
            "lines": 162,
            "tokens": 1495,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/index.ts": {
            "lines": 7,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useTransactionCreation.ts": {
            "lines": 46,
            "tokens": 375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useSalesQuery.ts": {
            "lines": 158,
            "tokens": 1514,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 158,
            "duplicatedTokens": 1496,
            "percentage": 100,
            "percentageTokens": 98.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useSalesMutations.ts": {
            "lines": 123,
            "tokens": 974,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 123,
            "duplicatedTokens": 974,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useSalesFilters.ts": {
            "lines": 170,
            "tokens": 1519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 170,
            "duplicatedTokens": 1519,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useSalesDialog.ts": {
            "lines": 155,
            "tokens": 1259,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 152,
            "duplicatedTokens": 1208,
            "percentage": 98.06,
            "percentageTokens": 95.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/hooks/useFinance.ts": {
            "lines": 193,
            "tokens": 1509,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 32,
            "duplicatedTokens": 312,
            "percentage": 16.58,
            "percentageTokens": 20.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/index.ts": {
            "lines": 9,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/types/index.ts": {
            "lines": 58,
            "tokens": 293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/services/index.ts": {
            "lines": 187,
            "tokens": 1502,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/hooks/useFillingSystem.ts": {
            "lines": 179,
            "tokens": 1102,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1102,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/utils/index.ts": {
            "lines": 11,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/utils/employeeMappers.ts": {
            "lines": 98,
            "tokens": 696,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 696,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/types/employees.types.ts": {
            "lines": 44,
            "tokens": 281,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 281,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/services/index.ts": {
            "lines": 226,
            "tokens": 1743,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/hooks/useEmployeeDialog.ts": {
            "lines": 148,
            "tokens": 934,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 127,
            "duplicatedTokens": 804,
            "percentage": 85.81,
            "percentageTokens": 86.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/index.ts": {
            "lines": 3,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/types/index.ts": {
            "lines": 10,
            "tokens": 85,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/services/index.ts": {
            "lines": 179,
            "tokens": 1244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/services/dashboard.ts": {
            "lines": 52,
            "tokens": 429,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/hooks/useDashboard.ts": {
            "lines": 93,
            "tokens": 577,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/utils/auth.utils.ts": {
            "lines": 44,
            "tokens": 374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/types/auth.types.ts": {
            "lines": 54,
            "tokens": 349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/services/authService.ts": {
            "lines": 155,
            "tokens": 1257,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 78,
            "duplicatedTokens": 546,
            "percentage": 50.32,
            "percentageTokens": 43.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/hooks/useProfileDialog.ts": {
            "lines": 154,
            "tokens": 1129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/hooks/useLoginDialog.ts": {
            "lines": 188,
            "tokens": 1348,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/hooks/useAuthGuard.ts": {
            "lines": 29,
            "tokens": 277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/hooks/useAuth.ts": {
            "lines": 194,
            "tokens": 1573,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 60,
            "duplicatedTokens": 416,
            "percentage": 30.93,
            "percentageTokens": 26.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/hooks/index.ts": {
            "lines": 4,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/hooks/useStore.ts": {
            "lines": 28,
            "tokens": 307,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/index.ts": {
            "lines": 76,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/supabase-database.ts": {
            "lines": 430,
            "tokens": 3933,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 452,
            "duplicatedTokens": 3769,
            "percentage": 105.12,
            "percentageTokens": 95.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/sale-types.ts": {
            "lines": 21,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/profit-loss-types.ts": {
            "lines": 12,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/expense-types.ts": {
            "lines": 16,
            "tokens": 101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/employee-types.ts": {
            "lines": 14,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types/api-types.ts": {
            "lines": 184,
            "tokens": 807,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/transactions.ts": {
            "lines": 80,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/tanks.ts": {
            "lines": 145,
            "tokens": 994,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/shifts.ts": {
            "lines": 151,
            "tokens": 893,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/sales.ts": {
            "lines": 110,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/profit-loss.ts": {
            "lines": 64,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/petrol-providers.ts": {
            "lines": 79,
            "tokens": 424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/fuel-types.ts": {
            "lines": 81,
            "tokens": 465,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/fuel-supplies.ts": {
            "lines": 73,
            "tokens": 416,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/fuel-prices.ts": {
            "lines": 89,
            "tokens": 468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/financials.ts": {
            "lines": 114,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/filling-systems.ts": {
            "lines": 94,
            "tokens": 536,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/expenses.ts": {
            "lines": 120,
            "tokens": 757,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/employees.ts": {
            "lines": 76,
            "tokens": 418,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/endpoints/dashboard.ts": {
            "lines": 65,
            "tokens": 375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/deprecation/tracking.ts": {
            "lines": 42,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/optimization.ts": {
            "lines": 415,
            "tokens": 3628,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/object.ts": {
            "lines": 123,
            "tokens": 1047,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/index.ts": {
            "lines": 33,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/dom.ts": {
            "lines": 116,
            "tokens": 1004,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/date.ts": {
            "lines": 71,
            "tokens": 682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/utils/cn.ts": {
            "lines": 20,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/types/toast.ts": {
            "lines": 17,
            "tokens": 149,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/types/toast.d.ts": {
            "lines": 36,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/types/tank.types.ts": {
            "lines": 123,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/schemas/index.ts": {
            "lines": 4,
            "tokens": 10,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/schemas/common.ts": {
            "lines": 169,
            "tokens": 1119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useZodForm.ts": {
            "lines": 83,
            "tokens": 436,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 128,
            "percentage": 26.51,
            "percentageTokens": 29.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useTanks.ts": {
            "lines": 280,
            "tokens": 2328,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 21,
            "duplicatedTokens": 261,
            "percentage": 7.5,
            "percentageTokens": 11.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useRoutePrefetch.ts": {
            "lines": 70,
            "tokens": 718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useResponsive.ts": {
            "lines": 212,
            "tokens": 1317,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useQuery.ts": {
            "lines": 83,
            "tokens": 613,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useOptimizedEventListeners.ts": {
            "lines": 259,
            "tokens": 1716,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 196,
            "percentage": 10.04,
            "percentageTokens": 11.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useMultiStepDialog.ts": {
            "lines": 254,
            "tokens": 1416,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useMemorySafe.ts": {
            "lines": 160,
            "tokens": 1271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useMediaQuery.ts": {
            "lines": 18,
            "tokens": 186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useIsMobile.ts": {
            "lines": 10,
            "tokens": 53,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useFormValidation.ts": {
            "lines": 119,
            "tokens": 557,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 91,
            "duplicatedTokens": 385,
            "percentage": 76.47,
            "percentageTokens": 69.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useFormSubmitHandler.ts": {
            "lines": 151,
            "tokens": 840,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useFormSchemas.ts": {
            "lines": 245,
            "tokens": 1915,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 64,
            "duplicatedTokens": 597,
            "percentage": 26.12,
            "percentageTokens": 31.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useFieldValidation.ts": {
            "lines": 213,
            "tokens": 1514,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 64,
            "duplicatedTokens": 597,
            "percentage": 30.05,
            "percentageTokens": 39.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useEmployees.ts": {
            "lines": 217,
            "tokens": 1732,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useEffectOnce.ts": {
            "lines": 126,
            "tokens": 686,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useConfirmationDialog.ts": {
            "lines": 81,
            "tokens": 634,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/useCommonValidation.ts": {
            "lines": 237,
            "tokens": 1677,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 65,
            "duplicatedTokens": 420,
            "percentage": 27.43,
            "percentageTokens": 25.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/use-form.ts": {
            "lines": 102,
            "tokens": 682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/index.ts": {
            "lines": 48,
            "tokens": 295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/form-validation.ts": {
            "lines": 25,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/index.ts": {
            "lines": 9,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/integrations/supabase/types.ts": {
            "lines": 430,
            "tokens": 3503,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 430,
            "duplicatedTokens": 3503,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/index.ts": {
            "lines": 18,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/index.ts": {
            "lines": 18,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/index.ts": {
            "lines": 50,
            "tokens": 378,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/index.ts": {
            "lines": 13,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/index.ts": {
            "lines": 18,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/index.ts": {
            "lines": 5,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/index.ts": {
            "lines": 30,
            "tokens": 178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/index.ts": {
            "lines": 22,
            "tokens": 108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/index.ts": {
            "lines": 27,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/index.ts": {
            "lines": 19,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/schemas.ts": {
            "lines": 48,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/index.ts": {
            "lines": 32,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/types/navigation.ts": {
            "lines": 255,
            "tokens": 2049,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/types/index.ts": {
            "lines": 295,
            "tokens": 1779,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 106,
            "percentage": 4.75,
            "percentageTokens": 5.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/types/env.d.ts": {
            "lines": 87,
            "tokens": 426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/todoStore.ts": {
            "lines": 187,
            "tokens": 1634,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/storeTypes.ts": {
            "lines": 36,
            "tokens": 276,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/index.ts": {
            "lines": 17,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/authStore.ts": {
            "lines": 57,
            "tokens": 382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/store/appStore.ts": {
            "lines": 204,
            "tokens": 1475,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useToast.ts": {
            "lines": 118,
            "tokens": 598,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useTheme.ts": {
            "lines": 92,
            "tokens": 734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useLocalStorage.ts": {
            "lines": 67,
            "tokens": 513,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useDialog.ts": {
            "lines": 260,
            "tokens": 1555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/index.ts": {
            "lines": 11,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/design/theme.ts": {
            "lines": 294,
            "tokens": 1818,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 243,
            "duplicatedTokens": 1549,
            "percentage": 82.65,
            "percentageTokens": 85.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/design/index.ts": {
            "lines": 5,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/theme.ts": {
            "lines": 174,
            "tokens": 806,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/routes.ts": {
            "lines": 313,
            "tokens": 1822,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/navigation.ts": {
            "lines": 571,
            "tokens": 4014,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 139,
            "duplicatedTokens": 1084,
            "percentage": 24.34,
            "percentageTokens": 27.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/index.ts": {
            "lines": 13,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/features.ts": {
            "lines": 350,
            "tokens": 2158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/feature-flags.ts": {
            "lines": 87,
            "tokens": 475,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/environment.ts": {
            "lines": 49,
            "tokens": 234,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/enhanced-navigation.ts": {
            "lines": 407,
            "tokens": 3218,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 139,
            "duplicatedTokens": 1084,
            "percentage": 34.15,
            "percentageTokens": 33.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/constants.ts": {
            "lines": 77,
            "tokens": 346,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/config/api.ts": {
            "lines": 135,
            "tokens": 723,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/types.ts": {
            "lines": 357,
            "tokens": 2215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/supabase.ts": {
            "lines": 86,
            "tokens": 523,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/index.ts": {
            "lines": 89,
            "tokens": 715,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api/client.ts": {
            "lines": 366,
            "tokens": 2714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/supabase-helpers.ts": {
            "lines": 48,
            "tokens": 405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/errorHandling.ts": {
            "lines": 73,
            "tokens": 683,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/cn.ts": {
            "lines": 5,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/bundle-optimization.ts": {
            "lines": 337,
            "tokens": 3140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/api-helpers.ts": {
            "lines": 5,
            "tokens": 12,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/todo.ts": {
            "lines": 25,
            "tokens": 136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/services/centralized-api.ts": {
            "lines": 300,
            "tokens": 2563,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/formatters.ts": {
            "lines": 296,
            "tokens": 2295,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 42,
            "duplicatedTokens": 468,
            "percentage": 14.19,
            "percentageTokens": 20.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/design-system.ts": {
            "lines": 358,
            "tokens": 2140,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 243,
            "duplicatedTokens": 1549,
            "percentage": 67.88,
            "percentageTokens": 72.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/i18n/i18n.ts": {
            "lines": 48,
            "tokens": 302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/i18n/api-translations.ts": {
            "lines": 150,
            "tokens": 988,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useSupabase.ts": {
            "lines": 367,
            "tokens": 3615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useResponsive.ts": {
            "lines": 330,
            "tokens": 2777,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/useCentralizedEntity.ts": {
            "lines": 352,
            "tokens": 3083,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks/index.ts": {
            "lines": 29,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/errorHandling.ts": {
            "lines": 413,
            "tokens": 2942,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/db-migration.ts": {
            "lines": 51,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/api-helpers.ts": {
            "lines": 171,
            "tokens": 1174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types.ts": {
            "lines": 6,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 30835,
          "tokens": 221403,
          "sources": 242,
          "clones": 76,
          "duplicatedLines": 3166,
          "duplicatedTokens": 24146,
          "percentage": 10.27,
          "percentageTokens": 10.91,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "src/shared/components/common/dialog/StandardDialog.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/FormDialog.tsx": {
            "lines": 32,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/DeleteConfirmDialog.tsx": {
            "lines": 20,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/dialog/ConfirmDialog.tsx": {
            "lines": 27,
            "tokens": 194,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/datepicker/StandardDatePicker.tsx": {
            "lines": 107,
            "tokens": 721,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/common/datepicker/FormStandardDatePicker.tsx": {
            "lines": 17,
            "tokens": 95,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/form/PriceAndEmployeeInputs.tsx": {
            "lines": 27,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/form/FillingSystemSelect.tsx": {
            "lines": 40,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/summary/FuelSuppliesSummary.tsx": {
            "lines": 254,
            "tokens": 2098,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/TankEmployee.tsx": {
            "lines": 34,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/QuantityAndPrice.tsx": {
            "lines": 84,
            "tokens": 574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/DeliveryDateProvider.tsx": {
            "lines": 60,
            "tokens": 429,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/form/CommentsField.tsx": {
            "lines": 12,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/RangeSliderFilter.tsx": {
            "lines": 24,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/ProviderFilter.tsx": {
            "lines": 79,
            "tokens": 521,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/FilterBar.tsx": {
            "lines": 294,
            "tokens": 2266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/DateRangePicker.tsx": {
            "lines": 81,
            "tokens": 504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/DateRangeFilter.tsx": {
            "lines": 29,
            "tokens": 241,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/filters/AdvancedSearchInput.tsx": {
            "lines": 49,
            "tokens": 381,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/data-table/FuelSuppliesDataTable.tsx": {
            "lines": 36,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/form/FillingSystemSelect.tsx": {
            "lines": 40,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/styled/dialog.tsx": {
            "lines": 210,
            "tokens": 1351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/tooltip.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-group.tsx": {
            "lines": 28,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-button.tsx": {
            "lines": 5,
            "tokens": 48,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toggle-button-group.tsx": {
            "lines": 7,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toaster.tsx": {
            "lines": 0,
            "tokens": 10,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toast.tsx": {
            "lines": 92,
            "tokens": 636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/toast-container.tsx": {
            "lines": 57,
            "tokens": 534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/ThemeSwitcher.tsx": {
            "lines": 83,
            "tokens": 518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/tabs.tsx": {
            "lines": 34,
            "tokens": 215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/table.tsx": {
            "lines": 171,
            "tokens": 1009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/switch.tsx": {
            "lines": 10,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/StandardizedForm.tsx": {
            "lines": 1,
            "tokens": 14,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/spinner.tsx": {
            "lines": 48,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/skeleton.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/sheet.tsx": {
            "lines": 109,
            "tokens": 682,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 638,
            "percentage": 90.83,
            "percentageTokens": 93.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/select.tsx": {
            "lines": 123,
            "tokens": 828,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/searchbar.tsx": {
            "lines": 22,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/radio-group.tsx": {
            "lines": 18,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/progress.tsx": {
            "lines": 8,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/popover.tsx": {
            "lines": 6,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/navigation-menu.tsx": {
            "lines": 96,
            "tokens": 629,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/multi-select.tsx": {
            "lines": 74,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/menubar.tsx": {
            "lines": 188,
            "tokens": 1256,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 555,
            "percentage": 42.55,
            "percentageTokens": 44.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/loading-button.tsx": {
            "lines": 4,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/language-switcher.tsx": {
            "lines": 82,
            "tokens": 640,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 82,
            "duplicatedTokens": 638,
            "percentage": 100,
            "percentageTokens": 99.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/label.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/input.tsx": {
            "lines": 28,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/input-otp.tsx": {
            "lines": 51,
            "tokens": 405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/icon-button.tsx": {
            "lines": 4,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/hover-card.tsx": {
            "lines": 6,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/header-breadcrumb.tsx": {
            "lines": 6,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/form.tsx": {
            "lines": 123,
            "tokens": 946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/form-fields.tsx": {
            "lines": 401,
            "tokens": 2778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/dropdown-menu.tsx": {
            "lines": 149,
            "tokens": 1001,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 170,
            "duplicatedTokens": 1036,
            "percentage": 114.09,
            "percentageTokens": 103.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/dev-menu.tsx": {
            "lines": 1,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/daterangepicker.tsx": {
            "lines": 28,
            "tokens": 227,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/datepicker.tsx": {
            "lines": 19,
            "tokens": 118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/data-table.tsx": {
            "lines": 573,
            "tokens": 4676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 277,
            "percentage": 5.58,
            "percentageTokens": 5.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/currency-input.tsx": {
            "lines": 4,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/create-button.tsx": {
            "lines": 2,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/context-menu.tsx": {
            "lines": 149,
            "tokens": 987,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 555,
            "percentage": 53.69,
            "percentageTokens": 56.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/checkbox.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/card.tsx": {
            "lines": 204,
            "tokens": 1407,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 254,
            "duplicatedTokens": 1698,
            "percentage": 124.51,
            "percentageTokens": 120.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/calendar.tsx": {
            "lines": 86,
            "tokens": 675,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/button.tsx": {
            "lines": 132,
            "tokens": 759,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/button-group.tsx": {
            "lines": 9,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/breadcrumb.tsx": {
            "lines": 99,
            "tokens": 606,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/badge.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/avatar.tsx": {
            "lines": 31,
            "tokens": 214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/alert.tsx": {
            "lines": 26,
            "tokens": 197,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/alert-dialog.tsx": {
            "lines": 103,
            "tokens": 679,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/action-button.tsx": {
            "lines": 3,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/primitives/accordion.tsx": {
            "lines": 36,
            "tokens": 270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/toast-system.tsx": {
            "lines": 144,
            "tokens": 1296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/metric-card.tsx": {
            "lines": 133,
            "tokens": 1011,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/loading-states.tsx": {
            "lines": 187,
            "tokens": 1520,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/loading-overlay.tsx": {
            "lines": 128,
            "tokens": 1068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/form-builder.tsx": {
            "lines": 500,
            "tokens": 4363,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/data-table.tsx": {
            "lines": 309,
            "tokens": 2862,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 277,
            "percentage": 10.36,
            "percentageTokens": 9.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/enhanced/dashboard-widgets.tsx": {
            "lines": 449,
            "tokens": 3966,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 540,
            "percentage": 12.92,
            "percentageTokens": 13.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/visually-hidden.tsx": {
            "lines": 5,
            "tokens": 18,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/textarea.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/supabase-connection-status.tsx": {
            "lines": 28,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/slider.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/skip-to-content.tsx": {
            "lines": 6,
            "tokens": 35,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sidebar-shortcuts.tsx": {
            "lines": 64,
            "tokens": 515,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sidebar-section.tsx": {
            "lines": 20,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/sheet.tsx": {
            "lines": 100,
            "tokens": 644,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 638,
            "percentage": 99,
            "percentageTokens": 99.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/separator.tsx": {
            "lines": 7,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/SearchBar.tsx": {
            "lines": 9,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/scroll-area.tsx": {
            "lines": 27,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/resizable.tsx": {
            "lines": 21,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/pagination.tsx": {
            "lines": 89,
            "tokens": 608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/page-header.tsx": {
            "lines": 93,
            "tokens": 553,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/nav-item.tsx": {
            "lines": 45,
            "tokens": 213,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/loading.tsx": {
            "lines": 17,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/keyboard-shortcut.tsx": {
            "lines": 14,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/header.tsx": {
            "lines": 30,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/form.tsx": {
            "lines": 125,
            "tokens": 897,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/form-fields.tsx": {
            "lines": 732,
            "tokens": 4820,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 520,
            "duplicatedTokens": 3084,
            "percentage": 71.04,
            "percentageTokens": 63.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/error-handler.tsx": {
            "lines": 142,
            "tokens": 1020,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/drawer.tsx": {
            "lines": 88,
            "tokens": 603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/dialog.tsx": {
            "lines": 16,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/dev-menu.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/date-range-picker.tsx": {
            "lines": 33,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/data-table.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/connectivity-debugger.tsx": {
            "lines": 95,
            "tokens": 686,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/command.tsx": {
            "lines": 146,
            "tokens": 967,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/color-contrast-checker.tsx": {
            "lines": 73,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/chart.tsx": {
            "lines": 256,
            "tokens": 1735,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/carousel.tsx": {
            "lines": 120,
            "tokens": 771,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/base-form.tsx": {
            "lines": 45,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/composed/base-dialog.tsx": {
            "lines": 169,
            "tokens": 1015,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/summary-card.tsx": {
            "lines": 46,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/stats-card.tsx": {
            "lines": 21,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/metric-card.tsx": {
            "lines": 57,
            "tokens": 328,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/info-card.tsx": {
            "lines": 3,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/card.tsx": {
            "lines": 197,
            "tokens": 1173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/card-grid.tsx": {
            "lines": 84,
            "tokens": 514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/cards/action-card.tsx": {
            "lines": 38,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/loading-button.tsx": {
            "lines": 8,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/icon-button.tsx": {
            "lines": 7,
            "tokens": 35,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/buttons/button.tsx": {
            "lines": 2,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/accessibility/visually-hidden.tsx": {
            "lines": 7,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/StandardizedDataTable.tsx": {
            "lines": 248,
            "tokens": 1911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/SearchHighlighter.tsx": {
            "lines": 79,
            "tokens": 587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/ResponsiveDataTable.tsx": {
            "lines": 225,
            "tokens": 1627,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/MetricCard.tsx": {
            "lines": 67,
            "tokens": 490,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/unified/DebouncedSearch.tsx": {
            "lines": 29,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/theme-toggle.tsx": {
            "lines": 82,
            "tokens": 622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/theme-provider.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/StatusIndicator.tsx": {
            "lines": 21,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/shimmer-loader.tsx": {
            "lines": 200,
            "tokens": 2354,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/Loading.tsx": {
            "lines": 271,
            "tokens": 2251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/ui/LazyLoader.tsx": {
            "lines": 72,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarNavSection.tsx": {
            "lines": 81,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarLogo.tsx": {
            "lines": 27,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/sidebar/SidebarFooter.tsx": {
            "lines": 122,
            "tokens": 724,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/PaymentMethodFormStandardized.tsx": {
            "lines": 33,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/MultiPaymentMethodFormStandardized.tsx": {
            "lines": 172,
            "tokens": 1150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/shared/InvoiceFormStandardized.tsx": {
            "lines": 19,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/ThemeToggle.tsx": {
            "lines": 10,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/SettingsDropdown.tsx": {
            "lines": 74,
            "tokens": 479,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/PageHeader.tsx": {
            "lines": 30,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/PageContainer.tsx": {
            "lines": 20,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationGrid.tsx": {
            "lines": 5,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationCard.tsx": {
            "lines": 161,
            "tokens": 980,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/NavigationBreadcrumbs.tsx": {
            "lines": 51,
            "tokens": 283,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/navigation/Breadcrumbs.tsx": {
            "lines": 86,
            "tokens": 587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/WindowContainer.tsx": {
            "lines": 29,
            "tokens": 262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/PageHeader.tsx": {
            "lines": 9,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/PageContainer.tsx": {
            "lines": 3,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/DashboardGrid.tsx": {
            "lines": 73,
            "tokens": 446,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/layout/Breadcrumb.tsx": {
            "lines": 42,
            "tokens": 316,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/form/PriceAndEmployeeInputs.tsx": {
            "lines": 40,
            "tokens": 294,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/enhanced/ErrorBoundary.tsx": {
            "lines": 29,
            "tokens": 152,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dialogs/ConfirmationDialogStandardized.tsx": {
            "lines": 14,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dialogs/ConfirmationController.tsx": {
            "lines": 7,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/dev/DevToolsMenu.tsx": {
            "lines": 12,
            "tokens": 135,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/StatsCard.tsx": {
            "lines": 32,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/ModuleCard.tsx": {
            "lines": 74,
            "tokens": 438,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/MetricCard.tsx": {
            "lines": 102,
            "tokens": 576,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/components/cards/DashboardCard.tsx": {
            "lines": 155,
            "tokens": 1118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/sidebar/components/Sidebar.tsx": {
            "lines": 43,
            "tokens": 281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsPage.tsx": {
            "lines": 216,
            "tokens": 1777,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 191,
            "percentage": 10.19,
            "percentageTokens": 10.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsManagementPage.tsx": {
            "lines": 255,
            "tokens": 2120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsMainPage.tsx": {
            "lines": 132,
            "tokens": 1215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftsDashboard.tsx": {
            "lines": 328,
            "tokens": 2832,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 680,
            "duplicatedTokens": 6242,
            "percentage": 207.32,
            "percentageTokens": 220.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/Shifts.tsx": {
            "lines": 497,
            "tokens": 4079,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftOpen.tsx": {
            "lines": 423,
            "tokens": 2530,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 278,
            "duplicatedTokens": 1486,
            "percentage": 65.72,
            "percentageTokens": 58.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftDetails.tsx": {
            "lines": 355,
            "tokens": 2563,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/pages/ShiftClose.tsx": {
            "lines": 91,
            "tokens": 595,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/shifts/components/ShiftMetricCard.tsx": {
            "lines": 75,
            "tokens": 499,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/SettingsPage.tsx": {
            "lines": 43,
            "tokens": 346,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 172,
            "duplicatedTokens": 1428,
            "percentage": 400,
            "percentageTokens": 412.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/SecuritySettings.tsx": {
            "lines": 532,
            "tokens": 3606,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 130,
            "percentage": 6.02,
            "percentageTokens": 3.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/ProfileSettings.tsx": {
            "lines": 5,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/PrivacySettings.tsx": {
            "lines": 363,
            "tokens": 2498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/NotificationSettings.tsx": {
            "lines": 268,
            "tokens": 1743,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/AppearanceSettings.tsx": {
            "lines": 131,
            "tokens": 982,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/pages/AccountSettings.tsx": {
            "lines": 129,
            "tokens": 948,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/ThemeSettings.tsx": {
            "lines": 153,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/SecuritySettings.tsx": {
            "lines": 143,
            "tokens": 1042,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 62,
            "duplicatedTokens": 364,
            "percentage": 43.36,
            "percentageTokens": 34.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/ProfileSettings.tsx": {
            "lines": 214,
            "tokens": 1627,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 90,
            "duplicatedTokens": 528,
            "percentage": 42.06,
            "percentageTokens": 32.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/components/NotificationSettings.tsx": {
            "lines": 37,
            "tokens": 361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesPage.tsx": {
            "lines": 73,
            "tokens": 574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesNew.tsx": {
            "lines": 66,
            "tokens": 436,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 64,
            "duplicatedTokens": 409,
            "percentage": 96.97,
            "percentageTokens": 93.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesMainPage.tsx": {
            "lines": 168,
            "tokens": 1455,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 64,
            "duplicatedTokens": 534,
            "percentage": 38.1,
            "percentageTokens": 36.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesDashboard.tsx": {
            "lines": 355,
            "tokens": 3056,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 237,
            "duplicatedTokens": 2090,
            "percentage": 66.76,
            "percentageTokens": 68.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/pages/SalesCreate.tsx": {
            "lines": 19,
            "tokens": 136,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 318,
            "percentage": 247.37,
            "percentageTokens": 233.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/TankFormDialogStandardized.tsx": {
            "lines": 43,
            "tokens": 302,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 308,
            "percentage": 102.33,
            "percentageTokens": 101.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/ShiftControl.tsx": {
            "lines": 10,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesTableStandardized.tsx": {
            "lines": 85,
            "tokens": 720,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 85,
            "duplicatedTokens": 720,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesSystemSelect.tsx": {
            "lines": 2,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesSearchBar.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesRangesFilters.tsx": {
            "lines": 114,
            "tokens": 626,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 527,
            "percentage": 78.95,
            "percentageTokens": 84.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesManager.tsx": {
            "lines": 33,
            "tokens": 184,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesHeader.tsx": {
            "lines": 14,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFormStandardized.tsx": {
            "lines": 220,
            "tokens": 1546,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 222,
            "percentage": 17.27,
            "percentageTokens": 14.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFilters.tsx": {
            "lines": 9,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesFilterPanel.tsx": {
            "lines": 46,
            "tokens": 462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesDialogsStandardized.tsx": {
            "lines": 145,
            "tokens": 899,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 246,
            "duplicatedTokens": 1567,
            "percentage": 169.66,
            "percentageTokens": 174.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesDatePicker.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/SalesController.tsx": {
            "lines": 13,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/NewSaleButton.tsx": {
            "lines": 10,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/components/FillingSystemSelect.tsx": {
            "lines": 9,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/reports/pages/ReportsPage.tsx": {
            "lines": 43,
            "tokens": 368,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 368,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/pages/NavigationPage.tsx": {
            "lines": 196,
            "tokens": 1322,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/pages/ShiftsDashboard.tsx": {
            "lines": 281,
            "tokens": 2539,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeesTableStandardized.tsx": {
            "lines": 0,
            "tokens": 6,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeManager.tsx": {
            "lines": 11,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeDialogStandardized.tsx": {
            "lines": 168,
            "tokens": 1106,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 349,
            "duplicatedTokens": 2179,
            "percentage": 207.74,
            "percentageTokens": 197.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/EmployeeDialog.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/components/DeleteConfirmDialogStandardized.tsx": {
            "lines": 3,
            "tokens": 47,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/layout/pages/SyncUpPage.tsx": {
            "lines": 80,
            "tokens": 598,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/layout/pages/Index.tsx": {
            "lines": 20,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/TanksPage.tsx": {
            "lines": 27,
            "tokens": 221,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/ProvidersPage.tsx": {
            "lines": 27,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/PetrolProviders.tsx": {
            "lines": 75,
            "tokens": 516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelTypesPage.tsx": {
            "lines": 27,
            "tokens": 219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelSuppliesPage.tsx": {
            "lines": 27,
            "tokens": 219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelSalesPage.tsx": {
            "lines": 27,
            "tokens": 234,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelPricesPage.tsx": {
            "lines": 109,
            "tokens": 928,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelManagementPage.tsx": {
            "lines": 43,
            "tokens": 368,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 368,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelManagementDashboard.tsx": {
            "lines": 263,
            "tokens": 2211,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 91,
            "duplicatedTokens": 761,
            "percentage": 34.6,
            "percentageTokens": 34.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelDashboardPage.tsx": {
            "lines": 128,
            "tokens": 1178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FuelAnalyticsPage.tsx": {
            "lines": 27,
            "tokens": 240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/pages/FillingSystemsPage.tsx": {
            "lines": 27,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankManager.tsx": {
            "lines": 38,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankList.tsx": {
            "lines": 207,
            "tokens": 1803,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankLevelEditor.tsx": {
            "lines": 38,
            "tokens": 365,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankHistory.tsx": {
            "lines": 10,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankFormDialog.tsx": {
            "lines": 190,
            "tokens": 1242,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 56,
            "duplicatedTokens": 294,
            "percentage": 29.47,
            "percentageTokens": 23.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/TankController.tsx": {
            "lines": 13,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/SuppliesTableStandardized.tsx": {
            "lines": 60,
            "tokens": 483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/SuppliesDashboard.tsx": {
            "lines": 29,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/ProviderDialogStandardized.tsx": {
            "lines": 43,
            "tokens": 366,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/KpiCardGrid.tsx": {
            "lines": 101,
            "tokens": 795,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 138,
            "duplicatedTokens": 1100,
            "percentage": 136.63,
            "percentageTokens": 138.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelTankCard.tsx": {
            "lines": 22,
            "tokens": 228,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSupplyList.tsx": {
            "lines": 13,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSuppliesManagerStandardized.tsx": {
            "lines": 7,
            "tokens": 48,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesTable.tsx": {
            "lines": 23,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesStatusUpdate.tsx": {
            "lines": 20,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesManagerStandardized.tsx": {
            "lines": 45,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesFormStandardized.tsx": {
            "lines": 72,
            "tokens": 459,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSalesFilter.tsx": {
            "lines": 48,
            "tokens": 429,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FuelSaleList.tsx": {
            "lines": 11,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemManagerStandardized.tsx": {
            "lines": 55,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemList.tsx": {
            "lines": 39,
            "tokens": 319,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 38,
            "duplicatedTokens": 311,
            "percentage": 97.44,
            "percentageTokens": 97.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemHeader.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemFormStandardized.tsx": {
            "lines": 38,
            "tokens": 222,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 37,
            "duplicatedTokens": 216,
            "percentage": 97.37,
            "percentageTokens": 97.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/components/FillingSystemCard.tsx": {
            "lines": 7,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/TransactionsPage.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesNew.tsx": {
            "lines": 66,
            "tokens": 425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 64,
            "duplicatedTokens": 409,
            "percentage": 96.97,
            "percentageTokens": 96.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesDashboard.tsx": {
            "lines": 355,
            "tokens": 3345,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 330,
            "duplicatedTokens": 3200,
            "percentage": 92.96,
            "percentageTokens": 95.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/SalesCreate.tsx": {
            "lines": 19,
            "tokens": 136,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 136,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/RevenuePage.tsx": {
            "lines": 165,
            "tokens": 1291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/FinancePage.tsx": {
            "lines": 43,
            "tokens": 346,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 346,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/FinanceDashboard.tsx": {
            "lines": 141,
            "tokens": 1065,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpensesPage.tsx": {
            "lines": 470,
            "tokens": 3975,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 66,
            "duplicatedTokens": 521,
            "percentage": 14.04,
            "percentageTokens": 13.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpenseForm.tsx": {
            "lines": 235,
            "tokens": 1355,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 83,
            "percentage": 6.38,
            "percentageTokens": 6.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/pages/ExpenseCreate.tsx": {
            "lines": 37,
            "tokens": 237,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 182,
            "percentage": 75.68,
            "percentageTokens": 76.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TransactionsTableStandardized.tsx": {
            "lines": 17,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TransactionDialogStandardized.tsx": {
            "lines": 149,
            "tokens": 880,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 83,
            "percentage": 10.07,
            "percentageTokens": 9.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/TankFormDialogStandardized.tsx": {
            "lines": 44,
            "tokens": 308,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 308,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ShiftControl.tsx": {
            "lines": 10,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesTableStandardized.tsx": {
            "lines": 85,
            "tokens": 720,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 85,
            "duplicatedTokens": 720,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesSystemSelect.tsx": {
            "lines": 2,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesSearchBar.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesRangesFilters.tsx": {
            "lines": 131,
            "tokens": 739,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 527,
            "percentage": 68.7,
            "percentageTokens": 71.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesManager.tsx": {
            "lines": 33,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesHeader.tsx": {
            "lines": 6,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFormStandardized.tsx": {
            "lines": 166,
            "tokens": 1128,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 189,
            "duplicatedTokens": 1294,
            "percentage": 113.86,
            "percentageTokens": 114.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFilters.tsx": {
            "lines": 9,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesFilterPanel.tsx": {
            "lines": 44,
            "tokens": 393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesDialogsStandardized.tsx": {
            "lines": 185,
            "tokens": 1151,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 191,
            "duplicatedTokens": 1167,
            "percentage": 103.24,
            "percentageTokens": 101.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/SalesDatePicker.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ProfitLossManagerStandardized.tsx": {
            "lines": 114,
            "tokens": 795,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 290,
            "percentage": 47.37,
            "percentageTokens": 36.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/NewSaleButton.tsx": {
            "lines": 10,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinancialDashboardStandardized.tsx": {
            "lines": 72,
            "tokens": 661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinanceManagerStandardized.tsx": {
            "lines": 70,
            "tokens": 441,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FinanceFiltersStandardized.tsx": {
            "lines": 151,
            "tokens": 1206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FilterPanel.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/FillingSystemSelect.tsx": {
            "lines": 9,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpensesTableStandardized.tsx": {
            "lines": 16,
            "tokens": 95,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpensesTable.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpenseManagerStandardized.tsx": {
            "lines": 43,
            "tokens": 349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/components/ExpenseDialogStandardized.tsx": {
            "lines": 109,
            "tokens": 666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemManagerStandardized.tsx": {
            "lines": 55,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemList.tsx": {
            "lines": 38,
            "tokens": 311,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 38,
            "duplicatedTokens": 311,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemHeader.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemFormStandardized.tsx": {
            "lines": 37,
            "tokens": 216,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 37,
            "duplicatedTokens": 216,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/components/FillingSystemCard.tsx": {
            "lines": 7,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/pages/ExpensesPage.tsx": {
            "lines": 81,
            "tokens": 645,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/components/FilterPanel.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/expenses/components/ExpensesTable.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/pages/EmployeesPage.tsx": {
            "lines": 80,
            "tokens": 739,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/pages/EmployeesMainPage.tsx": {
            "lines": 142,
            "tokens": 1309,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 64,
            "duplicatedTokens": 534,
            "percentage": 45.07,
            "percentageTokens": 40.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeesTableStandardized.tsx": {
            "lines": 0,
            "tokens": 6,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeManager.tsx": {
            "lines": 11,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeDialogStandardized.tsx": {
            "lines": 168,
            "tokens": 1106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 168,
            "duplicatedTokens": 1106,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/EmployeeDialog.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/employees/components/DeleteConfirmDialogStandardized.tsx": {
            "lines": 3,
            "tokens": 47,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/pages/DashboardPage.tsx": {
            "lines": 70,
            "tokens": 509,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/SalesSummaryWidgetStandardized.tsx": {
            "lines": 55,
            "tokens": 517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/SalesDashboard.tsx": {
            "lines": 184,
            "tokens": 1782,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/RevenueExpensesChart.tsx": {
            "lines": 19,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/ProfitLossChart.tsx": {
            "lines": 8,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/MetricsCardsStandardized.tsx": {
            "lines": 1,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/IncomeExpenseOverview.tsx": {
            "lines": 363,
            "tokens": 2641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelManagementDashboardPro.tsx": {
            "lines": 524,
            "tokens": 4304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelManagementDashboard.tsx": {
            "lines": 179,
            "tokens": 1652,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FuelLevelVisualizationStandardized.tsx": {
            "lines": 37,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/FinanceDashboard.tsx": {
            "lines": 207,
            "tokens": 2049,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/DashboardOverviewStandardized.tsx": {
            "lines": 2,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/components/DashboardMetrics.tsx": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/pages/AuthPage.tsx": {
            "lines": 131,
            "tokens": 1098,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/pages/Auth.tsx": {
            "lines": 0,
            "tokens": 11,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/SessionLogoutDialogStandardized.tsx": {
            "lines": 8,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/RegisterForm.tsx": {
            "lines": 90,
            "tokens": 587,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 80,
            "duplicatedTokens": 472,
            "percentage": 88.89,
            "percentageTokens": 80.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileFormStandardized.tsx": {
            "lines": 83,
            "tokens": 527,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileDialogStandardized.tsx": {
            "lines": 129,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/ProfileController.tsx": {
            "lines": 13,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/LoginForm.tsx": {
            "lines": 44,
            "tokens": 306,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 25,
            "duplicatedTokens": 149,
            "percentage": 56.82,
            "percentageTokens": 48.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/auth/components/AuthGuard.tsx": {
            "lines": 4,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/textarea.tsx": {
            "lines": 14,
            "tokens": 68,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/switch.tsx": {
            "lines": 15,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/slider.tsx": {
            "lines": 77,
            "tokens": 405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/skip-to-content.tsx": {
            "lines": 12,
            "tokens": 44,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/sidebar-section.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/separator.tsx": {
            "lines": 55,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/scroll-area.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/radiogroup.tsx": {
            "lines": 47,
            "tokens": 283,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/progress.tsx": {
            "lines": 3,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/page-header.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/nav-item.tsx": {
            "lines": 13,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/loading.tsx": {
            "lines": 6,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/FeatureCard.tsx": {
            "lines": 107,
            "tokens": 734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/dropdownmenu.tsx": {
            "lines": 191,
            "tokens": 1169,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 170,
            "duplicatedTokens": 1036,
            "percentage": 89.01,
            "percentageTokens": 88.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/drawer.tsx": {
            "lines": 109,
            "tokens": 745,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/date-range-picker.tsx": {
            "lines": 55,
            "tokens": 392,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/command.tsx": {
            "lines": 33,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/button.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/components/ui/breadcrumbs.tsx": {
            "lines": 34,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/TanksPage.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/SettingsPage.tsx": {
            "lines": 6,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/ManagementPage.tsx": {
            "lines": 43,
            "tokens": 346,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 346,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/FuelSystemsPage.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/FinancePage.tsx": {
            "lines": 6,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/management/EmployeesPage.tsx": {
            "lines": 397,
            "tokens": 3675,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 66,
            "duplicatedTokens": 521,
            "percentage": 16.62,
            "percentageTokens": 14.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/theme-provider.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/ErrorBoundary.tsx": {
            "lines": 30,
            "tokens": 230,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/providers/BreadcrumbProvider.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/core/hooks/useAuth.tsx": {
            "lines": 9,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/Sidebar.tsx": {
            "lines": 248,
            "tokens": 1507,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/PageLayout.tsx": {
            "lines": 32,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/layouts/MainLayout.tsx": {
            "lines": 75,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/config/lazy-routes.tsx": {
            "lines": 0,
            "tokens": 6,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/main.tsx": {
            "lines": 6,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/App.tsx": {
            "lines": 373,
            "tokens": 1820,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 29251,
          "tokens": 216400,
          "sources": 362,
          "clones": 73,
          "duplicatedLines": 3238,
          "duplicatedTokens": 23277,
          "percentage": 11.07,
          "percentageTokens": 10.76,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "markdown": {
        "sources": {
          "src/shared/hooks/api/README.md": {
            "lines": 109,
            "tokens": 647,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/shared/hooks/README.md": {
            "lines": 98,
            "tokens": 682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/settings/MIGRATION_LOG.md": {
            "lines": 63,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/sales/MIGRATION_LOG.md": {
            "lines": 29,
            "tokens": 351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/navigations/README.md": {
            "lines": 45,
            "tokens": 405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/fuel-management/README.md": {
            "lines": 111,
            "tokens": 657,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 111,
            "duplicatedTokens": 657,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/finance/MIGRATION_LOG.md": {
            "lines": 39,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/filling-systems/README.md": {
            "lines": 111,
            "tokens": 657,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 111,
            "duplicatedTokens": 657,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/features/dashboard/MIGRATION_LOG.md": {
            "lines": 32,
            "tokens": 389,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 637,
          "tokens": 4698,
          "sources": 9,
          "clones": 1,
          "duplicatedLines": 111,
          "duplicatedTokens": 657,
          "percentage": 17.43,
          "percentageTokens": 13.98,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "json": {
        "sources": {
          "src/i18n/locales/hy/translation.json": {
            "lines": 262,
            "tokens": 1673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/i18n/locales/en/translation.json": {
            "lines": 755,
            "tokens": 5075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/i18n/locales/backup/translation_main_original.json": {
            "lines": 301,
            "tokens": 2031,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 1318,
          "tokens": 8779,
          "sources": 3,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "src/index.css": {
            "lines": 937,
            "tokens": 7364,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 937,
          "tokens": 7364,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 131411,
      "tokens": 974034,
      "sources": 1054,
      "clones": 347,
      "duplicatedLines": 12813,
      "duplicatedTokens": 97656,
      "percentage": 9.75,
      "percentageTokens": 10.03,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "const { result } = renderHook(() =>\n      useZodForm({\n        schema: testSchema,\n        defaultValues,\n      })\n    );\n\n    // Set invalid values\n    act(() => {\n      result.current.setValue(\"name\", \"a\");\n      result.current.setValue(\"email\", \"invalid-email\");\n      result.current.setValue(\"age\", 16);\n    });\n\n    // Try to submit the form",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\form\\__tests__\\useZodForm.test.tsx",
        "start": 114,
        "end": 128,
        "startLoc": {
          "line": 114,
          "column": 5,
          "position": 922
        },
        "endLoc": {
          "line": 128,
          "column": 26,
          "position": 1026
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\form\\__tests__\\useZodForm.test.tsx",
        "start": 32,
        "end": 46,
        "startLoc": {
          "line": 32,
          "column": 5,
          "position": 280
        },
        "endLoc": {
          "line": 46,
          "column": 22,
          "position": 384
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ", () => {\n    const { result } = renderHook(() => useBaseDialog());\n\n    act(() => {\n      result.current.open();\n    });\n\n    expect(result.current.isOpen).toBe(true);\n\n    act",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\base\\__tests__\\useBaseDialog.test.tsx",
        "start": 23,
        "end": 32,
        "startLoc": {
          "line": 23,
          "column": 22,
          "position": 224
        },
        "endLoc": {
          "line": 32,
          "column": 4,
          "position": 302
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\base\\__tests__\\useBaseDialog.test.tsx",
        "start": 13,
        "end": 21,
        "startLoc": {
          "line": 13,
          "column": 21,
          "position": 138
        },
        "endLoc": {
          "line": 21,
          "column": 2,
          "position": 215
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "));\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.data).toEqual(mockTank",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 119,
        "end": 127,
        "startLoc": {
          "line": 119,
          "column": 4,
          "position": 891
        },
        "endLoc": {
          "line": 127,
          "column": 9,
          "position": 959
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 514
        },
        "endLoc": {
          "line": 84,
          "column": 10,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(\"1\"));\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.data).toEqual(mockLevelChanges",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 173,
        "end": 181,
        "startLoc": {
          "line": 173,
          "column": 20,
          "position": 1315
        },
        "endLoc": {
          "line": 181,
          "column": 17,
          "position": 1385
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 119,
        "end": 84,
        "startLoc": {
          "line": 119,
          "column": 8,
          "position": 889
        },
        "endLoc": {
          "line": 84,
          "column": 10,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "());\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.data).toEqual(mockFuelTypes",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 197,
        "end": 205,
        "startLoc": {
          "line": 197,
          "column": 13,
          "position": 1553
        },
        "endLoc": {
          "line": 205,
          "column": 14,
          "position": 1622
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 513
        },
        "endLoc": {
          "line": 84,
          "column": 10,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", async () => {\n      const mockTanks = [\n        {\n          id: \"1\",\n          name: \"Tank 1\",\n          fuel_type_id: \"ft1\",\n          capacity: 1000,\n          current_level: 700,\n          is_active: true,\n          created_at: \"2023-01-01\",\n          updated_at: \"2023-01-01\",\n        },\n        {\n          id: \"2\",\n          name: \"Tank 2\",\n          fuel_type_id: \"ft2\",\n          capacity: 2000,\n          current_level: 1500,\n          is_active: true,\n          created_at: \"2023-01-02\",\n          updated_at: \"2023-01-02\",\n        },\n      ];\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 343,
        "end": 367,
        "startLoc": {
          "line": 343,
          "column": 59,
          "position": 2765
        },
        "endLoc": {
          "line": 367,
          "column": 6,
          "position": 2917
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 48,
        "end": 72,
        "startLoc": {
          "line": 48,
          "column": 34,
          "position": 311
        },
        "endLoc": {
          "line": 72,
          "column": 28,
          "position": 463
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "(\n          currentMonth === 0\n            ? new Date(new Date().getFullYear() - 1, 11, 1)\n            : new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1)\n        ),\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\summary\\FuelSuppliesSummary.tsx",
        "start": 135,
        "end": 140,
        "startLoc": {
          "line": 135,
          "column": 11,
          "position": 1041
        },
        "endLoc": {
          "line": 140,
          "column": 2,
          "position": 1119
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\summary\\FuelSuppliesSummary.tsx",
        "start": 130,
        "end": 135,
        "startLoc": {
          "line": 130,
          "column": 13,
          "position": 959
        },
        "endLoc": {
          "line": 135,
          "column": 3,
          "position": 1037
        }
      }
    },
    {
      "format": "typescript",
      "lines": 207,
      "fragment": "import { waitFor } from '@testing-library/react';\nimport { vi, describe, it, expect, beforeEach } from \"vitest\";\nimport {\n  useSalesQuery,\n  useSaleQuery,\n  useSalesMutations,\n} from \"../useSalesQuery\";\nimport { setupHookTest, setupMutationTest } from \"@/test/utils/test-setup\";\nimport * as salesService from \"../../services/sales\";\nimport { FuelTypeCode } from \"@/types\";\nimport { CreateSaleRequest, UpdateSaleRequest } from \"../../types\";\n\n// Mock the sales service\nvi.mock(\"../../services/sales\", () => ({\n  fetchSales: vi.fn(),\n  fetchSale: vi.fn(),\n  createSale: vi.fn(),\n  updateSale: vi.fn(),\n  deleteSale: vi.fn(),\n  exportSales: vi.fn(),\n}));\n\n// Mock toast\nvi.mock(\"sonner\", () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn(),\n  },\n}));\n\ndescribe(\"useSalesQuery\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it(\"should fetch sales data\", async () => {\n    const mockSales = [{ id: \"1\", amount: 100 }];\n\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSales);\n\n    const { result } = renderTestHook(() => useSalesQuery());\n\n    expect(result.current.isLoading).toBe(true);\n\n    await waitFor(() => {\n      expect(result.current.isSuccess).toBe(true);\n    });\n\n    expect(result.current.data).toEqual(mockSales);\n    expect(salesService.fetchSales).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should fetch sales data with filters\", async () => {\n    const mockSales = [{ id: \"1\", amount: 100 }];\n\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSales);\n\n    const filters = {\n      dateRange: { from: new Date(\"2023-01-01\") },\n      fuelType: \"diesel\" as FuelTypeCode,\n    };\n\n    const { result } = renderTestHook(() => useSalesQuery(filters));\n\n    await waitFor(() => {\n      expect(result.current.isSuccess).toBe(true);\n    });\n\n    expect(result.current.data).toEqual(mockSales);\n    expect(salesService.fetchSales).toHaveBeenCalledWith(filters);\n  });\n});\n\ndescribe(\"useSaleQuery\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it(\"should fetch a single sale by ID\", async () => {\n    const mockSale = { id: \"1\", amount: 100 };\n\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSale);\n\n    const { result } = renderTestHook(() => useSaleQuery(\"1\"));\n\n    await waitFor(() => {\n      expect(result.current.isSuccess).toBe(true);\n    });\n\n    expect(result.current.data).toEqual(mockSale);\n    expect(salesService.fetchSale).toHaveBeenCalledWith(\"1\");\n  });\n\n  it(\"should not fetch when ID is empty\", async () => {\n    // Use shared test utility\n    const { renderTestHook } = setupHookTest();\n\n    const { result } = renderTestHook(() => useSaleQuery(\"\"));\n\n    expect(result.current.isLoading).toBe(false);\n    expect(salesService.fetchSale).not.toHaveBeenCalled();\n  });\n});\n\ndescribe(\"useSalesMutations\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it(\"should create a sale\", async () => {\n    const mockSale = { id: \"1\", amount: 100 };\n\n    // Use shared mutation test utility\n    const { renderTestHook, mockMutate } = setupMutationTest();\n    mockMutate.mockResolvedValue(mockSale);\n\n    const { result } = renderTestHook(() => useSalesMutations());\n\n    const newSale: CreateSaleRequest = { \n      amount: 100, \n      quantityLiters: 10,\n      unitPrice: 10,\n      saleDate: new Date(\"2024-01-01\"),\n      fuelType: \"diesel\",\n      paymentMethod: \"cash\",\n      paymentStatus: \"completed\"\n    };\n    result.current.createSale.mutate(newSale);\n\n    await waitFor(() => {\n      expect(result.current.createSale.isSuccess).toBe(true);\n    });\n\n    expect(salesService.createSale).toHaveBeenCalledWith(newSale);\n  });\n\n  it(\"should update a sale\", async () => {\n    const mockSale = { id: \"1\", amount: 200 };\n\n    // Use shared mutation test utility\n    const { renderTestHook, mockMutate } = setupMutationTest();\n    mockMutate.mockResolvedValue(mockSale);\n\n    const { result } = renderTestHook(() => useSalesMutations());\n\n    const updateData: UpdateSaleRequest = { id: \"1\", amount: 200 };\n    result.current.updateSale.mutate({ id: \"1\", data: updateData });\n\n    await waitFor(() => {\n      expect(result.current.updateSale.isSuccess).toBe(true);\n    });\n\n    expect(salesService.updateSale).toHaveBeenCalledWith(\"1\", updateData);\n  });\n\n  it(\"should delete a sale\", async () => {\n    const mockResponse = { message: \"Sale deleted\" };\n\n    // Use shared mutation test utility\n    const { renderTestHook, mockMutate } = setupMutationTest();\n    mockMutate.mockResolvedValue(mockResponse);\n\n    const { result } = renderTestHook(() => useSalesMutations());\n\n    result.current.deleteSale.mutate(\"1\");\n\n    await waitFor(() => {\n      expect(result.current.deleteSale.isSuccess).toBe(true);\n    });\n\n    expect(salesService.deleteSale).toHaveBeenCalledWith(\"1\");\n  });\n\n  it(\"should invalidate queries after mutation success\", async () => {\n    // Use shared mutation test utility with queryClient access\n    const { queryClient, renderTestHook, mockMutate } = setupMutationTest();\n    const spyInvalidateQueries = vi.spyOn(queryClient, \"invalidateQueries\");\n\n    mockMutate.mockResolvedValue({ id: \"1\", amount: 100 });\n\n    const { result } = renderTestHook(() => useSalesMutations());\n\n    // Test create mutation invalidation\n    result.current.createSale.mutate({ \n      amount: 100,\n      quantityLiters: 10,\n      unitPrice: 10,\n      saleDate: new Date(\"2024-01-01\"),\n      fuelType: \"diesel\",\n      paymentMethod: \"cash\",\n      paymentStatus: \"completed\"\n    } satisfies CreateSaleRequest);\n\n    await waitFor(() => {\n      expect(result.current.createSale.isSuccess).toBe(true);\n    });\n\n    // Should invalidate sales queries\n    expect(spyInvalidateQueries).toHaveBeenCalledWith([\"sales\"]);\n  });\n});",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\__tests__\\useSalesQuery.test.ts",
        "start": 1,
        "end": 207,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 207,
          "column": 2,
          "position": 1893
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\__tests__\\useSalesQuery.test.ts",
        "start": 1,
        "end": 207,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 207,
          "column": 2,
          "position": 1893
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "import { useQuery } from \"@tanstack/react-query\";\nimport { fillingSystemsApi } from \"@/core/api\";\nimport { FillingSystem } from \"@/core/api\";\nimport { FormSelect } from \"@/core/components/ui/primitives/form-fields\";\nimport { Control, useWatch } from \"react-hook-form\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from \"@/core/components/ui/alert\";\nimport { AlertCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/core/components/ui/button\";\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\n\n// Define the form data structure for sales",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\form\\FillingSystemSelect.tsx",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 44,
          "position": 178
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\form\\FillingSystemSelect.tsx",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 7,
          "position": 177
        }
      }
    },
    {
      "format": "tsx",
      "lines": 63,
      "fragment": "interface FillingSystemSelectProps {\n  control: Control<SalesFormData>;\n  onChange?: (value: string) => void;\n  onSelect?: (systemId: string) => void;\n  value?: string;\n}\n\nexport function FillingSystemSelect({\n  control,\n  onChange,\n  onSelect,\n  value,\n}: FillingSystemSelectProps) {\n  const { t } = useTranslation();\n  const [retryCount, setRetryCount] = useState(0);\n\n  const {\n    data: response,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useQuery({\n    queryKey: [\"filling-systems\", retryCount],\n    queryFn: fillingSystemsApi.getFillingSystems,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    retry: 2,\n  });\n\n  // Extract the filling systems from the API response\n  const fillingSystems = React.useMemo(() => {\n    return (response?.data || []) as FillingSystem[];\n  }, [response?.data]);\n\n  // Log errors to console and show toast notification\n  useEffect(() => {\n    if (error) {\n      console.error(\"Error fetching filling systems:\", error);\n      toast.error(t(\"common.error\"), {\n        description: t(\"common.errorMessage\", { message: String(error) }),\n      });\n    }\n  }, [error, t]);\n\n  // Show notification for offline mode\n  useEffect(() => {\n    if (!navigator.onLine && fillingSystems.length > 0) {\n      toast.warning(t(\"common.warning\"), {\n        description: \"Using offline mode with sample filling systems data\",\n        duration: 5000,\n      });\n    }\n  }, [fillingSystems, t]);\n\n  // Handle retry when error occurs\n  const handleRetry = () => {\n    setRetryCount((prev) => prev + 1);\n  };\n\n  // Watch for field changes - must be called in every render path\n  const selectedValue = useWatch({\n    control,\n    name: \"filling_system_id\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\form\\FillingSystemSelect.tsx",
        "start": 28,
        "end": 90,
        "startLoc": {
          "line": 28,
          "column": 1,
          "position": 255
        },
        "endLoc": {
          "line": 90,
          "column": 20,
          "position": 765
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\form\\FillingSystemSelect.tsx",
        "start": 16,
        "end": 78,
        "startLoc": {
          "line": 16,
          "column": 1,
          "position": 191
        },
        "endLoc": {
          "line": 78,
          "column": 18,
          "position": 701
        }
      }
    },
    {
      "format": "tsx",
      "lines": 81,
      "fragment": ",\n  }) as string;\n\n  // Call callbacks when the value changes\n  useEffect(() => {\n    if (selectedValue && typeof selectedValue === 'string') {\n      if (onChange) onChange(selectedValue);\n      if (onSelect) onSelect(selectedValue);\n    }\n  }, [selectedValue, onChange, onSelect]);\n\n  // Create options array for the FormSelect component (outside conditions)\n  const options = fillingSystems.map((system: FillingSystem) => {\n    // Construct a label based on available properties\n    const name = system.name || `System ${system.id.substring(0, 8)}`;\n    const status = system.status ? ` (${system.status})` : \"\";\n\n    return {\n      value: system.id,\n      label: `${name}${status}`,\n    };\n  });\n\n  // Determine what content to render\n  let content;\n\n  if (isLoading) {\n    content = (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span className=\"text-sm\">\n            {t(\"common.loading\", \"Loading filling systems...\")}\n          </span>\n        </div>\n      </div>\n    );\n  } else if (isError && fillingSystems.length === 0) {\n    content = (\n      <div className=\"space-y-4\">\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {t(\n              \"fillingSystems.errorFetching\",\n              \"Failed to load filling systems\"\n            )}\n          </AlertDescription>\n        </Alert>\n        <Button variant=\"outline\" size=\"sm\" onClick={handleRetry}>\n          {t(\"common.retry\", \"Retry\")}\n        </Button>\n      </div>\n    );\n  } else if (options.length === 0) {\n    content = (\n      <div className=\"space-y-4\">\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {t(\n              \"fillingSystems.noSystems\",\n              \"No filling systems found. Please add filling systems before creating a sale.\"\n            )}\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  // Create a minimal form object for FormSelect\n  const formObject = {\n    control,\n  } as UseFormReturn<SalesFormData>;\n\n  // Always render the FormSelect component with options\n  return (\n    <div className=\"space-y-4\">\n      {content}\n      <FormSelect\n        name=\"filling_system_id",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\form\\FillingSystemSelect.tsx",
        "start": 90,
        "end": 170,
        "startLoc": {
          "line": 90,
          "column": 20,
          "position": 766
        },
        "endLoc": {
          "line": 170,
          "column": 18,
          "position": 1380
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\form\\FillingSystemSelect.tsx",
        "start": 78,
        "end": 158,
        "startLoc": {
          "line": 78,
          "column": 18,
          "position": 702
        },
        "endLoc": {
          "line": 158,
          "column": 16,
          "position": 1316
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "const mockEmployees = [\n        {\n          id: \"1\",\n          first_name: \"John\",\n          last_name: \"Doe\",\n          email: \"john@example.com\",\n          phone: \"123-456-7890\",\n          position: \"Manager\",\n          department: \"Operations\",\n          hire_date: \"2023-01-01\",\n          salary: 75000,\n          status: \"active\",\n          notes: \"\",\n          created_at: \"2023-01-01\",\n          updated_at: \"2023-01-01\",\n        },\n      ]",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\hooks\\__tests__\\useEmployees.test.ts",
        "start": 88,
        "end": 104,
        "startLoc": {
          "line": 88,
          "column": 7,
          "position": 676
        },
        "endLoc": {
          "line": 104,
          "column": 2,
          "position": 783
        }
      },
      "secondFile": {
        "name": "src\\features\\employees\\hooks\\__tests__\\useEmployees.test.ts",
        "start": 37,
        "end": 53,
        "startLoc": {
          "line": 37,
          "column": 7,
          "position": 286
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 393
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ");\n\n      const { result } = renderTestHook(() => useEmployees());\n\n      await act(async () => {\n        result.current.createEmployee.mutate(newEmployee);\n      });\n\n      await waitFor(() => {\n        expect(result.current.createEmployee.isSuccess).toBe(true);\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\hooks\\__tests__\\useEmployees.test.ts",
        "start": 315,
        "end": 325,
        "startLoc": {
          "line": 315,
          "column": 2,
          "position": 2499
        },
        "endLoc": {
          "line": 325,
          "column": 2,
          "position": 2592
        }
      },
      "secondFile": {
        "name": "src\\features\\employees\\hooks\\__tests__\\useEmployees.test.ts",
        "start": 211,
        "end": 221,
        "startLoc": {
          "line": 211,
          "column": 16,
          "position": 1659
        },
        "endLoc": {
          "line": 221,
          "column": 7,
          "position": 1752
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "());\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.data).toEqual(mockDashboardData",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 17,
          "position": 524
        },
        "endLoc": {
          "line": 77,
          "column": 18,
          "position": 593
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 513
        },
        "endLoc": {
          "line": 84,
          "column": 10,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "[\n        {\n          tankId: \"1\",\n          tankName: \"Tank 1\",\n          fuelType: \"Diesel\",\n          currentLevel: 75,\n          capacity: 100,\n          percentFull: 75,\n        },\n        {\n          tankId: \"2\",\n          tankName: \"Tank 2\",\n          fuelType: \"Petrol\",\n          currentLevel: 45,\n          capacity: 100,\n          percentFull: 45,\n        },\n      ];",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 97,
        "end": 114,
        "startLoc": {
          "line": 97,
          "column": 2,
          "position": 786
        },
        "endLoc": {
          "line": 114,
          "column": 2,
          "position": 888
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 41,
        "end": 58,
        "startLoc": {
          "line": 41,
          "column": 2,
          "position": 296
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 398
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "());\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.data).toEqual(mockFuelLevels",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 120,
        "end": 128,
        "startLoc": {
          "line": 120,
          "column": 14,
          "position": 942
        },
        "endLoc": {
          "line": 128,
          "column": 15,
          "position": 1011
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\__tests__\\useTanks.test.ts",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 513
        },
        "endLoc": {
          "line": 84,
          "column": 10,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": ", async () => {\n      const mockDashboardData = {\n        summary: {\n          totalSales: 125000,\n          totalExpenses: 75000,\n          profit: 50000,\n          salesChange: 15,\n        },\n        fuelLevels: [\n          {\n            tankId: \"1\",\n            tankName: \"Tank 1\",\n            fuelType: \"Diesel\",\n            currentLevel: 75,\n            capacity: 100,\n            percentFull: 75,\n          },\n          {\n            tankId: \"2\",\n            tankName: \"Tank 2\",\n            fuelType: \"Petrol\",\n            currentLevel: 45,\n            capacity: 100,\n            percentFull: 45,\n          },\n        ],\n        recentTransactions: [\n          { id: \"1\", amount: 1200, date: \"2023-01-01\", type: \"sale\" },\n          { id: \"2\", amount: 800, date: \"2023-01-02\", type: \"expense\" },\n        ],\n      };\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 225,
        "end": 257,
        "startLoc": {
          "line": 225,
          "column": 64,
          "position": 1941
        },
        "endLoc": {
          "line": 257,
          "column": 6,
          "position": 2181
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 33,
        "end": 65,
        "startLoc": {
          "line": 33,
          "column": 43,
          "position": 234
        },
        "endLoc": {
          "line": 65,
          "column": 27,
          "position": 474
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "const mockFuelLevels = [\n        {\n          tankId: \"1\",\n          tankName: \"Tank 1\",\n          fuelType: \"Diesel\",\n          currentLevel: 75,\n          capacity: 100,\n          percentFull: 75,\n        },\n        {\n          tankId: \"2\",\n          tankName: \"Tank 2\",\n          fuelType: \"Petrol\",\n          currentLevel: 45,\n          capacity: 100,\n          percentFull: 45,\n        },\n      ];\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 257,
        "end": 276,
        "startLoc": {
          "line": 257,
          "column": 7,
          "position": 2181
        },
        "endLoc": {
          "line": 276,
          "column": 6,
          "position": 2293
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 97,
        "end": 116,
        "startLoc": {
          "line": 97,
          "column": 7,
          "position": 780
        },
        "endLoc": {
          "line": 116,
          "column": 27,
          "position": 892
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "const mockSalesSummary = {\n        totalSales: 125000,\n        averagePerDay: 4166.67,\n        topSellingProducts: [\n          { productId: \"1\", name: \"Diesel\", quantity: 5000, revenue: 75000 },\n          { productId: \"2\", name: \"Petrol\", quantity: 3500, revenue: 50000 },\n        ],\n        salesByDay: [\n          { date: \"2023-01-01\", amount: 4200 },\n          { date: \"2023-01-02\", amount: 3800 },\n        ],\n      };\n\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 276,
        "end": 289,
        "startLoc": {
          "line": 276,
          "column": 7,
          "position": 2293
        },
        "endLoc": {
          "line": 289,
          "column": 6,
          "position": 2433
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 135,
        "end": 148,
        "startLoc": {
          "line": 135,
          "column": 7,
          "position": 1067
        },
        "endLoc": {
          "line": 148,
          "column": 27,
          "position": 1207
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "const mockFinancialData = {\n        totalRevenue: 500000,\n        totalExpenses: 320000,\n        netProfit: 180000,\n        profitMargin: 36,\n        revenueByCategory: [\n          { category: \"Diesel\", amount: 300000 },\n          { category: \"Petrol\", amount: 200000 },\n        ],\n        expensesByCategory: [\n          { category: \"Supplies\", amount: 250000 },\n          { category: \"Salaries\", amount: 50000 },\n          { category: \"Operations\", amount: 20000 },\n        ],\n      };\n\n      // Use shared test utility, but we need to mock multiple API calls",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 289,
        "end": 305,
        "startLoc": {
          "line": 289,
          "column": 7,
          "position": 2433
        },
        "endLoc": {
          "line": 305,
          "column": 67,
          "position": 2580
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\hooks\\__tests__\\useDashboard.test.ts",
        "start": 193,
        "end": 209,
        "startLoc": {
          "line": 193,
          "column": 7,
          "position": 1648
        },
        "endLoc": {
          "line": 209,
          "column": 27,
          "position": 1795
        }
      }
    },
    {
      "format": "javascript",
      "lines": 42,
      "fragment": ")}\n            aria-label={t(\"common.changeLanguage\")}\n          >\n            {collapsed ? (\n              <span className=\"font-medium\">\n                {currentLanguage === \"en\" ? \"HY\" : \"EN\"}\n              </span>\n            ) : (\n              <span className=\"font-medium flex items-center gap-2\">\n                <Globe className=\"h-4 w-4\" />\n                {currentLanguage === \"en\" ? \"English\" : \"Հայերեն\"}\n              </span>\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          {languages.map((lang) => (\n            <DropdownMenuItem\n              key={lang.code}\n              onClick={() => changeLanguage(lang.code)}\n              className={cn(\n                \"flex items-center gap-2 cursor-pointer\",\n                currentLanguage === lang.code && \"font-medium\"\n              )}\n            >\n              {currentLanguage === lang.code && <Check className=\"h-4 w-4\" />}\n              <span className={currentLanguage === lang.code ? \"ml-0\" : \"ml-6\"}>\n                {lang.nativeLabel}\n              </span>\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n\n  // Default variant - simple language toggler (no dropdown)\n  return (\n    <Button\n      variant=\"outline\"\n      size={size === \"default\" ? \"sm\" : size}\n      onClick={(",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\language-switcher.tsx",
        "start": 88,
        "end": 129,
        "startLoc": {
          "line": 88,
          "column": 13,
          "position": 667
        },
        "endLoc": {
          "line": 129,
          "column": 2,
          "position": 986
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\language-switcher.tsx",
        "start": 49,
        "end": 84,
        "startLoc": {
          "line": 49,
          "column": 11,
          "position": 393
        },
        "endLoc": {
          "line": 84,
          "column": 3,
          "position": 652
        }
      }
    },
    {
      "format": "tsx",
      "lines": 24,
      "fragment": "</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          {languages.map((lang) => (\n            <DropdownMenuItem\n              key={lang.code}\n              onClick={() => changeLanguage(lang.code)}\n              className={cn(\n                \"flex items-center gap-2 cursor-pointer\",\n                currentLanguage === lang.code && \"font-medium\"\n              )}\n            >\n              {currentLanguage === lang.code && <Check className=\"h-4 w-4\" />}\n              <span className={currentLanguage === lang.code ? \"ml-0\" : \"ml-6\"}>\n                {lang.nativeLabel}\n              </span>\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n\n  // Default variant - simple language toggler (no dropdown)",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\language-switcher.tsx",
        "start": 101,
        "end": 124,
        "startLoc": {
          "line": 101,
          "column": 11,
          "position": 779
        },
        "endLoc": {
          "line": 124,
          "column": 59,
          "position": 950
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\language-switcher.tsx",
        "start": 53,
        "end": 76,
        "startLoc": {
          "line": 53,
          "column": 11,
          "position": 420
        },
        "endLoc": {
          "line": 76,
          "column": 62,
          "position": 591
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "<TFieldValues>) {\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && <FormLabel>{label}</FormLabel>}\n          <Select",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 131,
        "end": 139,
        "startLoc": {
          "line": 131,
          "column": 16,
          "position": 903
        },
        "endLoc": {
          "line": 139,
          "column": 7,
          "position": 981
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 75,
        "end": 83,
        "startLoc": {
          "line": 75,
          "column": 15,
          "position": 501
        },
        "endLoc": {
          "line": 83,
          "column": 12,
          "position": 579
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "<TFieldValues>) {\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && <FormLabel>{label}</FormLabel>}\n          <FormControl>\n            <Textarea",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 232,
        "end": 241,
        "startLoc": {
          "line": 232,
          "column": 18,
          "position": 1570
        },
        "endLoc": {
          "line": 241,
          "column": 9,
          "position": 1653
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 75,
        "end": 84,
        "startLoc": {
          "line": 75,
          "column": 15,
          "position": 501
        },
        "endLoc": {
          "line": 84,
          "column": 6,
          "position": 584
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "<TFieldValues>) {\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          {label && <FormLabel>{label}</FormLabel>}\n          <FormControl>\n            <CurrencyInput",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 367,
        "end": 376,
        "startLoc": {
          "line": 367,
          "column": 23,
          "position": 2510
        },
        "endLoc": {
          "line": 376,
          "column": 14,
          "position": 2593
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\form-fields.tsx",
        "start": 75,
        "end": 84,
        "startLoc": {
          "line": 75,
          "column": 15,
          "position": 501
        },
        "endLoc": {
          "line": 84,
          "column": 6,
          "position": 584
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "import * as React from \"react\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { cn } from \"@/shared/utils\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { Calendar } from \"@/core/components/ui/primitives/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/core/components/ui/primitives/popover\";\n\nexport interface DatePickerProps",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\datepicker.tsx",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 16,
          "position": 110
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\daterangepicker.tsx",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 21,
          "position": 110
        }
      }
    },
    {
      "format": "javascript",
      "lines": 81,
      "fragment": ")}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n));\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n));\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName;\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n));\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\context-menu.tsx",
        "start": 65,
        "end": 145,
        "startLoc": {
          "line": 65,
          "column": 7,
          "position": 457
        },
        "endLoc": {
          "line": 145,
          "column": 52,
          "position": 1012
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\menubar.tsx",
        "start": 100,
        "end": 180,
        "startLoc": {
          "line": 100,
          "column": 9,
          "position": 692
        },
        "endLoc": {
          "line": 180,
          "column": 36,
          "position": 1248
        }
      }
    },
    {
      "format": "javascript",
      "lines": 128,
      "fragment": "={ref} className={className} {...props} />;\n});\nCardHeaderPrimitive.displayName = \"CardHeaderPrimitive\";\n\nexport interface CardFooterPrimitiveProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Forward ref to the footer div element\n   */\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\n/**\n * Base primitive Card Footer component\n */\nexport const CardFooterPrimitive = React.forwardRef<\n  HTMLDivElement,\n  CardFooterPrimitiveProps\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={className} {...props} />;\n});\nCardFooterPrimitive.displayName = \"CardFooterPrimitive\";\n\nexport interface CardTitlePrimitiveProps\n  extends React.HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Forward ref to the title heading element\n   */\n  ref?: React.ForwardedRef<HTMLHeadingElement>;\n  /**\n   * HTML heading level (h1-h6)\n   * @default 'h3'\n   */\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n}\n\n/**\n * Base primitive Card Title component\n */\nexport const CardTitlePrimitive = React.forwardRef<\n  HTMLHeadingElement,\n  CardTitlePrimitiveProps\n>(({ className, as: Comp = \"h3\", ...props }, ref) => {\n  return <Comp ref={ref} className={className} {...props} />;\n});\nCardTitlePrimitive.displayName = \"CardTitlePrimitive\";\n\nexport interface CardDescriptionPrimitiveProps\n  extends React.HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * Forward ref to the description paragraph element\n   */\n  ref?: React.ForwardedRef<HTMLParagraphElement>;\n}\n\n/**\n * Base primitive Card Description component\n */\nexport const CardDescriptionPrimitive = React.forwardRef<\n  HTMLParagraphElement,\n  CardDescriptionPrimitiveProps\n>(({ className, ...props }, ref) => {\n  return <p ref={ref} className={className} {...props} />;\n});\nCardDescriptionPrimitive.displayName = \"CardDescriptionPrimitive\";\n\nexport interface CardContentPrimitiveProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Forward ref to the content div element\n   */\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\n/**\n * Base primitive Card Content component\n */\nexport const CardContentPrimitive = React.forwardRef<\n  HTMLDivElement,\n  CardContentPrimitiveProps\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={className} {...props} />;\n});\nCardContentPrimitive.displayName = \"CardContentPrimitive\";\n\nexport interface CardMediaPrimitiveProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Forward ref to the media div element\n   */\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\n/**\n * Base primitive Card Media component for images and media content\n */\nexport const CardMediaPrimitive = React.forwardRef<\n  HTMLDivElement,\n  CardMediaPrimitiveProps\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={className} {...props} />;\n});\nCardMediaPrimitive.displayName = \"CardMediaPrimitive\";\n\nexport interface CardActionsPrimitiveProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Forward ref to the actions div element\n   */\n  ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\n/**\n * Base primitive Card Actions component for action buttons\n */\nexport const CardActionsPrimitive = React.forwardRef<\n  HTMLDivElement,\n  CardActionsPrimitiveProps\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={className} {...props} />;\n});\nCardActionsPrimitive.displayName = \"CardActionsPrimitive\";\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\card.tsx",
        "start": 39,
        "end": 166,
        "startLoc": {
          "line": 39,
          "column": 4,
          "position": 234
        },
        "endLoc": {
          "line": 166,
          "column": 3,
          "position": 1083
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\card.tsx",
        "start": 20,
        "end": 139,
        "startLoc": {
          "line": 20,
          "column": 4,
          "position": 114
        },
        "endLoc": {
          "line": 139,
          "column": 10,
          "position": 883
        }
      }
    },
    {
      "format": "tsx",
      "lines": 50,
      "fragment": ";\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/60  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-gray-50 p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\alert-dialog.tsx",
        "start": 11,
        "end": 60,
        "startLoc": {
          "line": 11,
          "column": 7,
          "position": 87
        },
        "endLoc": {
          "line": 60,
          "column": 18,
          "position": 376
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\styled\\dialog.tsx",
        "start": 121,
        "end": 170,
        "startLoc": {
          "line": 121,
          "column": 12,
          "position": 837
        },
        "endLoc": {
          "line": 170,
          "column": 17,
          "position": 1126
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": ";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\alert-dialog.tsx",
        "start": 72,
        "end": 99,
        "startLoc": {
          "line": 72,
          "column": 20,
          "position": 439
        },
        "endLoc": {
          "line": 99,
          "column": 18,
          "position": 643
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\styled\\dialog.tsx",
        "start": 168,
        "end": 195,
        "startLoc": {
          "line": 168,
          "column": 20,
          "position": 1121
        },
        "endLoc": {
          "line": 195,
          "column": 18,
          "position": 1325
        }
      }
    },
    {
      "format": "tsx",
      "lines": 32,
      "fragment": ";\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\primitives\\alert-dialog.tsx",
        "start": 97,
        "end": 128,
        "startLoc": {
          "line": 97,
          "column": 12,
          "position": 638
        },
        "endLoc": {
          "line": 128,
          "column": 12,
          "position": 859
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\styled\\dialog.tsx",
        "start": 207,
        "end": 240,
        "startLoc": {
          "line": 207,
          "column": 20,
          "position": 1388
        },
        "endLoc": {
          "line": 240,
          "column": 7,
          "position": 1596
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\r\n              >\r\n                <div className=\"flex flex-col\">\r\n                  <span>{option.label}</span>\r\n                  {option.description && (\r\n                    <span className=\"text-sm text-gray-500\">{option.description}</span>\r\n                  )}\r\n                </div>\r\n              </Label",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\enhanced\\form-builder.tsx",
        "start": 239,
        "end": 247,
        "startLoc": {
          "line": 239,
          "column": 2,
          "position": 2109
        },
        "endLoc": {
          "line": 247,
          "column": 6,
          "position": 2183
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\enhanced\\form-builder.tsx",
        "start": 205,
        "end": 213,
        "startLoc": {
          "line": 205,
          "column": 2,
          "position": 1841
        },
        "endLoc": {
          "line": 213,
          "column": 11,
          "position": 1915
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<Label\r\n                htmlFor={`${field.id}-${option.value}`}\r\n                className={cn(\r\n                  'cursor-pointer',\r\n                  (disabled || option.disabled) && 'opacity-50 cursor-not-allowed'\r\n                )}\r\n              >\r\n                <div className=\"flex flex-col\">\r\n                  <span>{option.label}</span>\r\n                  {option.description && (\r\n                    <span className=\"text-sm text-gray-500\">{option.description}</span>\r\n                  )}\r\n                </div>\r\n              </Label>\r\n            </div>\r\n          )) ||",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\enhanced\\form-builder.tsx",
        "start": 271,
        "end": 286,
        "startLoc": {
          "line": 271,
          "column": 15,
          "position": 2457
        },
        "endLoc": {
          "line": 286,
          "column": 3,
          "position": 2589
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\enhanced\\form-builder.tsx",
        "start": 234,
        "end": 249,
        "startLoc": {
          "line": 234,
          "column": 15,
          "position": 2071
        },
        "endLoc": {
          "line": 249,
          "column": 2,
          "position": 2196
        }
      }
    },
    {
      "format": "javascript",
      "lines": 33,
      "fragment": ")}\r\n                disabled={!table.getCanPreviousPage()}\r\n              >\r\n                <ChevronsLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => table.previousPage()}\r\n                disabled={!table.getCanPreviousPage()}\r\n              >\r\n                <ChevronLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n\r\n              <div className=\"flex items-center gap-1\">\r\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">Page</span>\r\n                <Badge variant=\"outline\" className=\"px-2 py-1\">\r\n                  {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\r\n                </Badge>\r\n              </div>\r\n\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => table.nextPage()}\r\n                disabled={!table.getCanNextPage()}\r\n              >\r\n                <ChevronRight className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => table.setPageIndex",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\enhanced\\data-table.tsx",
        "start": 385,
        "end": 417,
        "startLoc": {
          "line": 385,
          "column": 2,
          "position": 3435
        },
        "endLoc": {
          "line": 417,
          "column": 13,
          "position": 3712
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\data-table.tsx",
        "start": 653,
        "end": 690,
        "startLoc": {
          "line": 653,
          "column": 2,
          "position": 5340
        },
        "endLoc": {
          "line": 690,
          "column": 9,
          "position": 5581
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": "}\r\n            >\r\n              <Widget\r\n                widget={widget}\r\n                onUpdate={(updates) => handleWidgetUpdate(widget.id, updates)}\r\n                onRefresh={() => onWidgetRefresh?.(widget.id)}\r\n                onExport={() => onWidgetExport?.(widget.id)}\r\n                onConfigure={() => onWidgetConfigure?.(widget.id)}\r\n                editable={editable}\r\n              />\r\n            </Reorder.Item>\r\n          ))}\r\n        </AnimatePresence>\r\n      </Reorder.Group>\r\n    );\r\n  }\r\n\r\n  // Static list mode\r\n  return (\r\n    <div className={cn",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\enhanced\\dashboard-widgets.tsx",
        "start": 554,
        "end": 573,
        "startLoc": {
          "line": 554,
          "column": 2,
          "position": 4781
        },
        "endLoc": {
          "line": 573,
          "column": 3,
          "position": 4927
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\enhanced\\dashboard-widgets.tsx",
        "start": 521,
        "end": 540,
        "startLoc": {
          "line": 521,
          "column": 3,
          "position": 4516
        },
        "endLoc": {
          "line": 540,
          "column": 15,
          "position": 4665
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ")}>\r\n      <AnimatePresence mode=\"popLayout\">\r\n        {visibleWidgets.map((widget) => (\r\n          <Widget\r\n            key={widget.id}\r\n            widget={widget}\r\n            onUpdate={(updates) => handleWidgetUpdate(widget.id, updates)}\r\n            onRefresh={() => onWidgetRefresh?.(widget.id)}\r\n            onExport={() => onWidgetExport?.(widget.id)}\r\n            onConfigure={() => onWidgetConfigure?.(widget.id)}\r\n            editable={editable}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\enhanced\\dashboard-widgets.tsx",
        "start": 573,
        "end": 583,
        "startLoc": {
          "line": 573,
          "column": 11,
          "position": 4932
        },
        "endLoc": {
          "line": 583,
          "column": 2,
          "position": 5056
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\enhanced\\dashboard-widgets.tsx",
        "start": 517,
        "end": 527,
        "startLoc": {
          "line": 517,
          "column": 7,
          "position": 4474
        },
        "endLoc": {
          "line": 527,
          "column": 2,
          "position": 4598
        }
      }
    },
    {
      "format": "javascript",
      "lines": 100,
      "fragment": ",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-gray-50 p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\sheet.tsx",
        "start": 22,
        "end": 121,
        "startLoc": {
          "line": 22,
          "column": 154,
          "position": 179
        },
        "endLoc": {
          "line": 121,
          "column": 2,
          "position": 817
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\sheet.tsx",
        "start": 23,
        "end": 131,
        "startLoc": {
          "line": 23,
          "column": 155,
          "position": 192
        },
        "endLoc": {
          "line": 131,
          "column": 2,
          "position": 868
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": ";\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/60  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-gray-50 p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\sheet.tsx",
        "start": 14,
        "end": 41,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 112
        },
        "endLoc": {
          "line": 41,
          "column": 132,
          "position": 270
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\sheet.tsx",
        "start": 15,
        "end": 42,
        "startLoc": {
          "line": 15,
          "column": 12,
          "position": 125
        },
        "endLoc": {
          "line": 42,
          "column": 131,
          "position": 283
        }
      }
    },
    {
      "format": "tsx",
      "lines": 60,
      "fragment": "</SheetPrimitive.Content>\n  </SheetPortal>\n));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetClose",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\sheet.tsx",
        "start": 70,
        "end": 129,
        "startLoc": {
          "line": 70,
          "column": 5,
          "position": 483
        },
        "endLoc": {
          "line": 129,
          "column": 11,
          "position": 853
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\sheet.tsx",
        "start": 79,
        "end": 139,
        "startLoc": {
          "line": 79,
          "column": 7,
          "position": 532
        },
        "endLoc": {
          "line": 139,
          "column": 12,
          "position": 904
        }
      }
    },
    {
      "format": "javascript",
      "lines": 141,
      "fragment": "}\n    />\n  );\n}\n\nexport function PasswordField({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type=\"password\"\n      className={className}\n      fieldClassName={fieldClassName}\n      labelClassName={labelClassName}\n      required={required}\n    />\n  );\n}\n\nexport function EmailField({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type=\"email\"\n      className={className}\n      fieldClassName={fieldClassName}\n      labelClassName={labelClassName}\n      required={required}\n    />\n  );\n}\n\n// Preserve original exports but reduce code duplication\nexport function NumberField({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type=\"number\"\n      className={className}\n      fieldClassName={fieldClassName}\n      labelClassName={labelClassName}\n      required={required}\n    />\n  );\n}\n\n// Basic text input field\nexport interface FormInputProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> extends FormItemProps {\n  name: TName;\n  form: UseFormReturn<TFieldValues>;\n  type?: string;\n  placeholder?: string;\n}\n\nexport function FormInput<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  form,\n  label,\n  description,\n  required,\n  type = \"text\",\n  placeholder,\n  className,\n}: FormInputProps<TFieldValues, TName>) {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 146,
        "end": 286,
        "startLoc": {
          "line": 146,
          "column": 9,
          "position": 952
        },
        "endLoc": {
          "line": 286,
          "column": 6,
          "position": 1756
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 104,
        "end": 206,
        "startLoc": {
          "line": 104,
          "column": 2,
          "position": 722
        },
        "endLoc": {
          "line": 206,
          "column": 5,
          "position": 1271
        }
      }
    },
    {
      "format": "javascript",
      "lines": 121,
      "fragment": "}\n              />\n            </div>\n            {switchLabel && (\n              <span className=\"text-sm font-medium\">{switchLabel}</span>\n            )}\n          </div>\n        )}\n      />\n    </LegacyFormItem>\n  );\n}\n\n// Re-export the FormProvider for convenience\nexport { FormProvider };\n\n// Simplified versions for any form types\nexport interface SimpleFormCurrencyInputProps extends FormItemProps {\n  name: string;\n  form: UseFormReturn<FieldValues>;\n  placeholder?: string;\n  symbol?: string;\n}\n\nexport function SimpleFormCurrencyInput({\n  name,\n  form,\n  label,\n  description,\n  required,\n  placeholder,\n  symbol = \"$\",\n  className,\n}: SimpleFormCurrencyInputProps) {\n  const {\n    control,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <Controller\n        name={name}\n        control={control}\n        render={({ field }) => (\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n              <span className=\"text-gray-500\">{symbol}</span>\n            </div>\n            <input\n              id={name}\n              type=\"number\"\n              placeholder={placeholder}\n              className=\"w-full pl-7 pr-3 py-2 border rounded-md\"\n              value={field.value ?? \"\"}\n              onChange={(e) => {\n                const value =\n                  e.target.value === \"\"\n                    ? undefined\n                    : parseFloat(e.target.value);\n                field.onChange(value);\n              }}\n              onBlur={field.onBlur}\n            />\n          </div>\n        )}\n      />\n    </LegacyFormItem>\n  );\n}\n\nexport interface SimpleFormSelectProps extends FormItemProps {\n  name: string;\n  form: UseFormReturn<FieldValues>;\n  options: { value: string; label: string }[];\n  placeholder?: string;\n}\n\nexport function SimpleFormSelect({\n  name,\n  form,\n  label,\n  description,\n  required,\n  options,\n  placeholder,\n  className,\n}: SimpleFormSelectProps) {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <select\n        id={name}\n        className=\"w-full px-3 py-2 border rounded-md\"\n        {...register(name)}\n      >\n        {placeholder && (\n          <option value=\"\" disabled>\n            {placeholder}\n          </option>\n        )}\n        {options.map((option) => (\n          <option key={option",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 657,
        "end": 777,
        "startLoc": {
          "line": 657,
          "column": 2,
          "position": 4332
        },
        "endLoc": {
          "line": 777,
          "column": 7,
          "position": 5070
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 451,
        "end": 571,
        "startLoc": {
          "line": 451,
          "column": 10,
          "position": 2907
        },
        "endLoc": {
          "line": 571,
          "column": 3,
          "position": 3707
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 151,
        "end": 176,
        "startLoc": {
          "line": 151,
          "column": 14,
          "position": 968
        },
        "endLoc": {
          "line": 176,
          "column": 5,
          "position": 1108
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 118,
        "end": 143,
        "startLoc": {
          "line": 118,
          "column": 10,
          "position": 790
        },
        "endLoc": {
          "line": 143,
          "column": 10,
          "position": 930
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type=\"email",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 185,
        "end": 210,
        "startLoc": {
          "line": 185,
          "column": 11,
          "position": 1152
        },
        "endLoc": {
          "line": 210,
          "column": 6,
          "position": 1295
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 118,
        "end": 176,
        "startLoc": {
          "line": 118,
          "column": 10,
          "position": 790
        },
        "endLoc": {
          "line": 176,
          "column": 9,
          "position": 1111
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "({\n  name,\n  label,\n  placeholder,\n  description,\n  className,\n  fieldClassName,\n  labelClassName,\n  required,\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  className?: string;\n  fieldClassName?: string;\n  labelClassName?: string;\n  required?: boolean;\n}) {\n  return (\n    <BaseFormField\n      name={name}\n      label={label}\n      placeholder={placeholder}\n      description={description}\n      type=\"number",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 220,
        "end": 245,
        "startLoc": {
          "line": 220,
          "column": 12,
          "position": 1338
        },
        "endLoc": {
          "line": 245,
          "column": 7,
          "position": 1481
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 118,
        "end": 176,
        "startLoc": {
          "line": 118,
          "column": 10,
          "position": 790
        },
        "endLoc": {
          "line": 176,
          "column": 9,
          "position": 1111
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<TFieldValues, TName>) {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <select",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 326,
        "end": 341,
        "startLoc": {
          "line": 326,
          "column": 16,
          "position": 2014
        },
        "endLoc": {
          "line": 341,
          "column": 7,
          "position": 2120
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 277,
        "end": 292,
        "startLoc": {
          "line": 277,
          "column": 15,
          "position": 1681
        },
        "endLoc": {
          "line": 292,
          "column": 6,
          "position": 1787
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<TFieldValues, TName>) {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <textarea",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 438,
        "end": 453,
        "startLoc": {
          "line": 438,
          "column": 18,
          "position": 2807
        },
        "endLoc": {
          "line": 453,
          "column": 9,
          "position": 2913
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 277,
        "end": 292,
        "startLoc": {
          "line": 277,
          "column": 15,
          "position": 1681
        },
        "endLoc": {
          "line": 292,
          "column": 6,
          "position": 1787
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "<TFieldValues, TName>) {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 555,
        "end": 570,
        "startLoc": {
          "line": 555,
          "column": 20,
          "position": 3596
        },
        "endLoc": {
          "line": 570,
          "column": 2,
          "position": 3701
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 277,
        "end": 292,
        "startLoc": {
          "line": 277,
          "column": 15,
          "position": 1681
        },
        "endLoc": {
          "line": 292,
          "column": 2,
          "position": 1786
        }
      }
    },
    {
      "format": "tsx",
      "lines": 46,
      "fragment": ") {\n  const {\n    control,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <Controller\n        name={name}\n        control={control}\n        render={({ field }) => (\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n              <span className=\"text-gray-500\">{symbol}</span>\n            </div>\n            <input\n              id={name}\n              type=\"number\"\n              placeholder={placeholder}\n              className=\"w-full pl-7 pr-3 py-2 border rounded-md\"\n              value={field.value ?? \"\"}\n              onChange={(e) => {\n                const value =\n                  e.target.value === \"\"\n                    ? undefined\n                    : parseFloat(e.target.value);\n                field.onChange(value);\n              }}\n              onBlur={field.onBlur}\n            />\n          </div>\n        )}\n      />\n    </LegacyFormItem>\n  );\n}\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 690,
        "end": 735,
        "startLoc": {
          "line": 690,
          "column": 29,
          "position": 4505
        },
        "endLoc": {
          "line": 735,
          "column": 7,
          "position": 4783
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 487,
        "end": 532,
        "startLoc": {
          "line": 487,
          "column": 2,
          "position": 3136
        },
        "endLoc": {
          "line": 532,
          "column": 15,
          "position": 3414
        }
      }
    },
    {
      "format": "tsx",
      "lines": 34,
      "fragment": ") {\n  const {\n    register,\n    formState: { errors },\n  } = form;\n  const error = errors[name]?.message as string | undefined;\n\n  return (\n    <LegacyFormItem\n      label={label}\n      description={description}\n      error={error}\n      required={required}\n      className={className}\n    >\n      <select\n        id={name}\n        className=\"w-full px-3 py-2 border rounded-md\"\n        {...register(name)}\n      >\n        {placeholder && (\n          <option value=\"\" disabled>\n            {placeholder}\n          </option>\n        )}\n        {options.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </LegacyFormItem>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 751,
        "end": 784,
        "startLoc": {
          "line": 751,
          "column": 22,
          "position": 4889
        },
        "endLoc": {
          "line": 784,
          "column": 2,
          "position": 5115
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\form-fields.tsx",
        "start": 326,
        "end": 359,
        "startLoc": {
          "line": 326,
          "column": 2,
          "position": 2020
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2246
        }
      }
    },
    {
      "format": "tsx",
      "lines": 23,
      "fragment": ">\n                    {connectivityStatus.isConnected ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"h-4 w-4\" />\n                    )}\n                    <AlertTitle>{connectivityStatus.message}</AlertTitle>\n                  </Alert>\n                )}\n\n              <Button\n                onClick={testReactQuery}\n                disabled={isLoading}\n                className=\"w-full\"\n              >\n                {isLoading ? (\n                  <>\n                    <RefreshCw className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\composed\\connectivity-debugger.tsx",
        "start": 232,
        "end": 254,
        "startLoc": {
          "line": 232,
          "column": 19,
          "position": 1842
        },
        "endLoc": {
          "line": 254,
          "column": 10,
          "position": 1982
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\connectivity-debugger.tsx",
        "start": 187,
        "end": 209,
        "startLoc": {
          "line": 187,
          "column": 17,
          "position": 1559
        },
        "endLoc": {
          "line": 209,
          "column": 9,
          "position": 1699
        }
      }
    },
    {
      "format": "tsx",
      "lines": 25,
      "fragment": ", children, ...props }, ref) => {\n    const alignClasses = {\n      left: \"justify-start\",\n      center: \"justify-center\",\n      right: \"justify-end\",\n      between: \"justify-between\",\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center gap-2\",\n          alignClasses[align],\n          padded && \"px-6 pb-6 pt-2\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nCardActions",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\cards\\card.tsx",
        "start": 254,
        "end": 278,
        "startLoc": {
          "line": 254,
          "column": 8,
          "position": 1497
        },
        "endLoc": {
          "line": 278,
          "column": 12,
          "position": 1621
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\cards\\card.tsx",
        "start": 185,
        "end": 215,
        "startLoc": {
          "line": 185,
          "column": 7,
          "position": 1106
        },
        "endLoc": {
          "line": 215,
          "column": 11,
          "position": 1241
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "const VisuallyHidden = React.forwardRef<HTMLSpanElement, React.HTMLAttributes<HTMLSpanElement>>(\n  ({ className, ...props }, ref) => (\n    <span\n      ref={ref}\n      className={cn(\n        \"absolute h-[1px] w-[1px] p-0 m-[-1px] overflow-hidden\",\n        \"whitespace-nowrap border-0\",\n        \"clip-[rect(0,0,0,0)]\",\n        \"pointer-events-none\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nVisuallyHidden.displayName = \"VisuallyHidden\";\n\nexport { VisuallyHidden };",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\accessibility\\visually-hidden.tsx",
        "start": 11,
        "end": 28,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 29
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 132
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\composed\\visually-hidden.tsx",
        "start": 5,
        "end": 20,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 28
        },
        "endLoc": {
          "line": 20,
          "column": 2,
          "position": 125
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ": React.FC<{ size: LoadingSize }> = ({ size }) => {\r\n  const config = sizeConfig[size];\r\n  return (\r\n    <div className=\"flex items-center gap-1\">\r\n      {[0, 1, 2].map((i) => (\r\n        <div\r\n          key={i}\r\n          className={cn(\r\n            'bg-primary rounded-full animate-pulse'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\components\\ui\\Loading.tsx",
        "start": 77,
        "end": 85,
        "startLoc": {
          "line": 77,
          "column": 13,
          "position": 636
        },
        "endLoc": {
          "line": 85,
          "column": 40,
          "position": 744
        }
      },
      "secondFile": {
        "name": "src\\shared\\components\\ui\\Loading.tsx",
        "start": 55,
        "end": 63,
        "startLoc": {
          "line": 55,
          "column": 12,
          "position": 442
        },
        "endLoc": {
          "line": 63,
          "column": 26,
          "position": 550
        }
      }
    },
    {
      "format": "javascript",
      "lines": 23,
      "fragment": "} />\n            Refresh\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Shift\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {metricCards.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-2 rounded-lg bg-",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 343,
        "end": 365,
        "startLoc": {
          "line": 343,
          "column": 2,
          "position": 3103
        },
        "endLoc": {
          "line": 365,
          "column": 20,
          "position": 3294
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsPage.tsx",
        "start": 306,
        "end": 350,
        "startLoc": {
          "line": 306,
          "column": 22,
          "position": 2748
        },
        "endLoc": {
          "line": 350,
          "column": 3,
          "position": 3093
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "(employeeId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['employees'] });\n      queryClient.invalidateQueries({ queryKey: ['shifts'] });\n      queryClient.invalidateQueries({ queryKey: ['shift-metrics'] });\n      toast({\n        title: 'Clock Out Successful'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 184,
        "end": 190,
        "startLoc": {
          "line": 184,
          "column": 9,
          "position": 1661
        },
        "endLoc": {
          "line": 190,
          "column": 23,
          "position": 1740
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 164,
        "end": 170,
        "startLoc": {
          "line": 164,
          "column": 8,
          "position": 1473
        },
        "endLoc": {
          "line": 170,
          "column": 22,
          "position": 1552
        }
      }
    },
    {
      "format": "javascript",
      "lines": 34,
      "fragment": ")}\n                                        </FormLabel>\n                                        <FormControl>\n                                          <div className=\"relative\">\n                                            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                                              ֏\n                                            </span>\n                                            <Input\n                                              type=\"number\"\n                                              className=\"pl-8\"\n                                              {...field}\n                                              min={0}\n                                              step={1}\n                                              onChange={(e) =>\n                                                field.onChange(\n                                                  e.target.value === \"\"\n                                                    ? 0\n                                                    : Number(e.target.value)\n                                                )\n                                              }\n                                            />\n                                          </div>\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"fuelPrices.gas\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>{",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 556,
        "end": 589,
        "startLoc": {
          "line": 556,
          "column": 16,
          "position": 3985
        },
        "endLoc": {
          "line": 589,
          "column": 2,
          "position": 4155
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 522,
        "end": 556,
        "startLoc": {
          "line": 522,
          "column": 16,
          "position": 3810
        },
        "endLoc": {
          "line": 556,
          "column": 43,
          "position": 3980
        }
      }
    },
    {
      "format": "javascript",
      "lines": 33,
      "fragment": "</FormLabel>\n                                        <FormControl>\n                                          <div className=\"relative\">\n                                            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                                              ֏\n                                            </span>\n                                            <Input\n                                              type=\"number\"\n                                              className=\"pl-8\"\n                                              {...field}\n                                              min={0}\n                                              step={1}\n                                              onChange={(e) =>\n                                                field.onChange(\n                                                  e.target.value === \"\"\n                                                    ? 0\n                                                    : Number(e.target.value)\n                                                )\n                                              }\n                                            />\n                                          </div>\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"fuelPrices.cng\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>{t(\"common.cng\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 589,
        "end": 621,
        "startLoc": {
          "line": 589,
          "column": 2,
          "position": 4161
        },
        "endLoc": {
          "line": 621,
          "column": 13,
          "position": 4331
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 523,
        "end": 589,
        "startLoc": {
          "line": 523,
          "column": 41,
          "position": 3813
        },
        "endLoc": {
          "line": 589,
          "column": 13,
          "position": 4158
        }
      }
    },
    {
      "format": "javascript",
      "lines": 34,
      "fragment": ")}</FormLabel>\n                                        <FormControl>\n                                          <div className=\"relative\">\n                                            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                                              ֏\n                                            </span>\n                                            <Input\n                                              type=\"number\"\n                                              className=\"pl-8\"\n                                              {...field}\n                                              min={0}\n                                              step={1}\n                                              onChange={(e) =>\n                                                field.onChange(\n                                                  e.target.value === \"\"\n                                                    ? 0\n                                                    : Number(e.target.value)\n                                                )\n                                              }\n                                            />\n                                          </div>\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name=\"fuelPrices.kerosene\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>\n                                          {t(\"common.kerosene\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 621,
        "end": 654,
        "startLoc": {
          "line": 621,
          "column": 13,
          "position": 4332
        },
        "endLoc": {
          "line": 654,
          "column": 18,
          "position": 4505
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 589,
        "end": 556,
        "startLoc": {
          "line": 589,
          "column": 13,
          "position": 4159
        },
        "endLoc": {
          "line": 556,
          "column": 16,
          "position": 3984
        }
      }
    },
    {
      "format": "javascript",
      "lines": 42,
      "fragment": ")}\n                                        </FormLabel>\n                                        <FormControl>\n                                          <div className=\"relative\">\n                                            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                                              ֏\n                                            </span>\n                                            <Input\n                                              type=\"number\"\n                                              className=\"pl-8\"\n                                              {...field}\n                                              min={0}\n                                              step={1}\n                                              onChange={(e) =>\n                                                field.onChange(\n                                                  e.target.value === \"\"\n                                                    ? 0\n                                                    : Number(e.target.value)\n                                                )\n                                              }\n                                            />\n                                          </div>\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                              </AccordionContent>\n                            </AccordionItem>\n                          </Accordion>\n                        )}\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n\n                <CardFooter className=\"flex justify-between border-t p-4\">\n                  <ButtonLink href=\"/finance/shifts\" variant=\"outline\">\n                    {t(\"common.cancel\")}\n                  </ButtonLink>\n                  <Button type=\"submit\" disabled={isLoading",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 654,
        "end": 695,
        "startLoc": {
          "line": 654,
          "column": 18,
          "position": 4506
        },
        "endLoc": {
          "line": 695,
          "column": 10,
          "position": 4736
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 522,
        "end": 551,
        "startLoc": {
          "line": 522,
          "column": 16,
          "position": 3810
        },
        "endLoc": {
          "line": 551,
          "column": 5,
          "position": 3949
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "{error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>{t(\"common.error\")}</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 283,
        "end": 291,
        "startLoc": {
          "line": 283,
          "column": 9,
          "position": 2269
        },
        "endLoc": {
          "line": 291,
          "column": 2,
          "position": 2341
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\Shifts.tsx",
        "start": 486,
        "end": 494,
        "startLoc": {
          "line": 486,
          "column": 13,
          "position": 3956
        },
        "endLoc": {
          "line": 494,
          "column": 2,
          "position": 4028
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": ".getTime() - start.getTime();\n  const hours = Math.floor(diffMs / (1000 * 60 * 60));\n  const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n  return `${hours}h ${minutes}m`;\n};\n\n// Add a safe formatting function",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftDetails.tsx",
        "start": 74,
        "end": 80,
        "startLoc": {
          "line": 74,
          "column": 4,
          "position": 795
        },
        "endLoc": {
          "line": 80,
          "column": 34,
          "position": 897
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftDetails.tsx",
        "start": 65,
        "end": 71,
        "startLoc": {
          "line": 65,
          "column": 4,
          "position": 629
        },
        "endLoc": {
          "line": 71,
          "column": 6,
          "position": 731
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "};\n\n// Add a safe formatting function\nconst safeFormatDateTime = (dateString?: string | null): string => {\n  if (!dateString) return \"-\";\n  try {\n    // Validate the date is parseable\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) {\n      return \"-\";\n    }\n    return formatDateTime(dateString);\n  } catch (error) {\n    console.error(\"Error formatting date:\", error);\n    return \"-\";\n  }\n};\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftDetails.tsx",
        "start": 78,
        "end": 96,
        "startLoc": {
          "line": 78,
          "column": 1,
          "position": 893
        },
        "endLoc": {
          "line": 96,
          "column": 7,
          "position": 1030
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\Shifts.tsx",
        "start": 106,
        "end": 124,
        "startLoc": {
          "line": 106,
          "column": 1,
          "position": 793
        },
        "endLoc": {
          "line": 124,
          "column": 6,
          "position": 930
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "const date = new Date(dateString);\n    if (isNaN(date.getTime())) {\n      return \"-\";\n    }\n    return formatDateTime(dateString);\n  } catch (error) {\n    console.error(\"Error formatting date:\", error);\n    return \"-\";\n  }\n};\n\nexport default function ShiftClose",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftClose.tsx",
        "start": 45,
        "end": 56,
        "startLoc": {
          "line": 45,
          "column": 5,
          "position": 296
        },
        "endLoc": {
          "line": 56,
          "column": 11,
          "position": 386
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\Shifts.tsx",
        "start": 113,
        "end": 96,
        "startLoc": {
          "line": 113,
          "column": 5,
          "position": 846
        },
        "endLoc": {
          "line": 96,
          "column": 13,
          "position": 1036
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ")}\n            </AlertDescription>\n          </Alert>\n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"outline\"\n              className=\"mt-4\"\n              onClick={navigateToShifts}\n            >\n              {t(\"common.backToShifts\")}\n            </Button>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  // Special check to see if the active shift belongs to another user",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftClose.tsx",
        "start": 423,
        "end": 440,
        "startLoc": {
          "line": 423,
          "column": 23,
          "position": 3033
        },
        "endLoc": {
          "line": 440,
          "column": 68,
          "position": 3118
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftClose.tsx",
        "start": 356,
        "end": 373,
        "startLoc": {
          "line": 356,
          "column": 29,
          "position": 2588
        },
        "endLoc": {
          "line": 373,
          "column": 65,
          "position": 2673
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\">\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>{t(\"common.error\")}</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {showOtherUserWarning",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\pages\\ShiftClose.tsx",
        "start": 456,
        "end": 465,
        "startLoc": {
          "line": 456,
          "column": 18,
          "position": 3236
        },
        "endLoc": {
          "line": 465,
          "column": 21,
          "position": 3313
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftOpen.tsx",
        "start": 282,
        "end": 494,
        "startLoc": {
          "line": 282,
          "column": 18,
          "position": 2265
        },
        "endLoc": {
          "line": 494,
          "column": 20,
          "position": 4029
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ".map((pm) => ({\n          id: \"\",\n          shift_id: activeShift.id,\n          payment_method: pm.payment_method as \"cash\" | \"card\" | \"bank_transfer\" | \"mobile_payment\",\n          amount: pm.amount,\n          notes: pm.reference || \"\",\n          created_at: \"\",\n          updated_at: \"\",\n        }))\n      );\n\n      if (response.error) {\n        throw new Error(response.error.message);\n      }\n\n      // Refresh payment methods",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\shifts\\hooks\\useShift.ts",
        "start": 396,
        "end": 411,
        "startLoc": {
          "line": 396,
          "column": 15,
          "position": 3038
        },
        "endLoc": {
          "line": 411,
          "column": 27,
          "position": 3168
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\hooks\\useShift.ts",
        "start": 312,
        "end": 327,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 2369
        },
        "endLoc": {
          "line": 327,
          "column": 15,
          "position": 2499
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": ")}\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <LoadingButton\n                type=\"submit\"\n                isLoading={isPasswordSubmitting",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\pages\\SecuritySettings.tsx",
        "start": 366,
        "end": 382,
        "startLoc": {
          "line": 366,
          "column": 36,
          "position": 2357
        },
        "endLoc": {
          "line": 382,
          "column": 21,
          "position": 2422
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SecuritySettings.tsx",
        "start": 325,
        "end": 340,
        "startLoc": {
          "line": 325,
          "column": 36,
          "position": 2154
        },
        "endLoc": {
          "line": 340,
          "column": 13,
          "position": 2213
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "import React, { memo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks\";\nimport { useRenderCount } from \"@/utils/performance\";\n\n// UI components\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/core/components/ui/card\";\nimport { Button",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\pages\\PrivacySettings.tsx",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 7,
          "position": 100
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SecuritySettings.tsx",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 5,
          "position": 101
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "import React, { memo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks\";\nimport { useRenderCount } from \"@/utils/performance\";\n\n// UI components\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/core/components/ui/card\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { Switch } from \"@/core/components/ui/switch\";\nimport { Label } from \"@/core/components/ui/label\";\nimport { Separator } from \"@/core/components/ui/separator\";\n\n// Icons",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\pages\\NotificationSettings.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 9,
          "position": 149
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SecuritySettings.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 7,
          "position": 148
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "import React, { memo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks\";\nimport { useRenderCount } from \"@/utils/performance\";\n\n// UI components\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/core/components/ui/card\";\nimport { Button } from \"@/core/components/ui/button\";\nimport {\n  RadioGroup",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\pages\\AppearanceSettings.tsx",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 11,
          "position": 114
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SecuritySettings.tsx",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 7,
          "position": 113
        }
      }
    },
    {
      "format": "javascript",
      "lines": 19,
      "fragment": "? (\r\n                            <EyeOff className=\"h-4 w-4\" />\r\n                          ) : (\r\n                            <Eye className=\"h-4 w-4\" />\r\n                          )}\r\n                        </Button>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={passwordForm.control}\r\n                name=\"confirmPassword\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t(\"settings.confirmPassword\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\SecuritySettings.tsx",
        "start": 200,
        "end": 218,
        "startLoc": {
          "line": 200,
          "column": 17,
          "position": 1821
        },
        "endLoc": {
          "line": 218,
          "column": 27,
          "position": 1926
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\SecuritySettings.tsx",
        "start": 168,
        "end": 186,
        "startLoc": {
          "line": 168,
          "column": 21,
          "position": 1623
        },
        "endLoc": {
          "line": 186,
          "column": 23,
          "position": 1728
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "? (\r\n                            <EyeOff className=\"h-4 w-4\" />\r\n                          ) : (\r\n                            <Eye className=\"h-4 w-4\" />\r\n                          )}\r\n                        </Button>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <Button type=\"submit\" disabled={isPasswordLoading",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\SecuritySettings.tsx",
        "start": 232,
        "end": 245,
        "startLoc": {
          "line": 232,
          "column": 21,
          "position": 2019
        },
        "endLoc": {
          "line": 245,
          "column": 18,
          "position": 2096
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\SecuritySettings.tsx",
        "start": 168,
        "end": 182,
        "startLoc": {
          "line": 168,
          "column": 21,
          "position": 1623
        },
        "endLoc": {
          "line": 182,
          "column": 13,
          "position": 1694
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": ")}</FormLabel>\r\n                      <FormControl>\r\n                        <Input {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 191,
        "end": 207,
        "startLoc": {
          "line": 191,
          "column": 12,
          "position": 1843
        },
        "endLoc": {
          "line": 207,
          "column": 2,
          "position": 1939
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 177,
        "end": 191,
        "startLoc": {
          "line": 177,
          "column": 13,
          "position": 1757
        },
        "endLoc": {
          "line": 191,
          "column": 2,
          "position": 1835
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": " />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"phone\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"flex items-center gap-2\">\r\n                        <Phone",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 212,
        "end": 225,
        "startLoc": {
          "line": 212,
          "column": 2,
          "position": 1989
        },
        "endLoc": {
          "line": 225,
          "column": 6,
          "position": 2059
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 193,
        "end": 208,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1860
        },
        "endLoc": {
          "line": 208,
          "column": 5,
          "position": 1948
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "</FormLabel>\r\n                      <FormControl>\r\n                        <Input {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"position\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>{t(\"settings.position\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 227,
        "end": 243,
        "startLoc": {
          "line": 227,
          "column": 23,
          "position": 2079
        },
        "endLoc": {
          "line": 243,
          "column": 20,
          "position": 2177
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 177,
        "end": 191,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1759
        },
        "endLoc": {
          "line": 191,
          "column": 20,
          "position": 1839
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "import { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Button } from \"@/core/components/ui/button\";\r\nimport { Input } from \"@/core/components/ui/primitives/input\";\r\nimport { Textarea",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\settings\\components\\ProfileSettings.tsx",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 9,
          "position": 102
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\components\\SecuritySettings.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 5,
          "position": 104
        }
      }
    },
    {
      "format": "tsx",
      "lines": 24,
      "fragment": "կառավարման հիմնական գործողություններ\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                {quickActions.map((action, index) => (\r\n                  <Button\r\n                    key={index}\r\n                    variant=\"outline\"\r\n                    className=\"h-24 flex flex-col items-center justify-center space-y-2 glass-effect hover:shadow-lg transition-all duration-200\"\r\n                  >\r\n                    <div className={cn(\"p-2 rounded-lg\", action.color)}>\r\n                      <action.icon className={cn(\"h-5 w-5\", action.iconColor)} />\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <div className=\"font-medium\">{action.title}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                    </div>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </CardContainer",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesMainPage.tsx",
        "start": 306,
        "end": 329,
        "startLoc": {
          "line": 306,
          "column": 2,
          "position": 2452
        },
        "endLoc": {
          "line": 329,
          "column": 14,
          "position": 2667
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsMainPage.tsx",
        "start": 257,
        "end": 280,
        "startLoc": {
          "line": 257,
          "column": 2,
          "position": 2020
        },
        "endLoc": {
          "line": 280,
          "column": 4,
          "position": 2235
        }
      }
    },
    {
      "format": "javascript",
      "lines": 89,
      "fragment": "={handleRefresh} className=\"mx-auto\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Sales Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Monitor sales performance, customers, and product analytics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={metricsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Sale\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {metricCards.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.title}\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                      {metricsLoading ? '...' : metric.value}\n                    </p>\n                  </div>\n                </div>\n                {metric.trend && (\n                  <div className={`flex items-center space-x-1 ${metric.trend > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {metric.trend > 0 ? (\n                      <TrendingUp className=\"h-4 w-4\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"text-sm font-medium\">\n                      {Math.abs(metric.trend).toFixed(1)}%\n                    </span>\n                  </div>\n                )}\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                {metric.description}\n              </p>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* View Mode Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode('sales'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 332,
        "end": 420,
        "startLoc": {
          "line": 332,
          "column": 8,
          "position": 2974
        },
        "endLoc": {
          "line": 420,
          "column": 8,
          "position": 3716
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 315,
        "end": 403,
        "startLoc": {
          "line": 315,
          "column": 8,
          "position": 2897
        },
        "endLoc": {
          "line": 403,
          "column": 12,
          "position": 3634
        }
      }
    },
    {
      "format": "javascript",
      "lines": 50,
      "fragment": "\n                  ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'\n              }`}\n            >\n              <Package className=\"h-4 w-4 mr-2 inline\" />\n              Products\n            </button>\n          </div>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder={`Search ${viewMode}...`}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 w-64\"\n            />\n          </div>\n          {viewMode === 'sales' && (\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"h-4 w-4 text-gray-400\" />\n              <select\n                value={selectedFilter}\n                onChange={(e) => setSelectedFilter(e.target.value as any)}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-sm\"\n              >\n                <option value=\"all\">All Sales</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"refunded\">Refunded</option>\n              </select>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Content based on view mode */}\n      {viewMode === 'sales' ? (\n        // Sales View\n        <div className=\"space-y-4\">\n          <AnimatePresence>\n            {filteredSales.map((sale, index) => {\n              const StatusIcon = getStatusIcon(sale.status);\n              return (\n                <motion.div\n                  key={sale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 444,
        "end": 493,
        "startLoc": {
          "line": 444,
          "column": 11,
          "position": 3853
        },
        "endLoc": {
          "line": 493,
          "column": 5,
          "position": 4232
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 416,
        "end": 473,
        "startLoc": {
          "line": 416,
          "column": 9,
          "position": 3709
        },
        "endLoc": {
          "line": 473,
          "column": 9,
          "position": 4174
        }
      }
    },
    {
      "format": "javascript",
      "lines": 52,
      "fragment": ".id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  transition={{ delay: index * 0.05 }}\n                >\n                  <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\n                          <Receipt className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                            {sale.transaction_id}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {sale.customer_name} • {formatDate(sale.created_at)}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-6\">\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Subtotal</p>\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                            ${sale.subtotal.toFixed(2)}\n                          </p>\n                        </div>\n                        \n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tax</p>\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                            ${sale.tax.toFixed(2)}\n                          </p>\n                        </div>\n                        \n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total</p>\n                          <p className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\n                            ${sale.total.toFixed(2)}\n                          </p>\n                        </div>\n                        \n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Payment</p>\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                            {sale.payment_method}\n                          </p>\n                        </div>\n                        \n                        <Badge variant={getStatusColor(sale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 493,
        "end": 544,
        "startLoc": {
          "line": 493,
          "column": 5,
          "position": 4233
        },
        "endLoc": {
          "line": 544,
          "column": 5,
          "position": 4702
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 579,
        "end": 643,
        "startLoc": {
          "line": 579,
          "column": 6,
          "position": 5132
        },
        "endLoc": {
          "line": 643,
          "column": 6,
          "position": 5721
        }
      }
    },
    {
      "format": "javascript",
      "lines": 19,
      "fragment": ".id}\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.95 }}\n                transition={{ delay: index * 0.05 }}\n              >\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\n                        <span className=\"text-lg font-semibold text-gray-600 dark:text-gray-300\">\n                          {customer.name.split(' ').map(n => n[0]).join('')}\n                        </span>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                          {customer.name}\n                        </h3>\n                        <p className={`text-xs px-2 py-1 rounded-full ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 591,
        "end": 609,
        "startLoc": {
          "line": 591,
          "column": 9,
          "position": 5101
        },
        "endLoc": {
          "line": 609,
          "column": 33,
          "position": 5301
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 473,
        "end": 497,
        "startLoc": {
          "line": 473,
          "column": 9,
          "position": 4175
        },
        "endLoc": {
          "line": 497,
          "column": 15,
          "position": 4419
        }
      }
    },
    {
      "format": "javascript",
      "lines": 32,
      "fragment": ".id}\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.95 }}\n                transition={{ delay: index * 0.05 }}\n              >\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                        {product.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {product.category}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <MoreVertical className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  {/* Product Details */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Price:</span>\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        ${product.price.toFixed(2)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Stock:</span>\n                      <span className={`font-medium ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 656,
        "end": 687,
        "startLoc": {
          "line": 656,
          "column": 8,
          "position": 5712
        },
        "endLoc": {
          "line": 687,
          "column": 14,
          "position": 6012
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 473,
        "end": 497,
        "startLoc": {
          "line": 473,
          "column": 9,
          "position": 4175
        },
        "endLoc": {
          "line": 497,
          "column": 15,
          "position": 4419
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "});\n  };\n\n  if (metricsError) {\n    return (\n      <div className=\"p-6\">\n        <Card className=\"p-8 text-center\">\n          <AlertCircle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n            Error Loading Sales",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 318,
        "end": 327,
        "startLoc": {
          "line": 318,
          "column": 5,
          "position": 2850
        },
        "endLoc": {
          "line": 327,
          "column": 6,
          "position": 2923
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 301,
        "end": 310,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2771
        },
        "endLoc": {
          "line": 310,
          "column": 6,
          "position": 2844
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "data. Please try again.\n          </p>\n          <Button onClick={handleRefresh} className=\"mx-auto\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Sales",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 330,
        "end": 347,
        "startLoc": {
          "line": 330,
          "column": 2,
          "position": 2954
        },
        "endLoc": {
          "line": 347,
          "column": 6,
          "position": 3073
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 313,
        "end": 330,
        "startLoc": {
          "line": 313,
          "column": 2,
          "position": 2877
        },
        "endLoc": {
          "line": 330,
          "column": 6,
          "position": 2996
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "analytics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={metricsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 350,
        "end": 365,
        "startLoc": {
          "line": 350,
          "column": 2,
          "position": 3108
        },
        "endLoc": {
          "line": 365,
          "column": 4,
          "position": 3216
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 333,
        "end": 348,
        "startLoc": {
          "line": 333,
          "column": 2,
          "position": 3031
        },
        "endLoc": {
          "line": 348,
          "column": 4,
          "position": 3139
        }
      }
    },
    {
      "format": "tsx",
      "lines": 37,
      "fragment": "</Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {metricCards.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.title}\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                      {metricsLoading ? '...' : metric.value}\n                    </p>\n                  </div>\n                </div>\n                {metric.trend && (\n                  <div className={`flex items-center space-x-1 ${metric.trend > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {metric.trend > 0 ? (\n                      <TrendingUp className=\"h-4 w-4\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"text-sm font-medium\">\n                      {Math.abs(metric.trend).",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 366,
        "end": 402,
        "startLoc": {
          "line": 366,
          "column": 11,
          "position": 3221
        },
        "endLoc": {
          "line": 402,
          "column": 2,
          "position": 3593
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 349,
        "end": 385,
        "startLoc": {
          "line": 349,
          "column": 11,
          "position": 3144
        },
        "endLoc": {
          "line": 385,
          "column": 2,
          "position": 3516
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": ")}%\n                    </span>\n                  </div>\n                )}\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                {metric.description}\n              </p>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* View Mode Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode('sales')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                viewMode === 'sales'\n                  ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'\n              }`}\n            >\n              <Receipt",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 402,
        "end": 427,
        "startLoc": {
          "line": 402,
          "column": 2,
          "position": 3597
        },
        "endLoc": {
          "line": 427,
          "column": 8,
          "position": 3746
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 385,
        "end": 410,
        "startLoc": {
          "line": 385,
          "column": 6,
          "position": 3515
        },
        "endLoc": {
          "line": 410,
          "column": 6,
          "position": 3664
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "</button>\n          </div>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder={`Search ${viewMode}...`}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 w-64\"\n            />\n          </div>\n          {",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 451,
        "end": 466,
        "startLoc": {
          "line": 451,
          "column": 13,
          "position": 3884
        },
        "endLoc": {
          "line": 466,
          "column": 2,
          "position": 3991
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 423,
        "end": 438,
        "startLoc": {
          "line": 423,
          "column": 13,
          "position": 3740
        },
        "endLoc": {
          "line": 438,
          "column": 2,
          "position": 3847
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ") => ({\n  customer_name: request.customerName,\n  fuel_type: request.fuelType,\n  quantity: request.quantityLiters,\n  price_per_liter: request.unitPrice,\n  total_amount: request.amount,\n  sale_date: request.saleDate instanceof Date ? request.saleDate.toISOString() : request.saleDate,\n  filling_system_id: request.fillingSystemId,\n  payment_method: request.paymentMethod as \"cash\" | \"card\" | \"credit\",\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 18,
          "position": 240
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 351
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 13,
        "end": 22,
        "startLoc": {
          "line": 13,
          "column": 18,
          "position": 102
        },
        "endLoc": {
          "line": 22,
          "column": 7,
          "position": 214
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n          queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n          queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n          toast({\n            title: \"Success\",\n            description: \"Sale updated successfully and tank level adjusted\",\n          });\n\n          onUpdateSuccess",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 81,
        "end": 90,
        "startLoc": {
          "line": 81,
          "column": 11,
          "position": 718
        },
        "endLoc": {
          "line": 90,
          "column": 16,
          "position": 798
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesMutations.ts",
        "start": 56,
        "end": 64,
        "startLoc": {
          "line": 56,
          "column": 7,
          "position": 519
        },
        "endLoc": {
          "line": 64,
          "column": 20,
          "position": 598
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": Partial<Sale> = {\n            amount: processedData.amount,\n            quantityLiters: processedData.quantityLiters,\n            unitPrice: processedData.unitPrice,\n            saleDate: processedData.saleDate,\n            fuelType: processedData.fuelType,\n            customerName: processedData.customerName,\n            paymentMethod: processedData.paymentMethod,\n            notes: processedData.notes,\n          };\n\n          const newSale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 93,
        "end": 104,
        "startLoc": {
          "line": 93,
          "column": 11,
          "position": 820
        },
        "endLoc": {
          "line": 104,
          "column": 8,
          "position": 911
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 68,
        "end": 79,
        "startLoc": {
          "line": 68,
          "column": 11,
          "position": 607
        },
        "endLoc": {
          "line": 79,
          "column": 12,
          "position": 699
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ");\n\n          queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n          queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n          queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n          toast({\n            title: \"Success\",\n            description: \"Sale created successfully and tank level updated\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 104,
        "end": 112,
        "startLoc": {
          "line": 104,
          "column": 11,
          "position": 920
        },
        "endLoc": {
          "line": 112,
          "column": 51,
          "position": 995
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 79,
        "end": 87,
        "startLoc": {
          "line": 79,
          "column": 11,
          "position": 713
        },
        "endLoc": {
          "line": 87,
          "column": 52,
          "position": 788
        }
      }
    },
    {
      "format": "tsx",
      "lines": 40,
      "fragment": "</label>\n        <div className=\"flex gap-2 items-center\">\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Min\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n      {/* Total Sales Range */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 94,
        "end": 133,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 644
        },
        "endLoc": {
          "line": 133,
          "column": 24,
          "position": 840
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 51,
        "end": 90,
        "startLoc": {
          "line": 51,
          "column": 9,
          "position": 399
        },
        "endLoc": {
          "line": 90,
          "column": 23,
          "position": 595
        }
      }
    },
    {
      "format": "tsx",
      "lines": 41,
      "fragment": "Range <span className=\"text-muted-foreground\">(֏)</span>\n        </label>\n        <div className=\"flex gap-2 items-center\">\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Min\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(totalSalesRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                totalSalesRange,\n                onTotalSalesRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(totalSalesRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                totalSalesRange,\n                onTotalSalesRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n    </",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 136,
        "end": 176,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 870
        },
        "endLoc": {
          "line": 176,
          "column": 3,
          "position": 1084
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 93,
        "end": 90,
        "startLoc": {
          "line": 93,
          "column": 2,
          "position": 625
        },
        "endLoc": {
          "line": 90,
          "column": 2,
          "position": 594
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "litersRange: [number, number];\n  onLitersRangeChange: (range: [number, number]) => void;\n  priceRange: [number, number];\n  onPriceRangeChange: (range: [number, number]) => void;\n  totalSalesRange: [number, number];\n  onTotalSalesRangeChange: (range: [number, number]) => void;\n}\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesHeader.tsx",
        "start": 14,
        "end": 22,
        "startLoc": {
          "line": 14,
          "column": 3,
          "position": 155
        },
        "endLoc": {
          "line": 22,
          "column": 7,
          "position": 256
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 4,
        "end": 12,
        "startLoc": {
          "line": 4,
          "column": 3,
          "position": 17
        },
        "endLoc": {
          "line": 12,
          "column": 45,
          "position": 118
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": ")}</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  {...field}\n                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={control}\n        name=\"amount\"\n        render={({ field }) => (\n          ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesFormStandardized.tsx",
        "start": 248,
        "end": 267,
        "startLoc": {
          "line": 248,
          "column": 13,
          "position": 2067
        },
        "endLoc": {
          "line": 267,
          "column": 11,
          "position": 2178
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesFormStandardized.tsx",
        "start": 229,
        "end": 247,
        "startLoc": {
          "line": 229,
          "column": 20,
          "position": 1946
        },
        "endLoc": {
          "line": 247,
          "column": 13,
          "position": 2052
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "{\n  search: string;\n  onSearchChange: (search: string) => void;\n  date: Date | undefined;\n  onDateChange: (date: Date | undefined) => void;\n  systemId: string;\n  onSystemChange: (id: string) => void;\n  systems: { id: string; name: string }[];\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesFilters.tsx",
        "start": 6,
        "end": 14,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 53
        },
        "endLoc": {
          "line": 14,
          "column": 2,
          "position": 154
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesHeader.tsx",
        "start": 6,
        "end": 14,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 53
        },
        "endLoc": {
          "line": 14,
          "column": 12,
          "position": 155
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ", employees, totalSales, setTotalSales }: SalesFormContentProps) {\n  const { t } = useTranslation();\n\n  // Watch for changes to calculate derived values\n  const unitPrice = useWatch({ control, name: \"unitPrice\" });\n  const quantityLiters = useWatch({ control, name: \"quantityLiters\" });\n\n  // Calculate total sales when quantity or unit price changes\n  useEffect(() => {\n    // Calculate total sales\n    const calculatedTotal = quantityLiters * unitPrice;\n    setTotalSales(calculatedTotal || 0);\n  }, [quantityLiters, unitPrice, setTotalSales]);\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 220,
        "end": 234,
        "startLoc": {
          "line": 220,
          "column": 8,
          "position": 1947
        },
        "endLoc": {
          "line": 234,
          "column": 7,
          "position": 2091
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesFormStandardized.tsx",
        "start": 146,
        "end": 160,
        "startLoc": {
          "line": 146,
          "column": 5,
          "position": 1275
        },
        "endLoc": {
          "line": 160,
          "column": 35,
          "position": 1419
        }
      }
    },
    {
      "format": "javascript",
      "lines": 44,
      "fragment": "={breadcrumbItems}\r\n    >\r\n      {/* Quick Stats Overview */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {quickStats.map((stat, index) => (\r\n            <StatsCard\r\n              key={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              icon={stat.icon}\r\n              color={stat.color}\r\n              description={stat.description}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Reports Modules */}\r\n      <div className=\"space-y-8\">\r\n        {Object.entries(groupedModules).map(([category, modules]) => (\r\n          <div key={category}>\r\n            <div className=\"mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\r\n                {category}\r\n              </h2>\r\n              <div className=\"h-px bg-gradient-to-r from-blue-500 via-purple-500 to-transparent dark:from-blue-400 dark:via-purple-400 dark:to-transparent\"></div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {modules.map((module) => (\r\n                <ModuleCard\r\n                  key={module.id}\r\n                  id={module.id}\r\n                  title={module.title}\r\n                  description={module.description}\r\n                  path={module.path}\r\n                  icon={module.icon}\r\n                  badge={module.badge}\r\n                  stats={module.stats}\r\n                  color={module.color}\r\n                  bgGradient={module.bgGradient}\r\n                  iconGradient={module.iconGradient}\r\n                  textColor={module.textColor}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\reports\\pages\\ReportsPage.tsx",
        "start": 339,
        "end": 382,
        "startLoc": {
          "line": 339,
          "column": 16,
          "position": 2704
        },
        "endLoc": {
          "line": 382,
          "column": 2,
          "position": 3072
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 384,
        "end": 427,
        "startLoc": {
          "line": 384,
          "column": 16,
          "position": 2687
        },
        "endLoc": {
          "line": 427,
          "column": 2,
          "position": 3033
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "{\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  path: string;\r\n  icon: React.ComponentType<any>;\r\n  category?: string;\r\n  badge?: string;\r\n  stats?: {\r\n    count: string;\r\n    label: string;\r\n  };\r\n  color: string;\r\n  bgGradient: string;\r\n  iconGradient: string;\r\n  textColor: string;\r\n}\r\n\r\nconst reportsModules",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\reports\\pages\\ReportsPage.tsx",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 159
        },
        "endLoc": {
          "line": 45,
          "column": 15,
          "position": 293
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 141
        },
        "endLoc": {
          "line": 45,
          "column": 16,
          "position": 257
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ".reduce((acc, module) => {\r\n    const category = module.category || 'Other';\r\n    if (!acc[category]) {\r\n      acc[category] = [];\r\n    }\r\n    acc[category].push(module);\r\n    return acc;\r\n  }, {} as Record<string, ReportsModule",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\reports\\pages\\ReportsPage.tsx",
        "start": 295,
        "end": 302,
        "startLoc": {
          "line": 295,
          "column": 15,
          "position": 2366
        },
        "endLoc": {
          "line": 302,
          "column": 14,
          "position": 2463
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 340,
        "end": 347,
        "startLoc": {
          "line": 340,
          "column": 16,
          "position": 2390
        },
        "endLoc": {
          "line": 347,
          "column": 15,
          "position": 2480
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "}\r\n      <div className=\"space-y-8\">\r\n        {Object.entries(groupedModules).map(([category, modules]) => (\r\n          <div key={category}>\r\n            <div className=\"mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\r\n                {category}\r\n              </h2>\r\n              <div className=\"h-px bg-gradient-to-r from-blue-500 via-purple-500 to-transparent dark:from-blue-400 dark:via-purple-400 dark:to-transparent\"></div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {modules.map((module) => (\r\n                <ModuleCard\r\n                  ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\reports\\pages\\ReportsPage.tsx",
        "start": 357,
        "end": 371,
        "startLoc": {
          "line": 357,
          "column": 22,
          "position": 2836
        },
        "endLoc": {
          "line": 371,
          "column": 19,
          "position": 2977
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 402,
        "end": 416,
        "startLoc": {
          "line": 402,
          "column": 23,
          "position": 2809
        },
        "endLoc": {
          "line": 416,
          "column": 19,
          "position": 2938
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ": string;\r\n  start_time: string;\r\n  end_time: string;\r\n  scheduled_hours: number;\r\n  actual_hours: number;\r\n  break_duration: number;\r\n  status: 'scheduled' | 'active' | 'completed' | 'missed' | 'cancelled';\r\n  position: string;\r\n  notes?: string;\r\n  clock_in_time?: string;\r\n  clock_out_time?: string;\r\n  overtime_hours: number;\r\n  total_pay: number;\r\n  shift_rating?: number;\r\n  location",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 75,
        "end": 89,
        "startLoc": {
          "line": 75,
          "column": 14,
          "position": 536
        },
        "endLoc": {
          "line": 89,
          "column": 9,
          "position": 667
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 54,
        "end": 68,
        "startLoc": {
          "line": 54,
          "column": 14,
          "position": 348
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 464
        }
      }
    },
    {
      "format": "tsx",
      "lines": 55,
      "fragment": ": number;\r\n}\r\n\r\n// Shifts service for Supabase integration\r\nconst shiftsService = {\r\n  getMetrics: async (): Promise<ShiftMetrics> => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'get_metrics' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  getEmployees: async (): Promise<Employee[]> => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'get_employees' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  getShifts: async (): Promise<Shift[]> => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'get_shifts' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  clockIn: async (employeeId: string) => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'clock_in', employee_id: employeeId }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  clockOut: async (employeeId: string) => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'clock_out', employee_id: employeeId }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  updateShift: async (shiftId: string, updates: Partial<Shift>) => {\r\n    const { data, error } = await supabase.functions.invoke('shifts-analytics', {\r\n      body: { action: 'update_shift', shift_id: shiftId, ...updates }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  }\r\n};\r\n\r\n// Mock data",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 111,
        "end": 165,
        "startLoc": {
          "line": 111,
          "column": 16,
          "position": 830
        },
        "endLoc": {
          "line": 165,
          "column": 13,
          "position": 1455
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 82,
        "end": 136,
        "startLoc": {
          "line": 82,
          "column": 17,
          "position": 552
        },
        "endLoc": {
          "line": 136,
          "column": 7,
          "position": 1123
        }
      }
    },
    {
      "format": "tsx",
      "lines": 128,
      "fragment": ");\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  // Queries\r\n  const { data: metrics, isLoading: metricsLoading, error: metricsError } = useQuery({\r\n    queryKey: ['shift-metrics'],\r\n    queryFn: shiftsService.getMetrics,\r\n    refetchInterval: 30000,\r\n  });\r\n\r\n  const { data: employees = [], isLoading: employeesLoading } = useQuery({\r\n    queryKey: ['employees'],\r\n    queryFn: shiftsService.getEmployees,\r\n    refetchInterval: 60000,\r\n  });\r\n\r\n  const { data: shifts = [], isLoading: shiftsLoading } = useQuery({\r\n    queryKey: ['shifts'],\r\n    queryFn: shiftsService.getShifts,\r\n    refetchInterval: 30000,\r\n  });\r\n\r\n  // Mutations\r\n  const clockInMutation = useMutation({\r\n    mutationFn: ({ employeeId }: { employeeId: string }) => shiftsService.clockIn(employeeId),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['employees'] });\r\n      queryClient.invalidateQueries({ queryKey: ['shifts'] });\r\n      queryClient.invalidateQueries({ queryKey: ['shift-metrics'] });\r\n      toast({\r\n        title: 'Clock In Successful',\r\n        description: 'Employee has been clocked in successfully.',\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to clock in. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    },\r\n  });\r\n\r\n  const clockOutMutation = useMutation({\r\n    mutationFn: ({ employeeId }: { employeeId: string }) => shiftsService.clockOut(employeeId),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['employees'] });\r\n      queryClient.invalidateQueries({ queryKey: ['shifts'] });\r\n      queryClient.invalidateQueries({ queryKey: ['shift-metrics'] });\r\n      toast({\r\n        title: 'Clock Out Successful',\r\n        description: 'Employee has been clocked out successfully.',\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to clock out. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    },\r\n  });\r\n\r\n  // Filter data\r\n  const filteredEmployees = employees.filter(employee => {\r\n    const matchesSearch = employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         employee.role.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesFilter = selectedFilter === 'all' || employee.status === selectedFilter;\r\n    return matchesSearch && matchesFilter;\r\n  });\r\n\r\n  const filteredShifts = shifts.filter(shift => {\r\n    const matchesSearch = shift.employee_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         shift.position.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesFilter = selectedFilter === 'all' || shift.status === selectedFilter;\r\n    return matchesSearch && matchesFilter;\r\n  });\r\n\r\n  // Metric cards data\r\n  const metricCards = [\r\n    {\r\n      title: 'Total Employees',\r\n      value: metrics?.total_employees?.toString() || '--',\r\n      icon: Users,\r\n      color: 'blue',\r\n      description: 'Active staff members',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'On Shift Now',\r\n      value: metrics?.employees_on_shift?.toString() || '--',\r\n      icon: UserCheck,\r\n      color: 'green',\r\n      description: 'Currently working',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'Attendance Rate',\r\n      value: metrics?.attendance_rate ? `${metrics.attendance_rate.toFixed(1)}%` : '--',\r\n      icon: Calendar,\r\n      color: 'purple',\r\n      description: 'This week',\r\n      trend: metrics?.attendance_rate ? (metrics.attendance_rate > 90 ? 2.3 : -1.5) : null\r\n    },\r\n    {\r\n      title: 'Labor Cost Today',\r\n      value: metrics?.total_labor_cost_today ? `$${metrics.total_labor_cost_today.toFixed(2)}` : '--',\r\n      icon: DollarSign,\r\n      color: 'orange',\r\n      description: 'Daily payroll',\r\n      trend: metrics?.labor_efficiency ? (metrics.labor_efficiency > 90 ? 4.2 : -2.1) : null\r\n    }\r\n  ];\r\n\r\n  const handleRefresh = () => {\r\n    queryClient.invalidateQueries({ queryKey: ['shift-metrics'] });\r\n    queryClient.invalidateQueries({ queryKey: ['employees'] });\r\n    queryClient.invalidateQueries({ queryKey: ['shifts'] });\r\n    toast({\r\n      title: 'Data Refreshed',\r\n      description: 'All shift management data has been updated.',\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'on_shift'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 248,
        "end": 375,
        "startLoc": {
          "line": 248,
          "column": 6,
          "position": 2122
        },
        "endLoc": {
          "line": 375,
          "column": 11,
          "position": 3510
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 139,
        "end": 266,
        "startLoc": {
          "line": 139,
          "column": 12,
          "position": 1216
        },
        "endLoc": {
          "line": 266,
          "column": 9,
          "position": 2477
        }
      }
    },
    {
      "format": "tsx",
      "lines": 40,
      "fragment": ";\r\n    }\r\n  };\r\n\r\n  const formatTime = (timeString: string) => {\r\n    return new Date(timeString).toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  if (metricsError) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <Card className=\"p-8 text-center\">\r\n          <AlertCircle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\r\n            Error Loading Shift Data\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n            We couldn't load the shift management data. Please try again.\r\n          </p>\r\n          <Button onClick={handleRefresh} className=\"mx-auto\">\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Retry\r\n          </Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <WindowContainer",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 419,
        "end": 458,
        "startLoc": {
          "line": 419,
          "column": 3,
          "position": 3910
        },
        "endLoc": {
          "line": 458,
          "column": 16,
          "position": 4249
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 286,
        "end": 325,
        "startLoc": {
          "line": 286,
          "column": 6,
          "position": 2654
        },
        "endLoc": {
          "line": 325,
          "column": 4,
          "position": 2954
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Mail\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>{value || t(\"common:notAvailable\")}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByEmail\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeesTableStandardized.tsx",
        "start": 205,
        "end": 217,
        "startLoc": {
          "line": 205,
          "column": 2,
          "position": 1654
        },
        "endLoc": {
          "line": 217,
          "column": 29,
          "position": 1757
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeesTableStandardized.tsx",
        "start": 166,
        "end": 178,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 1327
        },
        "endLoc": {
          "line": 178,
          "column": 34,
          "position": 1430
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": ")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"position\"\n            render={({ field }) => (\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 154,
        "end": 168,
        "startLoc": {
          "line": 154,
          "column": 12,
          "position": 1317
        },
        "endLoc": {
          "line": 168,
          "column": 15,
          "position": 1394
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 140,
        "end": 153,
        "startLoc": {
          "line": 140,
          "column": 13,
          "position": 1230
        },
        "endLoc": {
          "line": 153,
          "column": 17,
          "position": 1302
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"employees.status\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 200,
        "end": 212,
        "startLoc": {
          "line": 200,
          "column": 3,
          "position": 1638
        },
        "endLoc": {
          "line": 212,
          "column": 19,
          "position": 1705
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 142,
        "end": 154,
        "startLoc": {
          "line": 142,
          "column": 6,
          "position": 1246
        },
        "endLoc": {
          "line": 154,
          "column": 18,
          "position": 1313
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.phone\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 243,
        "end": 255,
        "startLoc": {
          "line": 243,
          "column": 6,
          "position": 1911
        },
        "endLoc": {
          "line": 255,
          "column": 15,
          "position": 1994
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 200,
        "end": 154,
        "startLoc": {
          "line": 200,
          "column": 5,
          "position": 1622
        },
        "endLoc": {
          "line": 154,
          "column": 18,
          "position": 1313
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": " {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"notes\"\n            render={({ field }) => (\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 257,
        "end": 269,
        "startLoc": {
          "line": 257,
          "column": 6,
          "position": 2010
        },
        "endLoc": {
          "line": 269,
          "column": 15,
          "position": 2086
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 200,
        "end": 211,
        "startLoc": {
          "line": 200,
          "column": 2,
          "position": 1623
        },
        "endLoc": {
          "line": 211,
          "column": 17,
          "position": 1694
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"common.notes\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 257,
        "end": 270,
        "startLoc": {
          "line": 257,
          "column": 3,
          "position": 2025
        },
        "endLoc": {
          "line": 270,
          "column": 15,
          "position": 2097
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 156,
        "end": 169,
        "startLoc": {
          "line": 156,
          "column": 6,
          "position": 1333
        },
        "endLoc": {
          "line": 169,
          "column": 21,
          "position": 1405
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": ")\n      .optional(),\n    phone: z.string().optional(),\n    status: z.enum([\"active\", \"inactive\", \"on_leave\"]).default(\"active\"),\n    salary: z.number().optional(),\n    notes: z.string().optional(),\n  });\n\n  // Set up default values",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 66,
        "end": 74,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 620
        },
        "endLoc": {
          "line": 74,
          "column": 25,
          "position": 706
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 23,
        "end": 30,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 226
        },
        "endLoc": {
          "line": 30,
          "column": 49,
          "position": 308
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= supplies.map((supply) => [\n    format(new Date(supply.delivery_date), \"yyyy-MM-dd\"),\n    supply.provider?.name || \"\",\n    supply.tank?.name || \"\",\n    supply.tank?.fuel_type || \"\",\n    supply.quantity_liters.toString(),\n    `$",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\utils\\export.ts",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 2,
          "position": 560
        },
        "endLoc": {
          "line": 69,
          "column": 3,
          "position": 641
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\utils\\export.ts",
        "start": 18,
        "end": 24,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 117
        },
        "endLoc": {
          "line": 24,
          "column": 7,
          "position": 198
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "export interface FuelSupply {\n  id: string;\n  tank_id: string;\n  provider_id: string;\n  shift_id: string;\n  quantity_liters: number;\n  price_per_liter: number;\n  total_cost: number;\n  delivery_date: string;\n  payment_method: string;\n  payment_status: string;\n  comments: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface FuelSupplyFormData",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\types\\fuel-supplies.types.ts",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 19,
          "position": 106
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\types\\fuel.types.ts",
        "start": 14,
        "end": 30,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 99
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 205
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "apiData);\n\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n\n    if (!response.data) {\n      throw new Error(\"No data returned from API\");\n    }\n\n    return adaptApiResponseToFeatureType(response.data);\n  } catch (error) {\n    console.error(`Error updating fuel sale ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\services\\fuel-sales.service.ts",
        "start": 154,
        "end": 166,
        "startLoc": {
          "line": 154,
          "column": 2,
          "position": 1171
        },
        "endLoc": {
          "line": 166,
          "column": 27,
          "position": 1260
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\services\\fuel-sales.service.ts",
        "start": 110,
        "end": 122,
        "startLoc": {
          "line": 110,
          "column": 2,
          "position": 780
        },
        "endLoc": {
          "line": 122,
          "column": 28,
          "position": 869
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ");\n\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n\n    if (!response.data) {\n      return null;\n    }\n\n    return adaptApiResponseToFeatureType(response.data);\n  } catch (error) {\n    console.error(\n      `Error fetching latest sale for filling system ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\services\\fuel-sales.service.ts",
        "start": 196,
        "end": 209,
        "startLoc": {
          "line": 196,
          "column": 16,
          "position": 1455
        },
        "endLoc": {
          "line": 209,
          "column": 48,
          "position": 1540
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\services\\fuel-sales.service.ts",
        "start": 84,
        "end": 96,
        "startLoc": {
          "line": 84,
          "column": 3,
          "position": 615
        },
        "endLoc": {
          "line": 96,
          "column": 27,
          "position": 698
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Petrol",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\ProvidersPage.tsx",
        "start": 95,
        "end": 116,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 607
        },
        "endLoc": {
          "line": 116,
          "column": 7,
          "position": 762
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 199,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 199,
          "column": 5,
          "position": 1696
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ".map((module) => (\n                <NavigationCard\n                  key={module.id}\n                  title={module.title}\n                  description={module.description}\n                  href={module.path}\n                  color={module.color}\n                  icon={module.icon}\n                  variant=\"management\"\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\ProvidersPage.tsx",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 16,
          "position": 840
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 945
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 208,
        "end": 225,
        "startLoc": {
          "line": 208,
          "column": 12,
          "position": 1778
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1883
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Fuel",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelTypesPage.tsx",
        "start": 95,
        "end": 116,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 607
        },
        "endLoc": {
          "line": 116,
          "column": 5,
          "position": 762
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 199,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 199,
          "column": 5,
          "position": 1696
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ".map((module) => (\n                <NavigationCard\n                  key={module.id}\n                  title={module.title}\n                  description={module.description}\n                  href={module.path}\n                  color={module.color}\n                  icon={module.icon}\n                  variant=\"management\"\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelTypesPage.tsx",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 16,
          "position": 842
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 947
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 208,
        "end": 225,
        "startLoc": {
          "line": 208,
          "column": 12,
          "position": 1778
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1883
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Fuel Supplies",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelSuppliesPage.tsx",
        "start": 95,
        "end": 116,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 607
        },
        "endLoc": {
          "line": 116,
          "column": 9,
          "position": 764
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 116,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 764
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ".map((module) => (\n                <NavigationCard\n                  key={module.id}\n                  title={module.title}\n                  description={module.description}\n                  href={module.path}\n                  color={module.color}\n                  icon={module.icon}\n                  variant=\"management\"\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelSuppliesPage.tsx",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 16,
          "position": 842
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 947
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 208,
        "end": 225,
        "startLoc": {
          "line": 208,
          "column": 12,
          "position": 1778
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1883
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\r\n  ];\r\n\r\n  return (\r\n    <div className=\"subnav-container\">\r\n      <div className=\"subnav-card-window\">\r\n        {/* Header with Breadcrumb */}\r\n        <div className=\"subnav-header\">\r\n          <div className=\"subnav-header-content\">\r\n            <div className=\"subnav-breadcrumb\">\r\n              <Breadcrumb items={breadcrumbItems} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"subnav-body\">\r\n          <div className=\"subnav-content\">\r\n            {/* Page Title Section */}\r\n            <div className=\"page-title-section\">\r\n              <h1 className=\"page-title\">\r\n                Fuel Sales",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelSalesPage.tsx",
        "start": 42,
        "end": 63,
        "startLoc": {
          "line": 42,
          "column": 5,
          "position": 421
        },
        "endLoc": {
          "line": 63,
          "column": 6,
          "position": 599
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 116,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 764
        }
      }
    },
    {
      "format": "javascript",
      "lines": 44,
      "fragment": "={breadcrumbItems}\r\n    >\r\n      {/* Quick Stats Overview */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {quickStats.map((stat, index) => (\r\n            <StatsCard\r\n              key={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              icon={stat.icon}\r\n              color={stat.color}\r\n              description={stat.description}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Fuel Management Modules */}\r\n      <div className=\"space-y-8\">\r\n        {Object.entries(groupedModules).map(([category, modules]) => (\r\n          <div key={category}>\r\n            <div className=\"mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\r\n                {category}\r\n              </h2>\r\n              <div className=\"h-px bg-gradient-to-r from-blue-500 via-purple-500 to-transparent dark:from-blue-400 dark:via-purple-400 dark:to-transparent\"></div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {modules.map((module) => (\r\n                <ModuleCard\r\n                  key={module.id}\r\n                  id={module.id}\r\n                  title={module.title}\r\n                  description={module.description}\r\n                  path={module.path}\r\n                  icon={module.icon}\r\n                  badge={module.badge}\r\n                  stats={module.stats}\r\n                  color={module.color}\r\n                  bgGradient={module.bgGradient}\r\n                  iconGradient={module.iconGradient}\r\n                  textColor={module.textColor}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementPage.tsx",
        "start": 390,
        "end": 433,
        "startLoc": {
          "line": 390,
          "column": 16,
          "position": 3101
        },
        "endLoc": {
          "line": 433,
          "column": 2,
          "position": 3469
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 384,
        "end": 427,
        "startLoc": {
          "line": 384,
          "column": 16,
          "position": 2687
        },
        "endLoc": {
          "line": 427,
          "column": 2,
          "position": 3033
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "{\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  path: string;\r\n  icon: React.ComponentType<any>;\r\n  category?: string;\r\n  badge?: string;\r\n  stats?: {\r\n    count: string;\r\n    label: string;\r\n  };\r\n  color: string;\r\n  bgGradient: string;\r\n  iconGradient: string;\r\n  textColor: string;\r\n}\r\n\r\nconst fuelManagementModules",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementPage.tsx",
        "start": 29,
        "end": 47,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 169
        },
        "endLoc": {
          "line": 47,
          "column": 22,
          "position": 303
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 141
        },
        "endLoc": {
          "line": 45,
          "column": 16,
          "position": 257
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ".reduce((acc, module) => {\r\n    const category = module.category || 'Other';\r\n    if (!acc[category]) {\r\n      acc[category] = [];\r\n    }\r\n    acc[category].push(module);\r\n    return acc;\r\n  }, {} as Record<string, FuelModule",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementPage.tsx",
        "start": 346,
        "end": 353,
        "startLoc": {
          "line": 346,
          "column": 22,
          "position": 2763
        },
        "endLoc": {
          "line": 353,
          "column": 11,
          "position": 2860
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 340,
        "end": 347,
        "startLoc": {
          "line": 340,
          "column": 16,
          "position": 2390
        },
        "endLoc": {
          "line": 347,
          "column": 15,
          "position": 2480
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "\"\r\n      breadcrumbItems={breadcrumbItems}\r\n    >\r\n      {/* Quick Stats Overview */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {quickStats.map((stat, index) => (\r\n            <StatsCard\r\n              key={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              icon={stat.icon}\r\n              color={stat.color}\r\n              description={stat.description}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Fuel Management Modules */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementPage.tsx",
        "start": 389,
        "end": 408,
        "startLoc": {
          "line": 389,
          "column": 88,
          "position": 3098
        },
        "endLoc": {
          "line": 408,
          "column": 30,
          "position": 3232
        }
      },
      "secondFile": {
        "name": "src\\features\\reports\\pages\\ReportsPage.tsx",
        "start": 338,
        "end": 357,
        "startLoc": {
          "line": 338,
          "column": 99,
          "position": 2701
        },
        "endLoc": {
          "line": 357,
          "column": 22,
          "position": 2835
        }
      }
    },
    {
      "format": "tsx",
      "lines": 35,
      "fragment": "}\r\n      <div className=\"space-y-8\">\r\n        {Object.entries(groupedModules).map(([category, modules]) => (\r\n          <div key={category}>\r\n            <div className=\"mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\r\n                {category}\r\n              </h2>\r\n              <div className=\"h-px bg-gradient-to-r from-blue-500 via-purple-500 to-transparent dark:from-blue-400 dark:via-purple-400 dark:to-transparent\"></div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n              {modules.map((module) => (\r\n                <ModuleCard\r\n                  key={module.id}\r\n                  id={module.id}\r\n                  title={module.title}\r\n                  description={module.description}\r\n                  path={module.path}\r\n                  icon={module.icon}\r\n                  badge={module.badge}\r\n                  stats={module.stats}\r\n                  color={module.color}\r\n                  bgGradient={module.bgGradient}\r\n                  iconGradient={module.iconGradient}\r\n                  textColor={module.textColor}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </WindowContainer>\r\n  );\r\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementPage.tsx",
        "start": 408,
        "end": 442,
        "startLoc": {
          "line": 408,
          "column": 30,
          "position": 3233
        },
        "endLoc": {
          "line": 442,
          "column": 2,
          "position": 3515
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 402,
        "end": 391,
        "startLoc": {
          "line": 402,
          "column": 23,
          "position": 2809
        },
        "endLoc": {
          "line": 391,
          "column": 2,
          "position": 3118
        }
      }
    },
    {
      "format": "javascript",
      "lines": 75,
      "fragment": "={handleRefresh} className=\"mx-auto\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Fuel Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Monitor fuel tanks, consumption, and pricing analytics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={metricsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Tank\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {metricCards.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.title}\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                      {metricsLoading ? '...' : metric.value}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                {metric.description}\n              </p>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Alerts Section */}\n      {metrics && (metrics.low_level_alerts > 0) && (\n        <motion.div\n          initial={{",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementDashboard.tsx",
        "start": 233,
        "end": 307,
        "startLoc": {
          "line": 233,
          "column": 8,
          "position": 2098
        },
        "endLoc": {
          "line": 307,
          "column": 2,
          "position": 2690
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 315,
        "end": 378,
        "startLoc": {
          "line": 315,
          "column": 8,
          "position": 2897
        },
        "endLoc": {
          "line": 378,
          "column": 30,
          "position": 3425
        }
      }
    },
    {
      "format": "javascript",
      "lines": 18,
      "fragment": ".id}\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.95 }}\n              transition={{ delay: index * 0.05 }}\n            >\n              <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                      {tank.name}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                      {tank.fuel_type}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={getStatusColor(tank",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementDashboard.tsx",
        "start": 357,
        "end": 374,
        "startLoc": {
          "line": 357,
          "column": 5,
          "position": 3136
        },
        "endLoc": {
          "line": 374,
          "column": 5,
          "position": 3305
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 473,
        "end": 497,
        "startLoc": {
          "line": 473,
          "column": 9,
          "position": 4175
        },
        "endLoc": {
          "line": 497,
          "column": 9,
          "position": 4421
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "management data. Please try again.\n          </p>\n          <Button onClick={handleRefresh} className=\"mx-auto\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            Fuel",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementDashboard.tsx",
        "start": 231,
        "end": 248,
        "startLoc": {
          "line": 231,
          "column": 2,
          "position": 2076
        },
        "endLoc": {
          "line": 248,
          "column": 5,
          "position": 2197
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 313,
        "end": 330,
        "startLoc": {
          "line": 313,
          "column": 2,
          "position": 2875
        },
        "endLoc": {
          "line": 330,
          "column": 6,
          "position": 2996
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "analytics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={metricsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Tank",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementDashboard.tsx",
        "start": 251,
        "end": 266,
        "startLoc": {
          "line": 251,
          "column": 2,
          "position": 2232
        },
        "endLoc": {
          "line": 266,
          "column": 5,
          "position": 2342
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 333,
        "end": 348,
        "startLoc": {
          "line": 333,
          "column": 2,
          "position": 3031
        },
        "endLoc": {
          "line": 348,
          "column": 6,
          "position": 3141
        }
      }
    },
    {
      "format": "tsx",
      "lines": 29,
      "fragment": "</Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {metricCards.map((metric, index) => (\n          <motion.div\n            key={metric.title}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.title}\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                      {metricsLoading ? '...' : metric.value}\n                    </p>\n                  </div>\n                </div>\n              </",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelManagementDashboard.tsx",
        "start": 267,
        "end": 295,
        "startLoc": {
          "line": 267,
          "column": 11,
          "position": 2345
        },
        "endLoc": {
          "line": 295,
          "column": 3,
          "position": 2610
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 349,
        "end": 377,
        "startLoc": {
          "line": 349,
          "column": 11,
          "position": 3144
        },
        "endLoc": {
          "line": 377,
          "column": 2,
          "position": 3409
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ";\r\n  }\r\n};\r\n\r\nconst getAlertIcon = (type: string) => {\r\n  switch (type) {\r\n    case 'critical':\r\n      return <XCircle className=\"w-4 h-4 text-red-500\" />;\r\n    case 'warning':\r\n      return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\r\n    case 'info':\r\n      return <CheckCircle",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelDashboardPage.tsx",
        "start": 171,
        "end": 182,
        "startLoc": {
          "line": 171,
          "column": 35,
          "position": 1195
        },
        "endLoc": {
          "line": 182,
          "column": 12,
          "position": 1293
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 228,
        "end": 239,
        "startLoc": {
          "line": 228,
          "column": 29,
          "position": 1893
        },
        "endLoc": {
          "line": 239,
          "column": 5,
          "position": 1991
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\r\n  ];\r\n\r\n  return (\r\n    <div className=\"subnav-container\">\r\n      <div className=\"subnav-card-window\">\r\n        {/* Header with Breadcrumb */}\r\n        <div className=\"subnav-header\">\r\n          <div className=\"subnav-header-content\">\r\n            <div className=\"subnav-breadcrumb\">\r\n              <Breadcrumb items={breadcrumbItems} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"subnav-body\">\r\n          <div className=\"subnav-content\">\r\n            {/* Page Title Section */}\r\n            <div className=\"page-title-section\">\r\n              <h1 className=\"page-title\">\r\n                Fuel Analytics",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelAnalyticsPage.tsx",
        "start": 95,
        "end": 116,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 697
        },
        "endLoc": {
          "line": 116,
          "column": 10,
          "position": 875
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 116,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 764
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ".map((module) => (\r\n                <NavigationCard\r\n                  key={module.id}\r\n                  title={module.title}\r\n                  description={module.description}\r\n                  href={module.path}\r\n                  color={module.color}\r\n                  icon={module.icon}\r\n                  variant=\"management\"\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelAnalyticsPage.tsx",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 17,
          "position": 962
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 1076
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\FuelSalesPage.tsx",
        "start": 72,
        "end": 89,
        "startLoc": {
          "line": 72,
          "column": 13,
          "position": 680
        },
        "endLoc": {
          "line": 89,
          "column": 2,
          "position": 794
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Filling",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FillingSystemsPage.tsx",
        "start": 95,
        "end": 116,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 607
        },
        "endLoc": {
          "line": 116,
          "column": 8,
          "position": 762
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 199,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 199,
          "column": 5,
          "position": 1696
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ".map((module) => (\n                <NavigationCard\n                  key={module.id}\n                  title={module.title}\n                  description={module.description}\n                  href={module.path}\n                  color={module.color}\n                  icon={module.icon}\n                  variant=\"management\"\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\pages\\FillingSystemsPage.tsx",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 21,
          "position": 840
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 945
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 208,
        "end": 225,
        "startLoc": {
          "line": 208,
          "column": 12,
          "position": 1778
        },
        "endLoc": {
          "line": 225,
          "column": 2,
          "position": 1883
        }
      }
    },
    {
      "format": "typescript",
      "lines": 240,
      "fragment": "import { useCallback } from \"react\";\nimport { useEntityDialog } from \"@/shared/hooks/base\";\nimport { useToast } from \"@/core/hooks/useToast\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\n// Define inventory item type\nexport interface InventoryItem {\n  id: string;\n  name: string;\n  quantity: number;\n  minStockLevel: number;\n  lastRestocked: string;\n  category: string;\n  location: string;\n}\n\n// Define form data for creating/updating inventory items\nexport interface InventoryItemFormData {\n  name: string;\n  quantity: number;\n  minStockLevel: number;\n  category: string;\n  location: string;\n}\n\n// Mock service functions (replace with actual implementations)\nconst createInventoryItem = async (\n  data: InventoryItemFormData\n): Promise<InventoryItem> => {\n  // Simulate API call\n  return {\n    id: Math.random().toString(36).substring(2, 9),\n    ...data,\n    lastRestocked: new Date().toISOString(),\n  };\n};\n\nconst updateInventoryItem = async (\n  id: string,\n  data: InventoryItemFormData\n): Promise<InventoryItem> => {\n  // Simulate API call\n  return {\n    id,\n    ...data,\n    lastRestocked: new Date().toISOString(),\n  };\n};\n\nconst deleteInventoryItem = async (id: string): Promise<void> => {\n  // Simulate API call\n  await new Promise((resolve) => setTimeout(resolve, 500));\n  return;\n};\n\n/**\n * Options for the inventory dialog hook\n */\nexport interface UseInventoryDialogOptions {\n  /**\n   * Callback when an inventory item is successfully created\n   */\n  onCreateSuccess?: (item: InventoryItem) => void;\n\n  /**\n   * Callback when an inventory item is successfully updated\n   */\n  onUpdateSuccess?: (item: InventoryItem) => void;\n\n  /**\n   * Callback when an inventory item is successfully deleted\n   * @param id The ID of the deleted item\n   * @param item The deleted item entity\n   */\n  onDeleteSuccess?: (id: string | number, item?: InventoryItem) => void;\n}\n\n/**\n * Custom hook for managing inventory dialog state and operations\n *\n * This hook demonstrates how to build feature-specific functionality on top\n * of the base entity dialog hook.\n */\nexport function useInventoryDialog(options?: UseInventoryDialogOptions) {\n  // Use the shared toast hook\n  const { success, error: showError } = useToast();\n\n  // Use the base entity dialog hook for edit/create operations\n  const entityDialog = useEntityDialog<InventoryItem>({\n    entityName: \"inventory item\",\n    onCreateSuccess: options?.onCreateSuccess,\n    onUpdateSuccess: options?.onUpdateSuccess,\n    onDeleteSuccess: options?.onDeleteSuccess,\n  });\n\n  // Use React Query for cache management\n  const queryClient = useQueryClient();\n\n  /**\n   * Handle form submission for inventory item creation or update\n   */\n  const handleSubmit = useCallback(\n    async (formData: InventoryItemFormData) => {\n      try {\n        entityDialog.setIsSubmitting(true);\n\n        if (entityDialog.entity) {\n          // Update existing inventory item\n          const updatedItem = await updateInventoryItem(\n            entityDialog.entity.id,\n            formData\n          );\n\n          success({\n            title: \"Inventory Updated\",\n            description: `Successfully updated ${updatedItem.name}.`,\n          });\n\n          // Invalidate relevant queries\n          queryClient.invalidateQueries({ queryKey: [\"inventory\"] });\n\n          // Notify parent components of the update\n          entityDialog.handleUpdateSuccess(updatedItem);\n        } else {\n          // Create new inventory item\n          const newItem = await createInventoryItem(formData);\n\n          success({\n            title: \"Inventory Item Added\",\n            description: `Successfully added ${newItem.name} to inventory.`,\n          });\n\n          // Invalidate relevant queries\n          queryClient.invalidateQueries({ queryKey: [\"inventory\"] });\n\n          // Notify parent components of the creation\n          entityDialog.handleCreateSuccess(newItem);\n        }\n      } catch (error) {\n        console.error(\"Error submitting inventory data:\", error);\n        showError({\n          title: \"Error\",\n          description: \"Failed to save inventory item. Please try again.\",\n        });\n\n        // Handle the error with the base hook\n        entityDialog.handleError(error as Error);\n      } finally {\n        entityDialog.setIsSubmitting(false);\n      }\n    },\n    [entityDialog, success, showError, queryClient]\n  );\n\n  /**\n   * Handle inventory item deletion\n   */\n  const handleDelete = useCallback(async () => {\n    if (!entityDialog.entity) return;\n\n    try {\n      entityDialog.setIsSubmitting(true);\n\n      await deleteInventoryItem(entityDialog.entity.id);\n\n      success({\n        title: \"Item Removed\",\n        description: `Successfully removed ${entityDialog.entity.name} from inventory.`,\n      });\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"inventory\"] });\n\n      // Use the base hook's handleDeleteSuccess method\n      entityDialog.handleDeleteSuccess(entityDialog.entity.id);\n    } catch (error) {\n      console.error(\"Error deleting inventory item:\", error);\n      showError({\n        title: \"Error\",\n        description: \"Failed to delete inventory item. Please try again.\",\n      });\n\n      // Handle the error with the base hook\n      entityDialog.handleError(error as Error);\n    } finally {\n      entityDialog.setIsSubmitting(false);\n    }\n  }, [entityDialog, success, showError, queryClient]);\n\n  /**\n   * Special function to restock an inventory item\n   */\n  const handleRestock = useCallback(\n    async (additionalQuantity: number) => {\n      if (!entityDialog.entity) return;\n\n      try {\n        entityDialog.setIsSubmitting(true);\n\n        const updatedItem = await updateInventoryItem(entityDialog.entity.id, {\n          ...entityDialog.entity,\n          quantity: entityDialog.entity.quantity + additionalQuantity,\n        });\n\n        success({\n          title: \"Inventory Restocked\",\n          description: `Successfully added ${additionalQuantity} units to ${updatedItem.name}.`,\n        });\n\n        // Invalidate relevant queries\n        queryClient.invalidateQueries({ queryKey: [\"inventory\"] });\n\n        // Notify parent components of the update\n        entityDialog.handleUpdateSuccess(updatedItem);\n      } catch (error) {\n        console.error(\"Error restocking inventory:\", error);\n        showError({\n          title: \"Error\",\n          description: \"Failed to restock inventory. Please try again.\",\n        });\n\n        // Handle the error with the base hook\n        entityDialog.handleError(error as Error);\n      } finally {\n        entityDialog.setIsSubmitting(false);\n      }\n    },\n    [entityDialog, success, showError, queryClient]\n  );\n\n  return {\n    // Re-export everything from the entity dialog\n    ...entityDialog,\n\n    // Additional methods\n    handleSubmit,\n    handleDelete,\n    handleRestock,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useInventoryDialog.ts",
        "start": 1,
        "end": 240,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 240,
          "column": 2,
          "position": 1491
        }
      },
      "secondFile": {
        "name": "src\\features\\inventory\\hooks\\useInventoryDialog.ts",
        "start": 1,
        "end": 240,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 240,
          "column": 2,
          "position": 1491
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ";\n\n// Mock the useToast hook\nvi.mock(\"@/shared/hooks/ui\", () => ({\n  useToast: () => ({\n    success: vi.fn(),\n    error: vi.fn(),\n    warning: vi.fn(),\n    info: vi.fn(),\n    toast: vi.fn(),\n  }),\n}));\n\n// Mock API calls",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 2,
          "position": 115
        },
        "endLoc": {
          "line": 23,
          "column": 18,
          "position": 213
        }
      },
      "secondFile": {
        "name": "src\\features\\reports\\hooks\\__tests__\\useReportGenerator.test.tsx",
        "start": 8,
        "end": 21,
        "startLoc": {
          "line": 8,
          "column": 9,
          "position": 66
        },
        "endLoc": {
          "line": 21,
          "column": 38,
          "position": 164
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ", async () => {\n    // Mock implementation for this test\n    global.fetch = vi\n      .fn()\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockTankData,\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          ...mockTankData,\n          currentLevel",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 213,
        "end": 225,
        "startLoc": {
          "line": 213,
          "column": 27,
          "position": 1578
        },
        "endLoc": {
          "line": 225,
          "column": 13,
          "position": 1671
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 171,
        "end": 183,
        "startLoc": {
          "line": 171,
          "column": 35,
          "position": 1292
        },
        "endLoc": {
          "line": 183,
          "column": 7,
          "position": 1385
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "}),\n      });\n\n    const { result } = renderHook(() =>\n      useFuelTankMonitor({\n        tankId: \"tank123\",\n      })\n    );\n\n    // Wait for data to load\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    // Update tank level",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 226,
        "end": 240,
        "startLoc": {
          "line": 226,
          "column": 9,
          "position": 1678
        },
        "endLoc": {
          "line": 240,
          "column": 21,
          "position": 1765
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 100,
        "end": 114,
        "startLoc": {
          "line": 100,
          "column": 7,
          "position": 783
        },
        "endLoc": {
          "line": 114,
          "column": 34,
          "position": 870
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ", async () => {\n    // Mock implementation for this test\n    global.fetch = vi\n      .fn()\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockTankData,\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          ...mockTankData,\n          currentLevel: 4800",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 249,
        "end": 261,
        "startLoc": {
          "line": 249,
          "column": 54,
          "position": 1832
        },
        "endLoc": {
          "line": 261,
          "column": 5,
          "position": 1928
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelTankMonitor.test.tsx",
        "start": 171,
        "end": 225,
        "startLoc": {
          "line": 171,
          "column": 35,
          "position": 1292
        },
        "endLoc": {
          "line": 225,
          "column": 5,
          "position": 1674
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", async () => {\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSupplies);\n\n    const { result } = renderTestHook(() => useFuelSuppliesFilters());\n\n    await waitFor(() => {\n      expect(result.current.supplies).toHaveLength(2);\n    });\n\n    act(() => {\n      result.current.updateFilters({ providerId",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 156,
        "end": 168,
        "startLoc": {
          "line": 156,
          "column": 37,
          "position": 1190
        },
        "endLoc": {
          "line": 168,
          "column": 11,
          "position": 1311
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 137,
        "end": 149,
        "startLoc": {
          "line": 137,
          "column": 40,
          "position": 1007
        },
        "endLoc": {
          "line": 149,
          "column": 11,
          "position": 1128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", async () => {\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSupplies);\n\n    const { result } = renderTestHook(() => useFuelSuppliesFilters());\n\n    await waitFor(() => {\n      expect(result.current.supplies).toHaveLength(2);\n    });\n\n    act(() => {\n      result.current.updateFilters({ fuelType",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 175,
        "end": 187,
        "startLoc": {
          "line": 175,
          "column": 38,
          "position": 1373
        },
        "endLoc": {
          "line": 187,
          "column": 9,
          "position": 1494
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 137,
        "end": 149,
        "startLoc": {
          "line": 137,
          "column": 40,
          "position": 1007
        },
        "endLoc": {
          "line": 149,
          "column": 11,
          "position": 1128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ", async () => {\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSupplies);\n\n    const { result } = renderTestHook(() => useFuelSuppliesFilters());\n\n    await waitFor(() => {\n      expect(result.current.supplies).toHaveLength(2);\n    });\n\n    act(() => {\n      result.current.updateFilters({ paymentStatus",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 194,
        "end": 206,
        "startLoc": {
          "line": 194,
          "column": 43,
          "position": 1556
        },
        "endLoc": {
          "line": 206,
          "column": 14,
          "position": 1677
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 137,
        "end": 149,
        "startLoc": {
          "line": 137,
          "column": 40,
          "position": 1007
        },
        "endLoc": {
          "line": 149,
          "column": 11,
          "position": 1128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ", async () => {\n    // Use shared test utility\n    const { renderTestHook, mockFetch } = setupHookTest();\n    mockFetch.mockResolvedValue(mockSupplies);\n\n    const { result } = renderTestHook(() => useFuelSuppliesFilters());\n\n    await waitFor(() => {\n      expect(result.current.supplies).toHaveLength(2);\n    });\n\n    expect",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 213,
        "end": 224,
        "startLoc": {
          "line": 213,
          "column": 52,
          "position": 1739
        },
        "endLoc": {
          "line": 224,
          "column": 7,
          "position": 1842
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSuppliesFilters.test.ts",
        "start": 137,
        "end": 148,
        "startLoc": {
          "line": 137,
          "column": 40,
          "position": 1007
        },
        "endLoc": {
          "line": 148,
          "column": 4,
          "position": 1110
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ");\n\n    const { result } = renderTestHook(() => useFuelSupplies());\n\n    result.current.createSupply.mutate(newSupply);\n\n    await waitFor(() => {\n      expect(result.current.createSupply.isSuccess).toBe(true);\n    });\n\n    // Should invalidate fuelSupplies query",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSupplies.test.ts",
        "start": 193,
        "end": 203,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1490
        },
        "endLoc": {
          "line": 203,
          "column": 40,
          "position": 1570
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSupplies.test.ts",
        "start": 80,
        "end": 90,
        "startLoc": {
          "line": 80,
          "column": 14,
          "position": 618
        },
        "endLoc": {
          "line": 90,
          "column": 7,
          "position": 698
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "),\n    onSuccess: () => {\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.fuelSales] });\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.fuelSalesCount] });\n      queryClient.invalidateQueries({\n        queryKey: [QUERY_KEYS.fuelSalesSummary],\n      });\n    },\n  });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSales.ts",
        "start": 140,
        "end": 150,
        "startLoc": {
          "line": 140,
          "column": 3,
          "position": 885
        },
        "endLoc": {
          "line": 150,
          "column": 2,
          "position": 974
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelSales.ts",
        "start": 93,
        "end": 103,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 541
        },
        "endLoc": {
          "line": 103,
          "column": 2,
          "position": 630
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "),\n    onSuccess: () => {\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.fuelPrices] });\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.currentPrices] });\n      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.priceSummary] });\n    },\n  });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelPrices.ts",
        "start": 137,
        "end": 145,
        "startLoc": {
          "line": 137,
          "column": 3,
          "position": 926
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 1012
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuelPrices.ts",
        "start": 94,
        "end": 102,
        "startLoc": {
          "line": 94,
          "column": 5,
          "position": 588
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 674
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input \n                        type=\"number\" \n                        min=\"0\" \n                        step=\"0.01\" \n                        {...field} \n                        className=\"h-11 border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 pr-12\"\n                        placeholder={t(\"tanks.currentLevelPlaceholder\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\TankFormDialog.tsx",
        "start": 232,
        "end": 242,
        "startLoc": {
          "line": 232,
          "column": 2,
          "position": 1754
        },
        "endLoc": {
          "line": 242,
          "column": 32,
          "position": 1810
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\TankFormDialog.tsx",
        "start": 204,
        "end": 214,
        "startLoc": {
          "line": 204,
          "column": 2,
          "position": 1586
        },
        "endLoc": {
          "line": 214,
          "column": 28,
          "position": 1642
        }
      }
    },
    {
      "format": "javascript",
      "lines": 19,
      "fragment": ", \"0.00\")}\n                      />\n                      <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-gray-500 dark:text-gray-400\">\n                        L\n                      </span>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-xs\" />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          {/* Status */}\n          <FormField\n            control={control}\n            name=\"is_active\"\n            render={({ field }) => (\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\TankFormDialog.tsx",
        "start": 242,
        "end": 260,
        "startLoc": {
          "line": 242,
          "column": 32,
          "position": 1811
        },
        "endLoc": {
          "line": 260,
          "column": 15,
          "position": 1902
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\TankFormDialog.tsx",
        "start": 214,
        "end": 230,
        "startLoc": {
          "line": 214,
          "column": 28,
          "position": 1643
        },
        "endLoc": {
          "line": 230,
          "column": 17,
          "position": 1724
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "{\n  onSuccess?: () => void;\n  className?: string;\n  buttonText?: string;\n  variant?:\n    | \"default\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\"\n    | \"destructive\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  showIcon?: boolean;\n}\n\n/**\n * TankController - Component for managing tank creation and editing\n *\n * This component provides a button to trigger the tank creation dialog\n * and handles the display of the TankFormDialog.\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\TankController.tsx",
        "start": 8,
        "end": 28,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 83
        },
        "endLoc": {
          "line": 28,
          "column": 4,
          "position": 181
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesController.tsx",
        "start": 8,
        "end": 23,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 83
        },
        "endLoc": {
          "line": 23,
          "column": 7,
          "position": 181
        }
      }
    },
    {
      "format": "tsx",
      "lines": 23,
      "fragment": ");\n\n  return (\n    <>\n      <Button\n        onClick={() => setIsDialogOpen(true)}\n        className={className}\n        variant={variant}\n        size={size}\n      >\n        {showIcon && <Plus className=\"h-4 w-4 mr-2\" />}\n        {buttonText}\n      </Button>\n\n      <TankFormDialog\n        open={isDialogOpen}\n        onOpenChange={setIsDialogOpen}\n        fuelTypes={fuelTypes}\n        onSuccess={onSuccess}\n      />\n    </>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\TankController.tsx",
        "start": 43,
        "end": 65,
        "startLoc": {
          "line": 43,
          "column": 2,
          "position": 304
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 423
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesController.tsx",
        "start": 46,
        "end": 68,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 395
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 514
        }
      }
    },
    {
      "format": "javascript",
      "lines": 70,
      "fragment": "}\n              className=\"text-2xl font-bold\"\n            >\n              {summary.totalLiters.toLocaleString()}\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div variants={item}>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              {t(\"supplies.totalCost\", \"Total Cost\")}\n            </CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n              className=\"text-2xl font-bold\"\n            >\n              ${summary.totalCost.toLocaleString()}\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div variants={item}>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              {t(\"supplies.lastDelivery\", \"Last Delivery\")}\n            </CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n              className=\"text-2xl font-bold\"\n            >\n              {format(new Date(summary.lastDelivery), \"MMM d, yyyy\")}\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div variants={item}>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              {t(\"supplies.tankLevel\", \"Tank Level\")}\n            </CardTitle>\n            <Gauge className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <motion.div\n                initial={{ opacity: 0, scale: 0.5 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5 }}\n                className=\"text-2xl font-bold\"\n              >\n                {tankLevelPercentage.toFixed(1)}%\n              </motion.div>\n              <Progress value={tankLevelPercentage",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\KpiCardGrid.tsx",
        "start": 75,
        "end": 144,
        "startLoc": {
          "line": 75,
          "column": 2,
          "position": 615
        },
        "endLoc": {
          "line": 144,
          "column": 20,
          "position": 1165
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\KpiCardGrid.tsx",
        "start": 58,
        "end": 105,
        "startLoc": {
          "line": 58,
          "column": 10,
          "position": 469
        },
        "endLoc": {
          "line": 105,
          "column": 5,
          "position": 831
        }
      }
    },
    {
      "format": "tsx",
      "lines": 6,
      "fragment": "async function fetchFuelTanks(): Promise<FuelTank[]> {\n  const response = await tanksApi.getTanks();\n  if (response.error) throw new Error(response.error.message || 'Failed to fetch tanks');\n  \n  const tanks = response.data || [];\n  return tanks.map((tank: any",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\FuelSalesFormStandardized.tsx",
        "start": 53,
        "end": 58,
        "startLoc": {
          "line": 53,
          "column": 1,
          "position": 534
        },
        "endLoc": {
          "line": 58,
          "column": 4,
          "position": 625
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FuelSalesManagerStandardized.tsx",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 283
        },
        "endLoc": {
          "line": 31,
          "column": 5,
          "position": 374
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "const formActions = (\n    <div className=\"flex justify-end space-x-2\">\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={() => onOpenChange(false)}\n        disabled={isSubmitting}\n      >\n        Cancel\n      </Button>\n      <Button type=\"submit\" disabled={isSubmitting} form=\"fuel-sale-form",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\FuelSalesFormStandardized.tsx",
        "start": 137,
        "end": 147,
        "startLoc": {
          "line": 137,
          "column": 3,
          "position": 1322
        },
        "endLoc": {
          "line": 147,
          "column": 15,
          "position": 1406
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\TankFormDialogStandardized.tsx",
        "start": 98,
        "end": 108,
        "startLoc": {
          "line": 98,
          "column": 3,
          "position": 748
        },
        "endLoc": {
          "line": 108,
          "column": 10,
          "position": 832
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ")}</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {sales.map((sale) => (\n          <TableRow key={sale.id}>\n            <TableCell>\n              {new Date(sale.sale_date).toLocaleDateString()}\n            </TableCell>\n            <TableCell>{sale.customer_name}</TableCell>\n            <TableCell>{sale.quantity_liters}L</TableCell>\n            <TableCell>${sale.price_per_liter.toFixed(2)}</TableCell>\n            <TableCell>\n              <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\fuel-management\\components\\FuelSaleList.tsx",
        "start": 28,
        "end": 41,
        "startLoc": {
          "line": 28,
          "column": 19,
          "position": 214
        },
        "endLoc": {
          "line": 41,
          "column": 2,
          "position": 340
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FuelSalesTable.tsx",
        "start": 44,
        "end": 56,
        "startLoc": {
          "line": 44,
          "column": 17,
          "position": 361
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 485
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "// Main Sale interface\nexport interface Sale {\n  id: string;\n  amount: number;\n  quantityLiters: number;\n  unitPrice: number;\n  saleDate: Date;\n  fuelType: FuelTypeCode;\n  vehiclePlate?: string;\n  customerName?: string;\n  paymentMethod: PaymentMethod;\n  paymentStatus: PaymentStatus;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date | null;\n  fillingSystemId?: string;\n  fillingSystemName?: string;\n  meterStart?: number;\n  meterEnd?: number;\n  shiftId?: string;\n}\n\n// Create Sale request\nexport interface CreateSaleRequest {\n  amount: number;\n  quantityLiters: number;\n  unitPrice: number;\n  saleDate: Date | string;\n  fuelType: FuelTypeCode;\n  vehiclePlate?: string;\n  customerName?: string;\n  paymentMethod: PaymentMethod;\n  paymentStatus: PaymentStatus;\n  notes?: string;\n  fillingSystemId",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\types\\index.ts",
        "start": 3,
        "end": 37,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 20
        },
        "endLoc": {
          "line": 37,
          "column": 16,
          "position": 259
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\types\\index.ts",
        "start": 25,
        "end": 59,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 171
        },
        "endLoc": {
          "line": 59,
          "column": 11,
          "position": 410
        }
      }
    },
    {
      "format": "typescript",
      "lines": 65,
      "fragment": "?: string;\n  fillingSystemId?: string;\n  meterStart?: number;\n  meterEnd?: number;\n  shiftId?: string;\n}\n\n// Update Sale request\nexport interface UpdateSaleRequest extends Partial<CreateSaleRequest> {\n  id: string;\n}\n\n// Sales filter options\nexport interface SalesFilters {\n  searchTerm?: string;\n  dateRange?: {\n    from: Date;\n    to?: Date;\n  };\n  fuelType?: FuelTypeCode | \"all\";\n  paymentStatus?: PaymentStatus | \"all\";\n  fillingSystem?: string | \"all\";\n  minAmount?: number;\n  maxAmount?: number;\n  minQuantity?: number;\n  maxQuantity?: number;\n}\n\n// Sales statistics summary\nexport interface SalesSummary {\n  totalSales: number;\n  totalQuantity: number;\n  averagePrice: number;\n  salesCount: number;\n  byFuelType?: Record<\n    FuelTypeCode,\n    {\n      quantity: number;\n      amount: number;\n      count: number;\n    }\n  >;\n  byPaymentMethod?: Record<\n    PaymentMethod,\n    {\n      amount: number;\n      count: number;\n    }\n  >;\n}\n\n// Export options\nexport interface SalesExportOptions {\n  startDate: string;\n  endDate: string;\n  format: \"csv\" | \"pdf\" | \"excel\";\n  includeDetails?: boolean;\n}\n\n// Export response\nexport interface SalesExportResponse {\n  url?: string;\n  data?: string;\n  filename?: string;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\types\\index.ts",
        "start": 36,
        "end": 100,
        "startLoc": {
          "line": 36,
          "column": 6,
          "position": 252
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 639
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\types\\index.ts",
        "start": 59,
        "end": 123,
        "startLoc": {
          "line": 59,
          "column": 11,
          "position": 411
        },
        "endLoc": {
          "line": 123,
          "column": 2,
          "position": 798
        }
      }
    },
    {
      "format": "javascript",
      "lines": 65,
      "fragment": "={<IconCurrencyDollar />}\n        actions={\n          <CreateButton onClick={handleCreateSale}>\n            <IconPlus className=\"mr-2 h-4 w-4\" />\n            Add Sale\n          </CreateButton>\n        }\n      />\n\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n        <MetricCard\n          title=\"Total Sales\"\n          value={formatCurrency(totalSalesAmount)}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-primary/10\"\n        />\n        <MetricCard\n          title=\"Total Liters\"\n          value={`${Math.round(totalLiters).toLocaleString()} L`}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-success/10\"\n        />\n        <MetricCard\n          title=\"Average Price\"\n          value={formatCurrency(averagePrice)}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-warning/10\"\n        />\n      </div>\n\n      <ShiftControl\n        onShiftStart={handleShiftStart}\n        onShiftEnd={handleShiftEnd}\n        isShiftOpen={!!activeShift}\n      />\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Sales Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SalesTable\n            sales={filteredSales}\n            isLoading={isLoading}\n            onEdit={(id) => {\n              const sale = filteredSales.find((s) => s.id === id);\n              if (sale) handleEdit(sale);\n            }}\n            onDelete={handleDelete}\n            onView={handleViewSale}\n            systems={systems}\n            fuelTypes={fuelTypeCategories}\n            onFiltersChange={handleFiltersChange}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Dialogs for editing/deleting sales (not creating) */}\n      <SalesDialogsStandardized\n        selectedSale={selectedSale}\n        isEditDialogOpen={isEditDialogOpen}\n        setIsEditDialogOpen={setIsEditDialogOpen}\n        isDeleteDialogOpen={isDeleteDialogOpen}\n        setIsDeleteDialogOpen={setIsDeleteDialogOpen}\n        updateSale={(data) => updateMutation.mutate(data",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesNew.tsx",
        "start": 126,
        "end": 190,
        "startLoc": {
          "line": 126,
          "column": 5,
          "position": 963
        },
        "endLoc": {
          "line": 190,
          "column": 5,
          "position": 1372
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesNew.tsx",
        "start": 126,
        "end": 190,
        "startLoc": {
          "line": 126,
          "column": 5,
          "position": 963
        },
        "endLoc": {
          "line": 190,
          "column": 2,
          "position": 1372
        }
      }
    },
    {
      "format": "tsx",
      "lines": 196,
      "fragment": "import React, { useState, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconCurrencyDollar, IconPlus } from \"@tabler/icons-react\";\n\n// Import our custom UI components\nimport { PageHeader } from \"@/core/components/ui/page-header\";\nimport { CreateButton } from \"@/core/components/ui/create-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/core/components/ui/card\";\nimport { MetricCard } from \"@/core/components/ui/cards/metric-card\";\n\n// Import existing sales hooks and components\nimport {\n  useSalesFilters,\n  useSalesMutations,\n  SalesDialogsStandardized,\n  ShiftControl,\n  SalesTable,\n} from \"@/features/sales\";\nimport { useQueryClient } from '@tanstack/react-query';\n// Import necessary services\nimport { createSale } from \"@/features/sales/services\";\nimport { useToast } from \"@/hooks\";\nimport { useShift } from \"@/features/shifts/hooks/useShift\";\nimport { Sale } from \"@/types\";\n\nexport default function SalesNew() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeShift, beginShift, endShift } = useShift();\n\n  // Get sales data and filters from existing hooks\n  const { systems, filteredSales, isLoading, refetchSales } = useSalesFilters();\n\n  // Mutations & modals from existing hook\n  const {\n    selectedSale,\n    setSelectedSale,\n    isEditDialogOpen,\n    setIsEditDialogOpen,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    handleEdit,\n    handleDelete,\n    confirmDelete,\n    updateMutation,\n    deleteMutation,\n  } = useSalesMutations();\n\n  // Define handlers for shift operations\n  const handleShiftStart = () => {\n    navigate(\"/finance/shifts/open\");\n  };\n\n  const handleShiftEnd = () => {\n    navigate(\"/finance/shifts/close\");\n  };\n\n  // Remove create sale mutation and use navigation instead\n  const handleCreateSale = () => {\n    navigate(\"/sales/create\");\n  };\n\n  // Calculate summary metrics\n  const totalSalesAmount = filteredSales.reduce(\n    (sum: number, sale: Sale) => sum + (sale.total_sales || 0),\n    0\n  );\n\n  const totalLiters = filteredSales.reduce(\n    (sum: number, sale: Sale) => sum + (sale.quantity || 0),\n    0\n  );\n\n  const averagePrice = totalLiters > 0 ? totalSalesAmount / totalLiters : 0;\n\n  // Format currency values\n  const formatCurrency = (value: number | undefined | null) => {\n    if (value === undefined || value === null) return \"0 ֏\";\n    return `${value.toLocaleString()} ֏`;\n  };\n\n  // Handle view sale details (edit only existing sales)\n  const handleViewSale = (sale: Sale) => {\n    // If creating a new sale, navigate to the create page\n    if (!sale.id) {\n      navigate(\"/sales/create\");\n    } else {\n      // For existing sales, open the edit dialog\n      setSelectedSale(sale);\n      setIsEditDialogOpen(true);\n    }\n  };\n\n  // Extract unique fuel types for filtering\n  const fuelTypeCategories = useMemo(() => {\n    const uniqueFuelTypes = Array.from(\n      new Set(filteredSales.map((sale) => sale.fuel_type))\n    )\n      .filter(Boolean)\n      .sort();\n\n    return uniqueFuelTypes.map((type) => ({\n      id: type,\n      name: type,\n    }));\n  }, [filteredSales]);\n\n  // Handle filters change\n  const handleFiltersChange = (filters: SalesFilters) => {\n    // Handle filter changes here\n    console.log(\"Filters changed:\", filters);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      <PageHeader\n        title=\"Sales Management\"\n        icon={<IconCurrencyDollar />}\n        actions={\n          <CreateButton onClick={handleCreateSale}>\n            <IconPlus className=\"mr-2 h-4 w-4\" />\n            Add Sale\n          </CreateButton>\n        }\n      />\n\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n        <MetricCard\n          title=\"Total Sales\"\n          value={formatCurrency(totalSalesAmount)}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-primary/10\"\n        />\n        <MetricCard\n          title=\"Total Liters\"\n          value={`${Math.round(totalLiters).toLocaleString()} L`}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-success/10\"\n        />\n        <MetricCard\n          title=\"Average Price\"\n          value={formatCurrency(averagePrice)}\n          icon={<IconCurrencyDollar className=\"h-6 w-6\" />}\n          className=\"bg-warning/10\"\n        />\n      </div>\n\n      <ShiftControl\n        onShiftStart={handleShiftStart}\n        onShiftEnd={handleShiftEnd}\n        isShiftOpen={!!activeShift}\n      />\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Sales Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SalesTable\n            sales={filteredSales}\n            isLoading={isLoading}\n            onEdit={(id) => {\n              const sale = filteredSales.find((s) => s.id === id);\n              if (sale) handleEdit(sale);\n            }}\n            onDelete={handleDelete}\n            onView={handleViewSale}\n            systems={systems}\n            fuelTypes={fuelTypeCategories}\n            onFiltersChange={handleFiltersChange}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Dialogs for editing/deleting sales (not creating) */}\n      <SalesDialogsStandardized\n        selectedSale={selectedSale}\n        isEditDialogOpen={isEditDialogOpen}\n        setIsEditDialogOpen={setIsEditDialogOpen}\n        isDeleteDialogOpen={isDeleteDialogOpen}\n        setIsDeleteDialogOpen={setIsDeleteDialogOpen}\n        updateSale={(data) => updateMutation.mutate(data)}\n        confirmDelete={confirmDelete}\n        isLoading={deleteMutation.isPending}\n      />\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesNew.tsx",
        "start": 1,
        "end": 196,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 196,
          "column": 2,
          "position": 1401
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesNew.tsx",
        "start": 1,
        "end": 196,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 196,
          "column": 2,
          "position": 1412
        }
      }
    },
    {
      "format": "javascript",
      "lines": 91,
      "fragment": "={handleRefresh} className=\"mx-auto\">\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Retry\r\n          </Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n            Sales Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Monitor sales performance, customers, and product analytics\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={handleRefresh}\r\n            disabled={metricsLoading}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            New Sale\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Metrics Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\r\n        {metricCards.map((metric, index) => (\r\n          <motion.div\r\n            key={metric.title}\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: index * 0.1 }}\r\n          >\r\n            <Card className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\r\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                      {metric.title}\r\n                    </p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                      {metricsLoading ? '...' : metric.value}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {metric.trend && (\r\n                  <div className={`flex items-center space-x-1 ${metric.trend > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {metric.trend > 0 ? (\r\n                      <TrendingUp className=\"h-4 w-4\" />\r\n                    ) : (\r\n                      <TrendingDown className=\"h-4 w-4\" />\r\n                    )}\r\n                    <span className=\"text-sm font-medium\">\r\n                      {Math.abs(metric.trend).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                {metric.description}\r\n              </p>\r\n            </Card>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* View Mode Toggle */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setViewMode('sales')}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                viewMode ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 332,
        "end": 422,
        "startLoc": {
          "line": 332,
          "column": 8,
          "position": 3305
        },
        "endLoc": {
          "line": 422,
          "column": 26,
          "position": 4133
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 315,
        "end": 422,
        "startLoc": {
          "line": 315,
          "column": 8,
          "position": 2897
        },
        "endLoc": {
          "line": 422,
          "column": 26,
          "position": 3725
        }
      }
    },
    {
      "format": "javascript",
      "lines": 241,
      "fragment": "}`}\r\n            >\r\n              <Package className=\"h-4 w-4 mr-2 inline\" />\r\n              Products\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Search and Filter */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            <Input\r\n              placeholder={`Search ${viewMode}...`}\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-10 w-64\"\r\n            />\r\n          </div>\r\n          {viewMode === 'sales' && (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Filter className=\"h-4 w-4 text-gray-400\" />\r\n              <select\r\n                value={selectedFilter}\r\n                onChange={(e) => setSelectedFilter(e.target.value as any)}\r\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-sm\"\r\n              >\r\n                <option value=\"all\">All Sales</option>\r\n                <option value=\"completed\">Completed</option>\r\n                <option value=\"pending\">Pending</option>\r\n                <option value=\"refunded\">Refunded</option>\r\n              </select>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content based on view mode */}\r\n      {viewMode === 'sales' ? (\r\n        // Sales View\r\n        <div className=\"space-y-4\">\r\n          <AnimatePresence>\r\n            {filteredSales.map((sale, index) => {\r\n              const StatusIcon = getStatusIcon(sale.status);\r\n              return (\r\n                <motion.div\r\n                  key={sale.id}\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  exit={{ opacity: 0, y: -20 }}\r\n                  transition={{ delay: index * 0.05 }}\r\n                >\r\n                  <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\r\n                          <Receipt className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                            {sale.transaction_id}\r\n                          </h3>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {sale.customer_name} • {formatDate(sale.created_at)}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-6\">\r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Subtotal</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            ${sale.subtotal.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tax</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            ${sale.tax.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total</p>\r\n                          <p className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\r\n                            ${sale.total.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Payment</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            {sale.payment_method}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <Badge variant={getStatusColor(sale.status) as any} className=\"capitalize\">\r\n                          <StatusIcon className=\"h-3 w-3 mr-1\" />\r\n                          {sale.status}\r\n                        </Badge>\r\n                        \r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <MoreVertical className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Products */}\r\n                    <div className=\"border-t pt-4\">\r\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Products:</p>\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\r\n                        {sale.products.map((product, i) => (\r\n                          <div key={i} className=\"flex justify-between text-sm\">\r\n                            <span className=\"text-gray-700 dark:text-gray-300\">\r\n                              {product.quantity}x {product.name}\r\n                            </span>\r\n                            <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                              ${product.total.toFixed(2)}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {sale.notes && (\r\n                      <div className=\"border-t pt-4 mt-4\">\r\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                          <strong>Notes:</strong> {sale.notes}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </Card>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </AnimatePresence>\r\n        </div>\r\n      ) : viewMode === 'customers' ? (\r\n        // Customers View\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n          <AnimatePresence>\r\n            {filteredCustomers.map((customer, index) => (\r\n              <motion.div\r\n                key={customer.id}\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.95 }}\r\n                transition={{ delay: index * 0.05 }}\r\n              >\r\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\r\n                        <span className=\"text-lg font-semibold text-gray-600 dark:text-gray-300\">\r\n                          {customer.name.split(' ').map(n => n[0]).join('')}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                          {customer.name}\r\n                        </h3>\r\n                        <p className={`text-xs px-2 py-1 rounded-full ${getTierColor(customer.tier)} capitalize`}>\r\n                          {customer.tier}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Customer Details */}\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                      <Mail className=\"h-4 w-4\" />\r\n                      <span>{customer.email}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                      <Phone className=\"h-4 w-4\" />\r\n                      <span>{customer.phone}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                        <DollarSign className=\"h-4 w-4\" />\r\n                        <span>${customer.total_spent.toFixed(2)} spent</span>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                          {customer.loyalty_points} pts\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      {customer.total_purchases} purchases • Last: {formatDate(customer.last_purchase)}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              </motion.div>\r\n            ))}\r\n          </AnimatePresence>\r\n        </div>\r\n      ) : (\r\n        // Products View\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n          <AnimatePresence>\r\n            {filteredProducts.map((product, index) => (\r\n              <motion.div\r\n                key={product.id}\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.95 }}\r\n                transition={{ delay: index * 0.05 }}\r\n              >\r\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <div>\r\n                      <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                        {product.name}\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                        {product.category}\r\n                      </p>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Product Details */}\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Price:</span>\r\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                        ${product.price.toFixed(2)}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Stock:</span>\r\n                      <span className={`font-medium ${product.stock_quantity < 10 ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}`}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 447,
        "end": 687,
        "startLoc": {
          "line": 447,
          "column": 15,
          "position": 4278
        },
        "endLoc": {
          "line": 687,
          "column": 2,
          "position": 6650
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 419,
        "end": 687,
        "startLoc": {
          "line": 419,
          "column": 15,
          "position": 3718
        },
        "endLoc": {
          "line": 687,
          "column": 2,
          "position": 6030
        }
      }
    },
    {
      "format": "tsx",
      "lines": 355,
      "fragment": "import React, { useState } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport {\r\n  DollarSign,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  ShoppingCart,\r\n  Users,\r\n  CreditCard,\r\n  BarChart3,\r\n  Calendar,\r\n  Filter,\r\n  Search,\r\n  RefreshCw,\r\n  Plus,\r\n  MoreVertical,\r\n  Star,\r\n  Award,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  XCircle,\r\n  Clock,\r\n  Receipt,\r\n  MapPin,\r\n  Phone,\r\n  Mail,\r\n  Package\r\n} from 'lucide-react';\r\nimport { Badge } from '../../../core/components/ui/primitives/badge';\r\nimport { Card } from '../../../core/components/ui/card';\r\nimport { Button } from '../../../core/components/ui/button';\r\nimport { Input } from '../../../core/components/ui/input';\r\nimport { useToast } from '../../../core/hooks/useToast';\r\nimport { supabase } from '../../../core/api/supabase';\r\n\r\n// Types\r\ninterface SalesMetrics {\r\n  total_sales: number;\r\n  sales_count: number;\r\n  average_transaction: number;\r\n  daily_growth: number;\r\n  weekly_growth: number;\r\n  monthly_growth: number;\r\n  top_products: Array<{\r\n    product: string;\r\n    sales: number;\r\n    revenue: number;\r\n    growth: number;\r\n  }>;\r\n  payment_methods: Array<{\r\n    method: string;\r\n    count: number;\r\n    amount: number;\r\n    percentage: number;\r\n  }>;\r\n  hourly_sales: Array<{\r\n    hour: number;\r\n    sales: number;\r\n    transactions: number;\r\n  }>;\r\n}\r\n\r\ninterface Sale {\r\n  id: string;\r\n  transaction_id: string;\r\n  customer_name: string;\r\n  customer_email?: string;\r\n  products: Array<{\r\n    name: string;\r\n    quantity: number;\r\n    unit_price: number;\r\n    total: number;\r\n  }>;\r\n  subtotal: number;\r\n  tax: number;\r\n  total: number;\r\n  payment_method: string;\r\n  status: 'completed' | 'pending' | 'cancelled' | 'refunded';\r\n  created_at: string;\r\n  cashier_name: string;\r\n  notes?: string;\r\n}\r\n\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  total_purchases: number;\r\n  total_spent: number;\r\n  last_purchase: string;\r\n  loyalty_points: number;\r\n  tier: 'bronze' | 'silver' | 'gold' | 'platinum';\r\n  created_at: string;\r\n}\r\n\r\ninterface Product {\r\n  id: string;\r\n  name: string;\r\n  category: string;\r\n  price: number;\r\n  cost: number;\r\n  profit_margin: number;\r\n  stock_quantity: number;\r\n  units_sold: number;\r\n  revenue: number;\r\n  last_sold: string;\r\n}\r\n\r\n// Sales service for Supabase integration\r\nconst salesService = {\r\n  getMetrics: async (): Promise<SalesMetrics> => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'get_metrics' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  getSales: async (): Promise<Sale[]> => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'get_sales' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  getCustomers: async (): Promise<Customer[]> => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'get_customers' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  getProducts: async (): Promise<Product[]> => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'get_products' }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  createSale: async (saleData: Partial<Sale>) => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'create_sale', ...saleData }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  refundSale: async (saleId: string) => {\r\n    const { data, error } = await supabase.functions.invoke('sales-analytics', {\r\n      body: { action: 'refund_sale', sale_id: saleId }\r\n    });\r\n    if (error) throw error;\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const SalesDashboard: React.FC = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedFilter, setSelectedFilter] = useState<'all' | 'completed' | 'pending' | 'refunded'>('all');\r\n  const [viewMode, setViewMode] = useState<'sales' | 'customers' | 'products'>('sales');\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useToast();\r\n\r\n  // Queries\r\n  const { data: metrics, isLoading: metricsLoading, error: metricsError } = useQuery({\r\n    queryKey: ['sales-metrics'],\r\n    queryFn: salesService.getMetrics,\r\n    refetchInterval: 30000,\r\n  });\r\n\r\n  const { data: sales = [], isLoading: salesLoading } = useQuery({\r\n    queryKey: ['sales'],\r\n    queryFn: salesService.getSales,\r\n    refetchInterval: 60000,\r\n  });\r\n\r\n  const { data: customers = [], isLoading: customersLoading } = useQuery({\r\n    queryKey: ['customers'],\r\n    queryFn: salesService.getCustomers,\r\n    refetchInterval: 300000,\r\n  });\r\n\r\n  const { data: products = [], isLoading: productsLoading } = useQuery({\r\n    queryKey: ['products'],\r\n    queryFn: salesService.getProducts,\r\n    refetchInterval: 300000,\r\n  });\r\n\r\n  // Mutations\r\n  const refundMutation = useMutation({\r\n    mutationFn: ({ saleId }: { saleId: string }) => salesService.refundSale(saleId),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['sales'] });\r\n      queryClient.invalidateQueries({ queryKey: ['sales-metrics'] });\r\n      toast({\r\n        title: 'Sale Refunded',\r\n        description: 'The sale has been refunded successfully.',\r\n      });\r\n    },\r\n    onError: () => {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to refund sale. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    },\r\n  });\r\n\r\n  // Filter data\r\n  const filteredSales = sales.filter(sale => {\r\n    const matchesSearch = sale.customer_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         sale.transaction_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         sale.products.some(p => p.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    const matchesFilter = selectedFilter === 'all' || sale.status === selectedFilter;\r\n    return matchesSearch && matchesFilter;\r\n  });\r\n\r\n  const filteredCustomers = customers.filter(customer => {\r\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         customer.email.toLowerCase().includes(searchTerm.toLowerCase());\r\n    return matchesSearch;\r\n  });\r\n\r\n  const filteredProducts = products.filter(product => {\r\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         product.category.toLowerCase().includes(searchTerm.toLowerCase());\r\n    return matchesSearch;\r\n  });\r\n\r\n  // Metric cards data\r\n  const metricCards = [\r\n    {\r\n      title: 'Total Sales',\r\n      value: metrics?.total_sales ? `$${metrics.total_sales.toLocaleString()}` : '--',\r\n      icon: DollarSign,\r\n      color: 'green',\r\n      description: 'Today\\'s revenue',\r\n      trend: metrics?.daily_growth || null\r\n    },\r\n    {\r\n      title: 'Transactions',\r\n      value: metrics?.sales_count?.toString() || '--',\r\n      icon: ShoppingCart,\r\n      color: 'blue',\r\n      description: 'Number of sales',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'Avg. Transaction',\r\n      value: metrics?.average_transaction ? `$${metrics.average_transaction.toFixed(2)}` : '--',\r\n      icon: BarChart3,\r\n      color: 'purple',\r\n      description: 'Per transaction',\r\n      trend: metrics?.weekly_growth || null\r\n    },\r\n    {\r\n      title: 'Growth',\r\n      value: metrics?.monthly_growth ? `${metrics.monthly_growth.toFixed(1)}%` : '--',\r\n      icon: TrendingUp,\r\n      color: 'orange',\r\n      description: 'Monthly growth',\r\n      trend: metrics?.monthly_growth || null\r\n    }\r\n  ];\r\n\r\n  const handleRefresh = () => {\r\n    queryClient.invalidateQueries({ queryKey: ['sales-metrics'] });\r\n    queryClient.invalidateQueries({ queryKey: ['sales'] });\r\n    queryClient.invalidateQueries({ queryKey: ['customers'] });\r\n    queryClient.invalidateQueries({ queryKey: ['products'] });\r\n    toast({\r\n      title: 'Data Refreshed',\r\n      description: 'All sales data has been updated.',\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'default';\r\n      case 'pending': return 'default';\r\n      case 'cancelled': return 'destructive';\r\n      case 'refunded': return 'destructive';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return CheckCircle;\r\n      case 'pending': return Clock;\r\n      case 'cancelled': return XCircle;\r\n      case 'refunded': return XCircle;\r\n      default: return Clock;\r\n    }\r\n  };\r\n\r\n  const getTierColor = (tier: string) => {\r\n    switch (tier) {\r\n      case 'platinum': return 'text-purple-600 bg-purple-100 dark:bg-purple-900/20';\r\n      case 'gold': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20';\r\n      case 'silver': return 'text-gray-600 bg-gray-100 dark:bg-gray-900/20';\r\n      case 'bronze': return 'text-orange-600 bg-orange-100 dark:bg-orange-900/20';\r\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/20';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  if (metricsError) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <Card className=\"p-8 text-center\">\r\n          <AlertCircle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\r\n            Error Loading Sales Data\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n            We couldn't load the sales data. Please try again.\r\n          </p>\r\n          <Button onClick={handleRefresh} className=\"mx-auto\">\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Retry\r\n          </Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n            Sales Dashboard\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Monitor sales performance, customers, and product analytics\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button \r\n            ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 1,
        "end": 355,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 355,
          "column": 13,
          "position": 3487
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 1,
        "end": 355,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 355,
          "column": 13,
          "position": 3134
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": ">\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${metricsLoading ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            New Sale\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Metrics Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\r\n        {metricCards.map((metric, index) => (\r\n          <motion.div\r\n            ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 359,
        "end": 374,
        "startLoc": {
          "line": 359,
          "column": 11,
          "position": 3512
        },
        "endLoc": {
          "line": 374,
          "column": 13,
          "position": 3639
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 359,
        "end": 374,
        "startLoc": {
          "line": 359,
          "column": 11,
          "position": 3159
        },
        "endLoc": {
          "line": 374,
          "column": 13,
          "position": 3272
        }
      }
    },
    {
      "format": "tsx",
      "lines": 43,
      "fragment": ">\r\n            <Card className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className={`p-2 rounded-lg bg-${metric.color}-100 dark:bg-${metric.color}-900/20`}>\r\n                    <metric.icon className={`h-5 w-5 text-${metric.color}-600 dark:text-${metric.color}-400`} />\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                      {metric.title}\r\n                    </p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                      {metricsLoading ? '...' : metric.value}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {metric.trend && (\r\n                  <div className={`flex items-center space-x-1 ${metric.trend > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                    {metric.trend > 0 ? (\r\n                      <TrendingUp className=\"h-4 w-4\" />\r\n                    ) : (\r\n                      <TrendingDown className=\"h-4 w-4\" />\r\n                    )}\r\n                    <span className=\"text-sm font-medium\">\r\n                      {Math.abs(metric.trend).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                {metric.description}\r\n              </p>\r\n            </Card>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* View Mode Toggle */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className=\"flex bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\r\n            <button\r\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 378,
        "end": 420,
        "startLoc": {
          "line": 378,
          "column": 11,
          "position": 3696
        },
        "endLoc": {
          "line": 420,
          "column": 15,
          "position": 4113
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsDashboard.tsx",
        "start": 361,
        "end": 403,
        "startLoc": {
          "line": 361,
          "column": 11,
          "position": 3252
        },
        "endLoc": {
          "line": 403,
          "column": 15,
          "position": 3623
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ">\r\n              <Package className=\"h-4 w-4 mr-2 inline\" />\r\n              Products\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Search and Filter */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            <Input\r\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 448,
        "end": 460,
        "startLoc": {
          "line": 448,
          "column": 13,
          "position": 4282
        },
        "endLoc": {
          "line": 460,
          "column": 15,
          "position": 4368
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 448,
        "end": 460,
        "startLoc": {
          "line": 448,
          "column": 13,
          "position": 3866
        },
        "endLoc": {
          "line": 460,
          "column": 15,
          "position": 3941
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": ">\r\n                <option value=\"all\">All Sales</option>\r\n                <option value=\"completed\">Completed</option>\r\n                <option value=\"pending\">Pending</option>\r\n                <option value=\"refunded\">Refunded</option>\r\n              </select>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content based on view mode */}\r\n      {viewMode === 'sales' ? (\r\n        // Sales View\r\n        <div className=\"space-y-4\">\r\n          <AnimatePresence>\r\n            {filteredSales.map((sale, index) => {\r\n              const StatusIcon = getStatusIcon(sale.status);\r\n              return (\r\n                <motion.div\r\n                  ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 473,
        "end": 493,
        "startLoc": {
          "line": 473,
          "column": 15,
          "position": 4495
        },
        "endLoc": {
          "line": 493,
          "column": 19,
          "position": 4679
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 473,
        "end": 493,
        "startLoc": {
          "line": 473,
          "column": 15,
          "position": 4063
        },
        "endLoc": {
          "line": 493,
          "column": 19,
          "position": 4228
        }
      }
    },
    {
      "format": "tsx",
      "lines": 94,
      "fragment": ">\r\n                  <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\r\n                          <Receipt className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                            {sale.transaction_id}\r\n                          </h3>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {sale.customer_name} • {formatDate(sale.created_at)}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center space-x-6\">\r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Subtotal</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            ${sale.subtotal.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tax</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            ${sale.tax.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total</p>\r\n                          <p className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\r\n                            ${sale.total.toFixed(2)}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <div className=\"text-center\">\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Payment</p>\r\n                          <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            {sale.payment_method}\r\n                          </p>\r\n                        </div>\r\n                        \r\n                        <Badge variant={getStatusColor(sale.status) as any} className=\"capitalize\">\r\n                          <StatusIcon className=\"h-3 w-3 mr-1\" />\r\n                          {sale.status}\r\n                        </Badge>\r\n                        \r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <MoreVertical className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Products */}\r\n                    <div className=\"border-t pt-4\">\r\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Products:</p>\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\r\n                        {sale.products.map((product, i) => (\r\n                          <div key={i} className=\"flex justify-between text-sm\">\r\n                            <span className=\"text-gray-700 dark:text-gray-300\">\r\n                              {product.quantity}x {product.name}\r\n                            </span>\r\n                            <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                              ${product.total.toFixed(2)}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {sale.notes && (\r\n                      <div className=\"border-t pt-4 mt-4\">\r\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                          <strong>Notes:</strong> {sale.notes}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </Card>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </AnimatePresence>\r\n        </div>\r\n      ) : viewMode === 'customers' ? (\r\n        // Customers View\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n          <AnimatePresence>\r\n            {filteredCustomers.map((customer, index) => (\r\n              <motion.div\r\n                ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 498,
        "end": 591,
        "startLoc": {
          "line": 498,
          "column": 17,
          "position": 4754
        },
        "endLoc": {
          "line": 591,
          "column": 17,
          "position": 5631
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 498,
        "end": 591,
        "startLoc": {
          "line": 498,
          "column": 17,
          "position": 4303
        },
        "endLoc": {
          "line": 591,
          "column": 17,
          "position": 5096
        }
      }
    },
    {
      "format": "tsx",
      "lines": 61,
      "fragment": ">\r\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center\">\r\n                        <span className=\"text-lg font-semibold text-gray-600 dark:text-gray-300\">\r\n                          {customer.name.split(' ').map(n => n[0]).join('')}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                          {customer.name}\r\n                        </h3>\r\n                        <p className={`text-xs px-2 py-1 rounded-full ${getTierColor(customer.tier)} capitalize`}>\r\n                          {customer.tier}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Customer Details */}\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                      <Mail className=\"h-4 w-4\" />\r\n                      <span>{customer.email}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                      <Phone className=\"h-4 w-4\" />\r\n                      <span>{customer.phone}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                        <DollarSign className=\"h-4 w-4\" />\r\n                        <span>${customer.total_spent.toFixed(2)} spent</span>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                          {customer.loyalty_points} pts\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      {customer.total_purchases} purchases • Last: {formatDate(customer.last_purchase)}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              </motion.div>\r\n            ))}\r\n          </AnimatePresence>\r\n        </div>\r\n      ) : (\r\n        // Products View\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n          <AnimatePresence>\r\n            {filteredProducts.map((product, index) => (\r\n              <motion.div\r\n                ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 596,
        "end": 656,
        "startLoc": {
          "line": 596,
          "column": 15,
          "position": 5705
        },
        "endLoc": {
          "line": 656,
          "column": 17,
          "position": 6301
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 596,
        "end": 656,
        "startLoc": {
          "line": 596,
          "column": 15,
          "position": 5170
        },
        "endLoc": {
          "line": 656,
          "column": 17,
          "position": 5707
        }
      }
    },
    {
      "format": "tsx",
      "lines": 89,
      "fragment": ">\r\n                <Card className=\"p-6 hover:shadow-lg transition-shadow duration-200\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <div>\r\n                      <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                        {product.name}\r\n                      </h3>\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                        {product.category}\r\n                      </p>\r\n                    </div>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* Product Details */}\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Price:</span>\r\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                        ${product.price.toFixed(2)}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Stock:</span>\r\n                      <span className={`font-medium ${product.stock_quantity < 10 ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}`}>\r\n                        {product.stock_quantity} units\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Units Sold:</span>\r\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                        {product.units_sold}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Revenue:</span>\r\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                        ${product.revenue.toFixed(2)}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Margin:</span>\r\n                      <span className=\"font-medium text-green-600\">\r\n                        {product.profit_margin.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              </motion.div>\r\n            ))}\r\n          </AnimatePresence>\r\n        </div>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {(salesLoading || customersLoading || productsLoading || metricsLoading) && (\r\n        <div className=\"text-center py-8\">\r\n          <RefreshCw className=\"h-8 w-8 animate-spin mx-auto text-gray-400 mb-4\" />\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading sales data...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Empty State */}\r\n      {!salesLoading && !customersLoading && !productsLoading && \r\n       ((viewMode === 'sales' && filteredSales.length === 0) || \r\n        (viewMode === 'customers' && filteredCustomers.length === 0) ||\r\n        (viewMode === 'products' && filteredProducts.length === 0)) && (\r\n        <Card className=\"p-8 text-center\">\r\n          <AlertCircle className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\r\n            No {viewMode} Found\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n            {searchTerm || selectedFilter !== 'all' \r\n              ? `Try adjusting your search or filter criteria.` \r\n              : `Start by adding your first ${viewMode.slice(0, -1)}.`\r\n            }\r\n          </p>\r\n          <Button>\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Add {viewMode === 'sales' ? 'Sale' : viewMode === 'customers' ? 'Customer' : 'Product'}\r\n          </Button>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesDashboard.tsx",
        "start": 661,
        "end": 749,
        "startLoc": {
          "line": 661,
          "column": 15,
          "position": 6375
        },
        "endLoc": {
          "line": 749,
          "column": 2,
          "position": 7291
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesDashboard.tsx",
        "start": 661,
        "end": 749,
        "startLoc": {
          "line": 661,
          "column": 15,
          "position": 5781
        },
        "endLoc": {
          "line": 749,
          "column": 2,
          "position": 6613
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": "={t(\"sales.newSale\")}\n        actions={\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <IconArrowLeft className=\"mr-2 h-4 w-4\" />\n              {t(\"common.back\")}\n            </Button>\n          </div>\n        }\n      />\n\n      <ShiftControl\n        onShiftStart={() => {}}\n        onShiftEnd={() => {}}\n        isShiftOpen={false}\n      />\n\n      <Card className=\"max-w-3xl mx-auto\">\n        <CardContent className=\"pt-6\">\n          <SalesFormStandardized onSubmit={handleSubmit}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesCreate.tsx",
        "start": 64,
        "end": 83,
        "startLoc": {
          "line": 64,
          "column": 6,
          "position": 568
        },
        "endLoc": {
          "line": 83,
          "column": 2,
          "position": 704
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesCreate.tsx",
        "start": 79,
        "end": 98,
        "startLoc": {
          "line": 79,
          "column": 6,
          "position": 770
        },
        "endLoc": {
          "line": 98,
          "column": 2,
          "position": 906
        }
      }
    },
    {
      "format": "tsx",
      "lines": 35,
      "fragment": ";\n\nexport default function SalesCreate() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Add create sale mutation\n  const createSaleMutation = useMutation({\n    mutationFn: createSale,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"sales.createSuccess\"),\n      });\n\n      // Navigate back to the sales page\n      navigate(\"/sales\");\n    },\n    onError: (error: unknown) => {\n      console.error(\"Create error:\", error);\n      toast({\n        title: t(\"common.error\"),\n        description: error instanceof Error ? error.message : t(\"sales.createError\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: CreateSaleRequest",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesCreate.tsx",
        "start": 13,
        "end": 47,
        "startLoc": {
          "line": 13,
          "column": 10,
          "position": 149
        },
        "endLoc": {
          "line": 47,
          "column": 18,
          "position": 454
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesCreate.tsx",
        "start": 14,
        "end": 48,
        "startLoc": {
          "line": 14,
          "column": 25,
          "position": 168
        },
        "endLoc": {
          "line": 48,
          "column": 14,
          "position": 473
        }
      }
    },
    {
      "format": "tsx",
      "lines": 40,
      "fragment": ");\n      return true; // Indicate submission was successful\n    } catch (error) {\n      // Error is already handled by createSaleMutation.onError\n      return false; // Indicate submission failed\n    }\n  };\n\n  const handleCancel = () => {\n    navigate(\"/sales\");\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      <PageHeader\n        title={t(\"sales.newSale\")}\n        actions={\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <IconArrowLeft className=\"mr-2 h-4 w-4\" />\n              {t(\"common.back\")}\n            </Button>\n          </div>\n        }\n      />\n\n      <ShiftControl\n        onShiftStart={() => {}}\n        onShiftEnd={() => {}}\n        isShiftOpen={false}\n      />\n\n      <Card className=\"max-w-3xl mx-auto\">\n        <CardContent className=\"pt-6\">\n          <SalesFormStandardized onSubmit={handleSubmit} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\SalesCreate.tsx",
        "start": 49,
        "end": 88,
        "startLoc": {
          "line": 49,
          "column": 5,
          "position": 480
        },
        "endLoc": {
          "line": 88,
          "column": 2,
          "position": 727
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesCreate.tsx",
        "start": 64,
        "end": 103,
        "startLoc": {
          "line": 64,
          "column": 9,
          "position": 682
        },
        "endLoc": {
          "line": 103,
          "column": 2,
          "position": 929
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ">\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Analytics */}\n      <div className=\"mb-8\">\n        <h3 className=\"text-lg font-semibold text-black dark:text-[#EEEFE7] mb-4\">\n          Performance Analytics\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {performanceStats.map((stat, index) => (\n            <StatsCard\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\RevenuePage.tsx",
        "start": 396,
        "end": 409,
        "startLoc": {
          "line": 396,
          "column": 7,
          "position": 2808
        },
        "endLoc": {
          "line": 409,
          "column": 15,
          "position": 2894
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\pages\\ShiftsDashboard.tsx",
        "start": 711,
        "end": 724,
        "startLoc": {
          "line": 711,
          "column": 4,
          "position": 6578
        },
        "endLoc": {
          "line": 724,
          "column": 15,
          "position": 6676
        }
      }
    },
    {
      "format": "javascript",
      "lines": 44,
      "fragment": "={breadcrumbItems}\n    >\n      {/* Quick Stats Overview */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {quickStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              title={stat.title}\n              value={stat.value}\n              icon={stat.icon}\n              color={stat.color}\n              description={stat.description}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Finance Modules */}\n      <div className=\"space-y-8\">\n        {Object.entries(groupedModules).map(([category, modules]) => (\n          <div key={category}>\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\n                {category}\n              </h2>\n              <div className=\"h-px bg-gradient-to-r from-green-500 via-blue-500 to-transparent dark:from-green-400 dark:via-blue-400 dark:to-transparent\"></div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {modules.map((module) => (\n                <ModuleCard\n                  key={module.id}\n                  id={module.id}\n                  title={module.title}\n                  description={module.description}\n                  path={module.path}\n                  icon={module.icon}\n                  badge={module.badge}\n                  stats={module.stats}\n                  color={module.color}\n                  bgGradient={module.bgGradient}\n                  iconGradient={module.iconGradient}\n                  textColor={module.textColor}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 314,
        "end": 357,
        "startLoc": {
          "line": 314,
          "column": 16,
          "position": 2174
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 2520
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 384,
        "end": 427,
        "startLoc": {
          "line": 384,
          "column": 16,
          "position": 2687
        },
        "endLoc": {
          "line": 427,
          "column": 2,
          "position": 3033
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "{\n  id: string;\n  title: string;\n  description: string;\n  path: string;\n  icon: React.ComponentType<any>;\n  category?: string;\n  badge?: string;\n  stats?: {\n    count: string;\n    label: string;\n  };\n  color: string;\n  bgGradient: string;\n  iconGradient: string;\n  textColor: string;\n}\n\nconst financeModules",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 26,
        "end": 44,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 136
        },
        "endLoc": {
          "line": 44,
          "column": 15,
          "position": 252
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 141
        },
        "endLoc": {
          "line": 45,
          "column": 16,
          "position": 257
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ".reduce((acc, module) => {\n    const category = module.category || 'Other';\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(module);\n    return acc;\n  }, {} as Record<string, FinanceModule",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 270,
        "end": 277,
        "startLoc": {
          "line": 270,
          "column": 15,
          "position": 1877
        },
        "endLoc": {
          "line": 277,
          "column": 14,
          "position": 1967
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 340,
        "end": 347,
        "startLoc": {
          "line": 340,
          "column": 16,
          "position": 2390
        },
        "endLoc": {
          "line": 347,
          "column": 15,
          "position": 2480
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "\"\n      breadcrumbItems={breadcrumbItems}\n    >\n      {/* Quick Stats Overview */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {quickStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              title={stat.title}\n              value={stat.value}\n              icon={stat.icon}\n              color={stat.color}\n              description={stat.description}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Finance Modules */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 313,
        "end": 332,
        "startLoc": {
          "line": 313,
          "column": 77,
          "position": 2171
        },
        "endLoc": {
          "line": 332,
          "column": 22,
          "position": 2295
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 383,
        "end": 402,
        "startLoc": {
          "line": 383,
          "column": 92,
          "position": 2684
        },
        "endLoc": {
          "line": 402,
          "column": 23,
          "position": 2808
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "}\n      <div className=\"space-y-8\">\n        {Object.entries(groupedModules).map(([category, modules]) => (\n          <div key={category}>\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\n                {category}\n              </h2>\n              <div className=\"h-px bg-gradient-to-r from-green-500 via-blue-500 to-transparent dark:from-green-400 dark:via-blue-400 dark:to-transparent",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 332,
        "end": 340,
        "startLoc": {
          "line": 332,
          "column": 22,
          "position": 2296
        },
        "endLoc": {
          "line": 340,
          "column": 123,
          "position": 2383
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 402,
        "end": 410,
        "startLoc": {
          "line": 402,
          "column": 23,
          "position": 2809
        },
        "endLoc": {
          "line": 410,
          "column": 125,
          "position": 2896
        }
      }
    },
    {
      "format": "tsx",
      "lines": 27,
      "fragment": "\"></div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {modules.map((module) => (\n                <ModuleCard\n                  key={module.id}\n                  id={module.id}\n                  title={module.title}\n                  description={module.description}\n                  path={module.path}\n                  icon={module.icon}\n                  badge={module.badge}\n                  stats={module.stats}\n                  color={module.color}\n                  bgGradient={module.bgGradient}\n                  iconGradient={module.iconGradient}\n                  textColor={module.textColor}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </WindowContainer>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinancePage.tsx",
        "start": 340,
        "end": 366,
        "startLoc": {
          "line": 340,
          "column": 123,
          "position": 2384
        },
        "endLoc": {
          "line": 366,
          "column": 2,
          "position": 2558
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 410,
        "end": 436,
        "startLoc": {
          "line": 410,
          "column": 125,
          "position": 2897
        },
        "endLoc": {
          "line": 436,
          "column": 2,
          "position": 3071
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "})}\n            </p>\n          </CardContent>\n          <CardFooter>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-between\"\n              onClick={() => navigate(\"/finance/sales\")}\n            >\n              {t(\"common.manage\")}\n              <ArrowRight className=\"h-4 w-4\" />\n            </Button>\n          </CardFooter>\n        </Card>\n\n        {/* Expenses Card */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\FinanceDashboard.tsx",
        "start": 122,
        "end": 137,
        "startLoc": {
          "line": 122,
          "column": 15,
          "position": 929
        },
        "endLoc": {
          "line": 137,
          "column": 20,
          "position": 1018
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\FinanceDashboard.tsx",
        "start": 88,
        "end": 103,
        "startLoc": {
          "line": 88,
          "column": 2,
          "position": 674
        },
        "endLoc": {
          "line": 103,
          "column": 17,
          "position": 763
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "({\n        date: new Date().toISOString().split('T')[0],\n        amount: 0,\n        category: 'utilities' as ExpenseCategory,\n        description: '',\n        payment_status: 'pending',\n        payment_method: 'cash',\n        invoice_number: '',\n        notes: ''\n      });\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\ExpensesPage.tsx",
        "start": 220,
        "end": 230,
        "startLoc": {
          "line": 220,
          "column": 14,
          "position": 1594
        },
        "endLoc": {
          "line": 230,
          "column": 2,
          "position": 1678
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\ExpensesPage.tsx",
        "start": 157,
        "end": 168,
        "startLoc": {
          "line": 157,
          "column": 2,
          "position": 1078
        },
        "endLoc": {
          "line": 168,
          "column": 51,
          "position": 1163
        }
      }
    },
    {
      "format": "javascript",
      "lines": 29,
      "fragment": ")}\n        actions={\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <IconArrowLeft className=\"mr-2 h-4 w-4\" />\n              {t(\"common.back\")}\n            </Button>\n          </div>\n        }\n      />\n\n      {createExpenseMutation.isError && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {createExpenseMutation.error instanceof Error\n              ? createExpenseMutation.error.message\n              : t(\n                  \"finance.expenses.createError\",\n                  \"Failed to create expense record\"\n                )}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardContent className=\"pt-6\">\n          <ExpenseForm\n            onSubmit={handleSubmit",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\pages\\ExpenseCreate.tsx",
        "start": 147,
        "end": 175,
        "startLoc": {
          "line": 147,
          "column": 9,
          "position": 1164
        },
        "endLoc": {
          "line": 175,
          "column": 13,
          "position": 1346
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesCreate.tsx",
        "start": 79,
        "end": 91,
        "startLoc": {
          "line": 79,
          "column": 16,
          "position": 775
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 846
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  Sale,\n  CreateSaleRequest,\n  UpdateSaleRequest,\n  SalesFilters,\n  SalesExportOptions,\n} from \"../types\";\nimport { getSales, getSaleById, createSale, updateSale, deleteSale } from \"../services\";\n\n// Adapter functions to transform between feature types and centralized service types\nconst adaptCreateSaleRequest = (request: CreateSaleRequest) => ({\n  customer_name: request.customerName,\n  fuel_type: request.fuelType,\n  quantity: request.quantityLiters,\n  price_per_liter: request.unitPrice,\n  total_amount: request.amount,\n  sale_date: request.saleDate instanceof Date ? request.saleDate.toISOString() : request.saleDate,\n  filling_system_id: request.fillingSystemId,\n  payment_method: request.paymentMethod as \"cash\" | \"card\" | \"credit\",\n  status: \"active\" as const,\n});\n\nconst adaptUpdateSaleRequest = (request: UpdateSaleRequest) => ({\n  customer_name: request.customerName,\n  fuel_type: request.fuelType,\n  quantity: request.quantityLiters,\n  price_per_liter: request.unitPrice,\n  total_amount: request.amount,\n  sale_date: request.saleDate instanceof Date ? request.saleDate.toISOString() : request.saleDate,\n  filling_system_id: request.fillingSystemId,\n  payment_method: request.paymentMethod as \"cash\" | \"card\" | \"credit\",\n});\n\nexport const salesKeys = {\n  all: [\"sales\"] as const,\n  lists: () => [...salesKeys.all, \"list\"] as const,\n  list: (filters: SalesFilters) => [...salesKeys.lists(), filters] as const,\n  details: () => [...salesKeys.all, \"detail\"] as const,\n  detail: (id: string) => [...salesKeys.details(), id] as const,\n};\n\nexport function useSalesQuery(filters?: SalesFilters) {\n  return useQuery({\n    queryKey: salesKeys.list(filters || {}),\n    queryFn: () => getSales(filters",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesQuery.ts",
        "start": 1,
        "end": 47,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 541
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 1,
        "end": 47,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 541
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useSaleQuery(id: string) {\n  return useQuery({\n    queryKey: salesKeys.detail(id),\n    queryFn: () => getSaleById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useSalesMutations() {\n  const queryClient = useQueryClient();\n\n  const createSaleMutation = useMutation({\n    mutationFn: (newSale: CreateSaleRequest) =>\n      createSale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesQuery.ts",
        "start": 47,
        "end": 66,
        "startLoc": {
          "line": 47,
          "column": 8,
          "position": 542
        },
        "endLoc": {
          "line": 66,
          "column": 11,
          "position": 700
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 47,
        "end": 65,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 541
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 698
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: salesKeys.lists() });\n      toast.success(\"Sale created successfully\");\n    },\n    onError: () => {\n      toast.error(\"Failed to create sale\");\n    },\n  });\n\n  const updateSaleMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateSaleRequest }) =>\n      updateSale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesQuery.ts",
        "start": 66,
        "end": 78,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 707
        },
        "endLoc": {
          "line": 78,
          "column": 11,
          "position": 828
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 2,
          "position": 846
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 966
        }
      }
    },
    {
      "format": "typescript",
      "lines": 82,
      "fragment": ",\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: salesKeys.lists() });\n      queryClient.invalidateQueries({\n        queryKey: salesKeys.detail(variables.id),\n      });\n      toast.success(\"Sale updated successfully\");\n    },\n    onError: () => {\n      toast.error(\"Failed to update sale\");\n    },\n  });\n\n  const deleteSaleMutation = useMutation({\n    mutationFn: (id: string) => deleteSale(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: salesKeys.lists() });\n      toast.success(\"Sale deleted successfully\");\n    },\n    onError: () => {\n      toast.error(\"Failed to delete sale\");\n    },\n  });\n\n  const exportSalesMutation = useMutation({\n    mutationFn: (options: SalesExportOptions) => {\n      throw new Error(\"Export functionality not yet implemented in centralized service\");\n    },\n    onSuccess: () => {\n      toast.success(\"Sales data exported successfully\");\n    },\n    onError: () => {\n      toast.error(\"Failed to export sales data\");\n    },\n  });\n\n  return {\n    createSale: createSaleMutation,\n    updateSale: updateSaleMutation,\n    deleteSale: deleteSaleMutation,\n    exportSales: exportSalesMutation,\n  };\n}\n\nexport function useExportSales() {\n  const { exportSales } = useSalesMutations();\n\n  const exportSalesData = async (options: SalesExportOptions) => {\n    try {\n      const data = await exportSales.mutateAsync(options);\n\n      // Handle CSV data\n      if (options.format === \"csv\" || !options.format) {\n        const blob = new Blob([data as string], { type: \"text/csv\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `sales-export-${new Date().toISOString().split(\"T\")[0]}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error(\"Error in export function:\", error);\n    }\n  };\n\n  return {\n    exportSalesData,\n    isExporting: exportSales.isPending,\n  };\n}\n\nexport default function useSales() {\n  return {\n    useSalesQuery,\n    useSaleQuery,\n    useSalesMutations,\n    useExportSales,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesQuery.ts",
        "start": 78,
        "end": 159,
        "startLoc": {
          "line": 78,
          "column": 2,
          "position": 838
        },
        "endLoc": {
          "line": 159,
          "column": 2,
          "position": 1514
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesQuery.ts",
        "start": 106,
        "end": 187,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 1117
        },
        "endLoc": {
          "line": 187,
          "column": 2,
          "position": 1793
        }
      }
    },
    {
      "format": "typescript",
      "lines": 124,
      "fragment": "import { useState, useCallback, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { salesApi, Sale } from \"@/core/api\";\nimport { useToast } from \"@/hooks\";\n\n// Define the update request interface based on the Sale type\ninterface UpdateSaleRequest {\n  filling_system_id?: string;\n  fuel_type_id?: string;\n  quantity?: number;\n  price_per_liter?: number;\n  total_price?: number;\n  payment_method?: string;\n  employee_id?: string;\n  shift_id?: string;\n  comments?: string;\n}\n\nexport function useSalesMutations() {\n  // State declarations\n  const [selectedSale, setSelectedSale] = useState<Sale | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [saleToDelete, setSaleToDelete] = useState<string | null>(null);\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Define mutations\n  const deleteMutation = useMutation({\n    mutationFn: salesApi.deleteSale,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n\n      toast({\n        title: \"Success\",\n        description: \"Sale deleted successfully and tank level restored\",\n      });\n      setIsDeleteDialogOpen(false);\n      setSaleToDelete(null);\n    },\n    onError: (error) => {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  const updateMutation = useMutation({\n    mutationFn: (params: { id: string; updates: UpdateSaleRequest }) =>\n      salesApi.updateSale(params.id, params.updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n      toast({\n        title: \"Success\",\n        description: \"Sale updated successfully and tank level adjusted\",\n      });\n      setIsEditDialogOpen(false);\n      setSelectedSale(null);\n    },\n    onError: (error) => {\n      console.error(\"Update error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Effect to reset state when dialogs close\n  useEffect(() => {\n    if (!isEditDialogOpen) {\n      // Only reset selected sale when edit dialog closes\n      setSelectedSale(null);\n    }\n  }, [isEditDialogOpen]);\n\n  useEffect(() => {\n    if (!isDeleteDialogOpen) {\n      // Only reset sale to delete when delete dialog closes\n      setSaleToDelete(null);\n    }\n  }, [isDeleteDialogOpen]);\n\n  // Handler functions\n  const handleEdit = useCallback((sale: Sale) => {\n    setSelectedSale(sale);\n    setIsEditDialogOpen(true);\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    setSaleToDelete(id);\n    setIsDeleteDialogOpen(true);\n  }, []);\n\n  const confirmDelete = useCallback(() => {\n    if (saleToDelete) {\n      deleteMutation.mutate(saleToDelete);\n    }\n  }, [saleToDelete, deleteMutation]);\n\n  return {\n    selectedSale,\n    setSelectedSale,\n    isEditDialogOpen,\n    setIsEditDialogOpen,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    saleToDelete,\n    setSaleToDelete,\n    deleteMutation,\n    updateMutation,\n    handleEdit,\n    handleDelete,\n    confirmDelete,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesMutations.ts",
        "start": 1,
        "end": 124,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 124,
          "column": 2,
          "position": 974
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesMutations.ts",
        "start": 1,
        "end": 124,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 124,
          "column": 2,
          "position": 974
        }
      }
    },
    {
      "format": "typescript",
      "lines": 171,
      "fragment": "import { useState, useCallback, useMemo } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { FuelTypeCode, PaymentStatus } from \"@/types\";\nimport { SalesFilters } from \"../types\";\n\ninterface UseSalesFiltersProps {\n  defaultFilters?: Partial<SalesFilters>;\n}\n\nexport function useSalesFilters({\n  defaultFilters = {},\n}: UseSalesFiltersProps = {}) {\n  const { t } = useTranslation([\"common\", \"sales\"]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Initialize filters from URL params or defaults\n  const initialFilters: SalesFilters = useMemo(() => {\n    const searchTerm =\n      searchParams.get(\"search\") || defaultFilters.searchTerm || \"\";\n    const fuelType = (searchParams.get(\"fuelType\") ||\n      defaultFilters.fuelType ||\n      \"all\") as FuelTypeCode | \"all\";\n    const paymentStatus = (searchParams.get(\"paymentStatus\") ||\n      defaultFilters.paymentStatus ||\n      \"all\") as PaymentStatus | \"all\";\n    const fillingSystem =\n      searchParams.get(\"fillingSystem\") ||\n      defaultFilters.fillingSystem ||\n      \"all\";\n\n    // Handle date range\n    let dateRange: SalesFilters[\"dateRange\"] = undefined;\n    const startDate = searchParams.get(\"startDate\");\n    const endDate = searchParams.get(\"endDate\");\n\n    if (startDate) {\n      dateRange = {\n        from: new Date(startDate),\n        to: endDate ? new Date(endDate) : undefined,\n      };\n    } else if (defaultFilters.dateRange) {\n      dateRange = defaultFilters.dateRange;\n    }\n\n    // Handle min/max quantity\n    const minQuantity = searchParams.get(\"minQuantity\")\n      ? Number(searchParams.get(\"minQuantity\"))\n      : defaultFilters.minQuantity;\n\n    const maxQuantity = searchParams.get(\"maxQuantity\")\n      ? Number(searchParams.get(\"maxQuantity\"))\n      : defaultFilters.maxQuantity;\n\n    // Handle min/max amount\n    const minAmount = searchParams.get(\"minAmount\")\n      ? Number(searchParams.get(\"minAmount\"))\n      : defaultFilters.minAmount;\n\n    const maxAmount = searchParams.get(\"maxAmount\")\n      ? Number(searchParams.get(\"maxAmount\"))\n      : defaultFilters.maxAmount;\n\n    return {\n      searchTerm,\n      dateRange,\n      fuelType,\n      paymentStatus,\n      fillingSystem,\n      minQuantity,\n      maxQuantity,\n      minAmount,\n      maxAmount,\n    };\n  }, [searchParams, defaultFilters]);\n\n  const [filters, setFilters] = useState<SalesFilters>(initialFilters);\n\n  // Sync filters with URL params\n  const updateFilters = useCallback(\n    (newFilters: Partial<SalesFilters>) => {\n      const updatedFilters = { ...filters, ...newFilters };\n      setFilters(updatedFilters);\n\n      // Update URL params\n      const params = new URLSearchParams();\n\n      if (updatedFilters.searchTerm)\n        params.set(\"search\", updatedFilters.searchTerm);\n      if (updatedFilters.fuelType && updatedFilters.fuelType !== \"all\") {\n        params.set(\"fuelType\", updatedFilters.fuelType);\n      }\n      if (\n        updatedFilters.paymentStatus &&\n        updatedFilters.paymentStatus !== \"all\"\n      ) {\n        params.set(\"paymentStatus\", updatedFilters.paymentStatus);\n      }\n      if (\n        updatedFilters.fillingSystem &&\n        updatedFilters.fillingSystem !== \"all\"\n      ) {\n        params.set(\"fillingSystem\", updatedFilters.fillingSystem);\n      }\n\n      // Handle date range\n      if (updatedFilters.dateRange?.from) {\n        params.set(\n          \"startDate\",\n          updatedFilters.dateRange.from.toISOString().split(\"T\")[0]\n        );\n\n        if (updatedFilters.dateRange.to) {\n          params.set(\n            \"endDate\",\n            updatedFilters.dateRange.to.toISOString().split(\"T\")[0]\n          );\n        }\n      }\n\n      // Handle min/max quantity\n      if (updatedFilters.minQuantity)\n        params.set(\"minQuantity\", updatedFilters.minQuantity.toString());\n      if (updatedFilters.maxQuantity)\n        params.set(\"maxQuantity\", updatedFilters.maxQuantity.toString());\n\n      // Handle min/max amount\n      if (updatedFilters.minAmount)\n        params.set(\"minAmount\", updatedFilters.minAmount.toString());\n      if (updatedFilters.maxAmount)\n        params.set(\"maxAmount\", updatedFilters.maxAmount.toString());\n\n      setSearchParams(params);\n    },\n    [filters, setSearchParams]\n  );\n\n  const resetFilters = useCallback(() => {\n    setFilters(defaultFilters as SalesFilters);\n    setSearchParams(new URLSearchParams());\n  }, [defaultFilters, setSearchParams]);\n\n  // Predefined filter options\n  const filterOptions = useMemo(() => {\n    return {\n      fuelTypes: [\n        { value: \"all\", label: t(\"common:all\") },\n        { value: \"diesel\", label: t(\"sales:fuelTypes.diesel\") },\n        { value: \"gas\", label: t(\"sales:fuelTypes.gas\") },\n        { value: \"petrol_regular\", label: t(\"sales:fuelTypes.petrol_regular\") },\n        { value: \"petrol_premium\", label: t(\"sales:fuelTypes.petrol_premium\") },\n      ],\n      paymentStatuses: [\n        { value: \"all\", label: t(\"common:all\") },\n        { value: \"pending\", label: t(\"sales:paymentStatuses.pending\") },\n        { value: \"completed\", label: t(\"sales:paymentStatuses.completed\") },\n        { value: \"cancelled\", label: t(\"sales:paymentStatuses.cancelled\") },\n        { value: \"paid\", label: t(\"sales:paymentStatuses.paid\") },\n        { value: \"failed\", label: t(\"sales:paymentStatuses.failed\") },\n        { value: \"refunded\", label: t(\"sales:paymentStatuses.refunded\") },\n      ],\n    };\n  }, [t]);\n\n  return {\n    filters,\n    updateFilters,\n    resetFilters,\n    filterOptions,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesFilters.ts",
        "start": 1,
        "end": 171,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 171,
          "column": 2,
          "position": 1519
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesFilters.ts",
        "start": 1,
        "end": 171,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 171,
          "column": 2,
          "position": 1519
        }
      }
    },
    {
      "format": "typescript",
      "lines": 60,
      "fragment": "import { useState, useCallback } from \"react\";\nimport { useToast } from \"@/hooks\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Sale } from \"@/types\";\nimport { createSale, updateSale, deleteSale } from \"@/features/sales/services\";\nimport type { CreateSaleRequest, UpdateSaleRequest } from \"@/features/sales/types\";\n\ninterface UseSalesDialogOptions {\n  onCreateSuccess?: (sale: Sale) => void;\n  onUpdateSuccess?: (sale: Sale) => void;\n  onDeleteSuccess?: (id: string) => void;\n}\n\nexport function useSalesDialog({\n  onCreateSuccess,\n  onUpdateSuccess,\n  onDeleteSuccess,\n}: UseSalesDialogOptions = {}) {\n  // Dialog state\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedSale, setSelectedSale] = useState<Sale | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Reset selected sale when edit dialog closes\n  const handleEditDialogOpenChange = useCallback((open: boolean) => {\n    setIsEditDialogOpen(open);\n    if (!open) {\n      setSelectedSale(null);\n    }\n  }, []);\n\n  // Open dialog for creating a new sale\n  const openCreateDialog = useCallback(() => {\n    setSelectedSale(null);\n    setIsEditDialogOpen(true);\n  }, []);\n\n  // Open dialog for editing an existing sale\n  const openEditDialog = useCallback((sale: Sale) => {\n    setSelectedSale(sale);\n    setIsEditDialogOpen(true);\n  }, []);\n\n  // Open dialog for confirming deletion\n  const openDeleteDialog = useCallback((sale: Sale) => {\n    setSelectedSale(sale);\n    setIsDeleteDialogOpen(true);\n  }, []);\n\n  // Handle form submission (create or update)\n  const handleSubmit = useCallback(\n    async (data: CreateSaleRequest) => {\n      setIsSubmitting(true);\n\n      try {\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesDialog.ts",
        "start": 1,
        "end": 60,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 60,
          "column": 3,
          "position": 536
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 1,
        "end": 60,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 60,
          "column": 74,
          "position": 536
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "};\n          const updatedSale = await updateSale(selectedSale.id, updateData);\n\n          queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n          queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n          queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n          toast({\n            title: \"Success\",\n            description: \"Sale updated successfully and tank level adjusted\",\n          });\n\n          onUpdateSuccess?.(updatedSale);\n        } else {\n          // Create new sale",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesDialog.ts",
        "start": 62,
        "end": 76,
        "startLoc": {
          "line": 62,
          "column": 2,
          "position": 573
        },
        "endLoc": {
          "line": 76,
          "column": 19,
          "position": 694
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 77,
        "end": 92,
        "startLoc": {
          "line": 77,
          "column": 11,
          "position": 691
        },
        "endLoc": {
          "line": 92,
          "column": 53,
          "position": 814
        }
      }
    },
    {
      "format": "typescript",
      "lines": 80,
      "fragment": ");\n\n          queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n          queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n          queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n          toast({\n            title: \"Success\",\n            description: \"Sale created successfully and tank level updated\",\n          });\n\n          onCreateSuccess?.(newSale);\n        }\n\n        setIsEditDialogOpen(false);\n      } catch (error: unknown) {\n        console.error(\"Error submitting sale:\", error);\n        const errorMessage = error instanceof Error ? error.message : \"Failed to save sale\";\n        toast({\n          title: \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [selectedSale, queryClient, toast, onUpdateSuccess, onCreateSuccess]\n  );\n\n  // Handle delete confirmation\n  const handleDelete = useCallback(async () => {\n    if (!selectedSale?.id) return;\n\n    setIsSubmitting(true);\n\n    try {\n      await deleteSale(selectedSale.id);\n\n      queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n\n      toast({\n        title: \"Success\",\n        description: \"Sale deleted successfully and tank level restored\",\n      });\n\n      onDeleteSuccess?.(selectedSale.id);\n      setIsDeleteDialogOpen(false);\n    } catch (error: unknown) {\n      console.error(\"Error deleting sale:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to delete sale\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [selectedSale, queryClient, toast, onDeleteSuccess]);\n\n  return {\n    // Dialog state\n    isEditDialogOpen,\n    setIsEditDialogOpen,\n    isDeleteDialogOpen,\n    setIsDeleteDialogOpen,\n    selectedSale,\n    isSubmitting,\n\n    // Dialog actions\n    handleEditDialogOpenChange,\n    openCreateDialog,\n    openEditDialog,\n    openDeleteDialog,\n    handleSubmit,\n    handleDelete,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useSalesDialog.ts",
        "start": 77,
        "end": 156,
        "startLoc": {
          "line": 77,
          "column": 5,
          "position": 708
        },
        "endLoc": {
          "line": 156,
          "column": 2,
          "position": 1259
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\hooks\\useSalesDialog.ts",
        "start": 79,
        "end": 183,
        "startLoc": {
          "line": 79,
          "column": 11,
          "position": 713
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 1471
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ",\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.transactions });\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.financeOverview });\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.profitLoss });\n    },\n  });\n\n  // Expense Mutations",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useFinance.ts",
        "start": 89,
        "end": 97,
        "startLoc": {
          "line": 89,
          "column": 2,
          "position": 689
        },
        "endLoc": {
          "line": 97,
          "column": 21,
          "position": 767
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\hooks\\useFinance.ts",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 25,
          "position": 546
        },
        "endLoc": {
          "line": 84,
          "column": 6,
          "position": 624
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ",\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.expenses });\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.financeOverview });\n      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.profitLoss });\n    },\n  });\n\n  // Calculate Profit & Loss Mutation",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\hooks\\useFinance.ts",
        "start": 116,
        "end": 124,
        "startLoc": {
          "line": 116,
          "column": 2,
          "position": 957
        },
        "endLoc": {
          "line": 124,
          "column": 36,
          "position": 1035
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\hooks\\useFinance.ts",
        "start": 103,
        "end": 111,
        "startLoc": {
          "line": 103,
          "column": 21,
          "position": 814
        },
        "endLoc": {
          "line": 111,
          "column": 6,
          "position": 892
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "?: { id: string; name: string }[];\n  onFiltersChange?: (filters: FiltersShape) => void;\n  totalCount?: number;\n  onPageChange?: (page: number, pageSize: number) => void;\n  onSortChange?: (column: string | null, direction: \"asc\" | \"desc\") => void;\n}\n\nexport function TransactionsTableStandardized",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TransactionsTableStandardized.tsx",
        "start": 20,
        "end": 27,
        "startLoc": {
          "line": 20,
          "column": 9,
          "position": 193
        },
        "endLoc": {
          "line": 27,
          "column": 30,
          "position": 300
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeesTableStandardized.tsx",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 260
        },
        "endLoc": {
          "line": 37,
          "column": 27,
          "position": 367
        }
      }
    },
    {
      "format": "javascript",
      "lines": 16,
      "fragment": ")}</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TransactionDialogStandardized.tsx",
        "start": 219,
        "end": 234,
        "startLoc": {
          "line": 219,
          "column": 7,
          "position": 1567
        },
        "endLoc": {
          "line": 234,
          "column": 21,
          "position": 1650
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\ExpenseForm.tsx",
        "start": 124,
        "end": 139,
        "startLoc": {
          "line": 124,
          "column": 14,
          "position": 938
        },
        "endLoc": {
          "line": 139,
          "column": 2,
          "position": 1026
        }
      }
    },
    {
      "format": "javascript",
      "lines": 45,
      "fragment": "={() => onOpenChange(false)}\n        disabled={isSubmitting}\n      >\n        Cancel\n      </Button>\n      <Button type=\"submit\" disabled={isSubmitting} form=\"tank-form\">\n        {isSubmitting ? \"Saving...\" : \"Save Tank\"}\n      </Button>\n    </div>\n  );\n\n  return (\n    <StandardDialog\n      open={open}\n      onOpenChange={onOpenChange}\n      title={tank?.id ? \"Edit Tank\" : \"Add New Tank\"}\n      description={tank?.id ? \"Update tank details\" : \"Create a new fuel tank\"}\n      maxWidth=\"sm:max-w-[425px]\"\n      actions={formActions}\n    >\n      <form id=\"tank-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n        <FormInput\n          name=\"name\"\n          label=\"Tank Name\"\n          form={form}\n          placeholder=\"Enter tank name\"\n          autoComplete=\"off\"\n        />\n\n        <FormSelect\n          name=\"fuel_type\"\n          label=\"Fuel Type\"\n          form={form}\n          options={[\n            { value: \"petrol\", label: \"Petrol\" },\n            { value: \"diesel\", label: \"Diesel\" },\n            { value: \"cng\", label: \"CNG\" },\n          ]}\n          placeholder=\"Select fuel type\"\n        />\n\n        <FormInput\n          name=\"capacity\"\n          label=\"Capacity (Liters)\"\n          form={form}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TankFormDialogStandardized.tsx",
        "start": 97,
        "end": 141,
        "startLoc": {
          "line": 97,
          "column": 8,
          "position": 742
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 1050
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\TankFormDialogStandardized.tsx",
        "start": 103,
        "end": 146,
        "startLoc": {
          "line": 103,
          "column": 8,
          "position": 784
        },
        "endLoc": {
          "line": 146,
          "column": 2,
          "position": 1086
        }
      }
    },
    {
      "format": "tsx",
      "lines": 65,
      "fragment": "import { z } from \"zod\";\nimport { StandardDialog } from \"@/core/components/ui/composed/base-dialog\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { useToast } from \"@/hooks\";\nimport {\n  FormInput,\n  FormSelect,\n} from \"@/core/components/ui/composed/form-fields\";\nimport { useZodForm, useFormSubmitHandler } from \"@/shared/hooks/use-form\";\nimport { FuelTank, FuelTypeCode } from \"@/types\";\n\ninterface TankFormDialogStandardizedProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n  tank?: {\n    id?: string;\n    name?: string;\n    capacity?: number;\n    current_level?: number;\n    fuel_type?: \"petrol\" | \"diesel\" | \"cng\";\n  };\n}\n\n// Define Zod schema for validation\nconst tankSchema = z.object({\n  name: z\n    .string({ required_error: \"Name is required\" })\n    .min(2, \"Name must be at least 2 characters\"),\n  fuel_type: z.enum([\"petrol\", \"diesel\", \"cng\"], {\n    required_error: \"Fuel type is required\",\n  }),\n  capacity: z\n    .number({ required_error: \"Capacity is required\" })\n    .min(1, \"Capacity must be greater than 0\"),\n});\n\n// Type based on schema\ntype TankFormData = z.infer<typeof tankSchema>;\n\nexport function TankFormDialogStandardized({\n  open,\n  onOpenChange,\n  onSuccess,\n  tank,\n}: TankFormDialogStandardizedProps) {\n  const { toast } = useToast();\n\n  // Initialize form with Zod validation\n  const form = useZodForm({\n    schema: tankSchema,\n    defaultValues: {\n      name: tank?.name || \"\",\n      fuel_type: tank?.fuel_type || \"petrol\",\n      capacity: tank?.capacity || 0,\n    },\n  });\n\n  // Form submission handler\n  const { isSubmitting, onSubmit: handleSubmit } =\n    useFormSubmitHandler<TankFormData>(form, async (data) => {\n      try {\n        const tankData: Omit<FuelTank, \"id\" | \"created_at\"> = {\n          name: data.name,\n          fuel_type: data",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TankFormDialogStandardized.tsx",
        "start": 1,
        "end": 65,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 65,
          "column": 5,
          "position": 547
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\TankFormDialogStandardized.tsx",
        "start": 1,
        "end": 65,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 547
        }
      }
    },
    {
      "format": "tsx",
      "lines": 46,
      "fragment": ",\n          capacity: data.capacity,\n          current_level: tank?.current_level || 0,\n        };\n\n        // Mock update/create operations since updateFuelTank is not available\n        toast({\n          title: \"Success\",\n          description: tank?.id\n            ? \"Tank updated successfully\"\n            : \"Tank created successfully\",\n        });\n\n        form.reset();\n        onSuccess();\n        return true;\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create/update tank\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n    });\n\n  // Create form actions\n  const formActions = (\n    <div className=\"flex justify-end space-x-2\">\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={() => onOpenChange(false)}\n        disabled={isSubmitting}\n      >\n        Cancel\n      </Button>\n      <Button type=\"submit\" disabled={isSubmitting} form=\"tank-form\">\n        {isSubmitting ? \"Saving...\" : \"Save Tank\"}\n      </Button>\n    </div>\n  );\n\n  return (\n    <StandardDialog\n      open",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TankFormDialogStandardized.tsx",
        "start": 65,
        "end": 110,
        "startLoc": {
          "line": 65,
          "column": 13,
          "position": 554
        },
        "endLoc": {
          "line": 110,
          "column": 5,
          "position": 831
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\TankFormDialogStandardized.tsx",
        "start": 71,
        "end": 116,
        "startLoc": {
          "line": 71,
          "column": 2,
          "position": 596
        },
        "endLoc": {
          "line": 116,
          "column": 7,
          "position": 873
        }
      }
    },
    {
      "format": "tsx",
      "lines": 26,
      "fragment": "\"\n        />\n\n        <FormSelect\n          name=\"fuel_type\"\n          label=\"Fuel Type\"\n          form={form}\n          options={[\n            { value: \"petrol\", label: \"Petrol\" },\n            { value: \"diesel\", label: \"Diesel\" },\n            { value: \"cng\", label: \"CNG\" },\n          ]}\n          placeholder=\"Select fuel type\"\n        />\n\n        <FormInput\n          name=\"capacity\"\n          label=\"Capacity (Liters)\"\n          form={form}\n          placeholder=\"Enter capacity\"\n          type=\"number\"\n        />\n      </form>\n    </StandardDialog>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\TankFormDialogStandardized.tsx",
        "start": 123,
        "end": 148,
        "startLoc": {
          "line": 123,
          "column": 4,
          "position": 944
        },
        "endLoc": {
          "line": 148,
          "column": 2,
          "position": 1080
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\TankFormDialogStandardized.tsx",
        "start": 128,
        "end": 153,
        "startLoc": {
          "line": 128,
          "column": 16,
          "position": 980
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1116
        }
      }
    },
    {
      "format": "tsx",
      "lines": 33,
      "fragment": "import { useState, useEffect } from \"react\";\nimport { StandardDialog } from \"@/core/components/ui/composed/base-dialog\";\nimport { Button } from \"@/core/components/ui/button\";\n\ninterface ShiftControlProps {\n  onShiftStart: () => void;\n  onShiftEnd: () => void;\n  isShiftOpen: boolean;\n}\n\nexport function ShiftControl({\n  onShiftStart,\n  onShiftEnd,\n  isShiftOpen,\n}: ShiftControlProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Add console log to debug component props\n  useEffect(() => {\n    console.log(\"ShiftControl component props:\", {\n      isShiftOpen,\n      dialogOpen: isOpen,\n    });\n  }, [isShiftOpen, isOpen]);\n\n  return (\n    <div>\n      <Button variant=\"outline\" onClick={() => setIsOpen(true)}>\n        {isShiftOpen ? \"Close Shift\" : \"Open Shift\"}\n      </Button>\n\n      <StandardDialog\n        open",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ShiftControl.tsx",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 5,
          "position": 242
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\ShiftControl.tsx",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 7,
          "position": 242
        }
      }
    },
    {
      "format": "tsx",
      "lines": 29,
      "fragment": "={\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                setIsOpen(false);\n                if (isShiftOpen) {\n                  onShiftEnd();\n                } else {\n                  onShiftStart();\n                }\n              }}\n            >\n              {isShiftOpen ? \"Close Shift\" : \"Open Shift\"}\n            </Button>\n          </div>\n        }\n      >\n        <div className=\"flex flex-col space-y-4\">\n          <p>\n            Are you sure you want to {isShiftOpen ? \"close\" : \"open\"} the shift?\n          </p>\n        </div>\n      </StandardDialog>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ShiftControl.tsx",
        "start": 36,
        "end": 64,
        "startLoc": {
          "line": 36,
          "column": 8,
          "position": 272
        },
        "endLoc": {
          "line": 64,
          "column": 2,
          "position": 478
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\ShiftControl.tsx",
        "start": 36,
        "end": 64,
        "startLoc": {
          "line": 36,
          "column": 7,
          "position": 272
        },
        "endLoc": {
          "line": 64,
          "column": 2,
          "position": 478
        }
      }
    },
    {
      "format": "javascript",
      "lines": 86,
      "fragment": "={() => handleView(id)}>\n            <Eye className=\"mr-2 h-4 w-4\" />\n            <span>{t(\"common:view\")}</span>\n          </DropdownMenuItem>\n        ),\n      });\n    }\n\n    if (onGenerateReceipt) {\n      actions.push({\n        element: (id: string) => (\n          <DropdownMenuItem\n            key=\"receipt\"\n            onClick={() => handleGenerateReceipt(id)}\n          >\n            <FileText className=\"mr-2 h-4 w-4\" />\n            <span>{t(\"sales:generateReceipt\")}</span>\n          </DropdownMenuItem>\n        ),\n      });\n    }\n\n    return actions;\n  }, [onView, onGenerateReceipt, t, handleView, handleGenerateReceipt]);\n\n  // Define column structure\n  const columns = useMemo(\n    () => [\n      {\n        header: t(\"sales:fields.saleDate\"),\n        accessorKey: \"saleDate\" as keyof Sale,\n        cell: (value: string) => createDateCell(value),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.fuelType\"),\n        accessorKey: \"fuelType\" as keyof Sale,\n        cell: (value: string) => t(`sales:fuelTypes.${value}`),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.quantityLiters\"),\n        accessorKey: \"quantityLiters\" as keyof Sale,\n        cell: (value: number) => createNumberCell(value, 2),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.unitPrice\"),\n        accessorKey: \"unitPrice\" as keyof Sale,\n        cell: (value: number) => createNumberCell(value, 2),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.amount\"),\n        accessorKey: \"amount\" as keyof Sale,\n        cell: (value: number) => createCurrencyCell(value),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.paymentStatus\"),\n        accessorKey: \"paymentStatus\" as keyof Sale,\n        cell: (value: string) => {\n          const variantMap: Record<string, \"success\" | \"warning\" | \"destructive\" | \"outline\"> = {\n            paid: \"success\",\n            pending: \"warning\",\n            cancelled: \"destructive\",\n            default: \"outline\",\n          };\n\n          const variant = variantMap[value] || variantMap.default;\n          return createBadgeCell(t(`sales:paymentStatuses.${value}`), variant);\n        },\n        enableSorting: true,\n      },\n    ],\n    [t]\n  );\n\n  return (\n    <StandardizedDataTable\n      title={t(\"sales:salesList\")}\n      columns={columns}\n      data={sales}\n      loading={isLoading}\n      onEdit={onEdit ? handleEdit : undefined}\n      onDelete={onDelete}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesTableStandardized.tsx",
        "start": 56,
        "end": 141,
        "startLoc": {
          "line": 56,
          "column": 8,
          "position": 561
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 1281
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesTableStandardized.tsx",
        "start": 56,
        "end": 141,
        "startLoc": {
          "line": 56,
          "column": 8,
          "position": 561
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 1281
        }
      }
    },
    {
      "format": "tsx",
      "lines": 144,
      "fragment": "import React, { useMemo, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FileText, Eye } from \"lucide-react\";\nimport {\n  StandardizedDataTable,\n  createBadgeCell,\n  createDateCell,\n  createCurrencyCell,\n  createNumberCell,\n} from \"@/shared/components/unified/StandardizedDataTable\";\nimport { DropdownMenuItem } from \"@/core/components/ui/primitives/dropdown-menu\";\nimport { Sale } from \"../types\";\n\ninterface SalesTableStandardizedProps {\n  sales: Sale[];\n  isLoading: boolean;\n  onEdit?: (sale: Sale) => void;\n  onDelete?: (id: string) => void;\n  onView?: (sale: Sale) => void;\n  onGenerateReceipt?: (sale: Sale) => void;\n}\n\nexport function SalesTableStandardized({\n  sales,\n  isLoading,\n  onEdit,\n  onDelete,\n  onView,\n  onGenerateReceipt,\n}: SalesTableStandardizedProps) {\n  const { t } = useTranslation([\"sales\", \"common\"]);\n\n  // Custom handler to map ID to full sale object for edit/view\n  const handleEdit = (id: string) => {\n    const sale = sales.find((s) => s.id === id);\n    if (sale && onEdit) onEdit(sale);\n  };\n\n  const handleView = useCallback((id: string) => {\n    const sale = sales.find((s) => s.id === id);\n    if (sale && onView) onView(sale);\n  }, [sales, onView]);\n\n  const handleGenerateReceipt = useCallback((id: string) => {\n    const sale = sales.find((s) => s.id === id);\n    if (sale && onGenerateReceipt) onGenerateReceipt(sale);\n  }, [sales, onGenerateReceipt]);\n\n  // Define custom actions for the dropdown menu\n  const customActions = useMemo(() => {\n    const actions = [];\n\n    if (onView) {\n      actions.push({\n        element: (id: string) => (\n          <DropdownMenuItem key=\"view\" onClick={() => handleView(id)}>\n            <Eye className=\"mr-2 h-4 w-4\" />\n            <span>{t(\"common:view\")}</span>\n          </DropdownMenuItem>\n        ),\n      });\n    }\n\n    if (onGenerateReceipt) {\n      actions.push({\n        element: (id: string) => (\n          <DropdownMenuItem\n            key=\"receipt\"\n            onClick={() => handleGenerateReceipt(id)}\n          >\n            <FileText className=\"mr-2 h-4 w-4\" />\n            <span>{t(\"sales:generateReceipt\")}</span>\n          </DropdownMenuItem>\n        ),\n      });\n    }\n\n    return actions;\n  }, [onView, onGenerateReceipt, t, handleView, handleGenerateReceipt]);\n\n  // Define column structure\n  const columns = useMemo(\n    () => [\n      {\n        header: t(\"sales:fields.saleDate\"),\n        accessorKey: \"saleDate\" as keyof Sale,\n        cell: (value: string) => createDateCell(value),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.fuelType\"),\n        accessorKey: \"fuelType\" as keyof Sale,\n        cell: (value: string) => t(`sales:fuelTypes.${value}`),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.quantityLiters\"),\n        accessorKey: \"quantityLiters\" as keyof Sale,\n        cell: (value: number) => createNumberCell(value, 2),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.unitPrice\"),\n        accessorKey: \"unitPrice\" as keyof Sale,\n        cell: (value: number) => createNumberCell(value, 2),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.amount\"),\n        accessorKey: \"amount\" as keyof Sale,\n        cell: (value: number) => createCurrencyCell(value),\n        enableSorting: true,\n      },\n      {\n        header: t(\"sales:fields.paymentStatus\"),\n        accessorKey: \"paymentStatus\" as keyof Sale,\n        cell: (value: string) => {\n          const variantMap: Record<string, \"success\" | \"warning\" | \"destructive\" | \"outline\"> = {\n            paid: \"success\",\n            pending: \"warning\",\n            cancelled: \"destructive\",\n            default: \"outline\",\n          };\n\n          const variant = variantMap[value] || variantMap.default;\n          return createBadgeCell(t(`sales:paymentStatuses.${value}`), variant);\n        },\n        enableSorting: true,\n      },\n    ],\n    [t]\n  );\n\n  return (\n    <StandardizedDataTable\n      title={t(\"sales:salesList\")}\n      columns={columns}\n      data={sales}\n      loading={isLoading}\n      onEdit={onEdit ? handleEdit : undefined}\n      onDelete={onDelete}\n    />\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesTableStandardized.tsx",
        "start": 1,
        "end": 144,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1289
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesTableStandardized.tsx",
        "start": 1,
        "end": 144,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1289
        }
      }
    },
    {
      "format": "tsx",
      "lines": 24,
      "fragment": "import * as React from \"react\";\nimport { FillingSystemSelect } from \"./FillingSystemSelect\";\n\ninterface SalesSystemSelectProps {\n  value: string;\n  onChange: (id: string) => void;\n  systems: { id: string; name: string }[];\n}\n\nexport function SalesSystemSelect({\n  value,\n  onChange,\n  systems,\n}: SalesSystemSelectProps) {\n  return (\n    <FillingSystemSelect\n      value={value}\n      onChange={onChange}\n      systems={systems}\n      placeholder=\"All systems\"\n      className=\"w-full\"\n    />\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesSystemSelect.tsx",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 154
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesSystemSelect.tsx",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 2,
          "position": 154
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "import { SearchBar } from \"@/core/components/ui/SearchBar\";\nimport React from \"react\";\n\ninterface SalesSearchBarProps {\n  value: string;\n  onChange: (v: string) => void;\n}\n\nexport function SalesSearchBar({ value, onChange }: SalesSearchBarProps) {\n  return (\n    <SearchBar\n      value={value}\n      onChange={onChange}\n      placeholder=\"Search sales by system, fuel type, or date...\"\n      className=\"h-9 w-full\"\n    />\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesSearchBar.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 115
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesSearchBar.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 115
        }
      }
    },
    {
      "format": "javascript",
      "lines": 91,
      "fragment": "={fieldValue(litersRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                litersRange,\n                onLitersRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(litersRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                litersRange,\n                onLitersRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n      {/* Price/Unit Range */}\n      <div className=\"flex flex-col gap-3\">\n        <label className=\"text-xs font-semibold text-muted-foreground tracking-wide mb-1\">\n          Price/Unit Range <span className=\"text-muted-foreground\">(֏)</span>\n        </label>\n        <div className=\"flex gap-2 items-center\">\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Min\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n      {/* Total Sales Range - Only render if props are provided */}\n      {totalSalesRange && onTotalSalesRangeChange && (\n        <div className=\"flex flex-col gap-3\">\n          <label className=\"text-xs font-semibold text-muted-foreground tracking-wide mb-1\">\n            Total Sales Range <span className=\"text-muted-foreground\">(֏)</span>\n          </label>\n          <div className=\"flex gap-2 items-center\">\n            <input\n              type=\"number\"\n              inputMode=\"numeric\"\n              placeholder=\"Min\"\n              className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n              value={fieldValue(totalSalesRange[0])}\n              min={0}\n              onChange={(e) =>\n                ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 58,
        "end": 148,
        "startLoc": {
          "line": 58,
          "column": 6,
          "position": 456
        },
        "endLoc": {
          "line": 148,
          "column": 17,
          "position": 983
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 58,
        "end": 147,
        "startLoc": {
          "line": 58,
          "column": 6,
          "position": 443
        },
        "endLoc": {
          "line": 147,
          "column": 15,
          "position": 958
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "import React from \"react\";\n\ninterface SalesRangesFiltersProps {\n  litersRange: [number, number];\n  onLitersRangeChange: (range: [number, number]) => void;\n  priceRange: [number, number];\n  onPriceRangeChange: (range: [number, number]) => void;\n  totalSalesRange?",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 2,
          "position": 84
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 2,
          "position": 84
        }
      }
    },
    {
      "format": "tsx",
      "lines": 37,
      "fragment": ": (range: [number, number]) => void;\n}\n\n// Helper to format number or empty for zero\nconst fieldValue = (v: number) => (v === 0 ? \"\" : v);\n\nconst handleRangeChange = (\n  idx: number,\n  value: string,\n  range: [number, number],\n  setRange: (r: [number, number]) => void\n) => {\n  const newVal = value === \"\" ? 0 : Number(value);\n  const updated: [number, number] = [...range] as [number, number];\n  updated[idx] = newVal;\n  setRange(updated);\n};\n\nexport function SalesRangesFilters({\n  litersRange,\n  onLitersRangeChange,\n  priceRange,\n  onPriceRangeChange,\n  totalSalesRange,\n  onTotalSalesRangeChange,\n}: SalesRangesFiltersProps) {\n  // Styling:\n  // - Card with dark glass effect, strong border\n  // - Uniform label and input layout\n  // - Min/Max inside a flex-row that aligns inputs and separates clearly\n\n  return (\n    <section\n      className={`rounded-xl shadow-lg border border-border bg-gray-50/70 p-6 mt-2\n        flex flex-col gap-6\n        ${totalSalesRange ? 'md:grid md:grid-cols-2 lg:grid-cols-3' : 'md:grid md:grid-cols-2'} md:gap-6`}\n      ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 9,
        "end": 45,
        "startLoc": {
          "line": 9,
          "column": 2,
          "position": 98
        },
        "endLoc": {
          "line": 45,
          "column": 7,
          "position": 370
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 9,
        "end": 42,
        "startLoc": {
          "line": 9,
          "column": 24,
          "position": 96
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 353
        }
      }
    },
    {
      "format": "tsx",
      "lines": 90,
      "fragment": "\n      aria-label=\"Sales Range Filters\"\n    >\n      {/* Liters Range */}\n      <div className=\"flex flex-col gap-3\">\n        <label className=\"text-xs font-semibold text-muted-foreground tracking-wide mb-1\">\n          Liters Range\n        </label>\n        <div className=\"flex gap-2 items-center\">\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Min\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(litersRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                litersRange,\n                onLitersRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(litersRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                litersRange,\n                onLitersRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n      {/* Price/Unit Range */}\n      <div className=\"flex flex-col gap-3\">\n        <label className=\"text-xs font-semibold text-muted-foreground tracking-wide mb-1\">\n          Price/Unit Range <span className=\"text-muted-foreground\">(֏)</span>\n        </label>\n        <div className=\"flex gap-2 items-center\">\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Min\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[0])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                0,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n          <span className=\"text-lg text-muted-foreground font-medium mx-1\">\n            –\n          </span>\n          <input\n            type=\"number\"\n            inputMode=\"numeric\"\n            placeholder=\"Max\"\n            className=\"w-full md:w-24 flex-1 h-11 px-3 py-2 rounded-lg border border-input bg-gray-50 text-base focus:ring-2 focus:ring-primary/20 outline-none shadow-sm transition disabled:opacity-50\"\n            value={fieldValue(priceRange[1])}\n            min={0}\n            onChange={(e) =>\n              handleRangeChange(\n                1,\n                e.target.value,\n                priceRange,\n                onPriceRangeChange\n              )\n            }\n          />\n        </div>\n      </div>\n      {/* Total Sales Range - Only render if props are provided */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 44,
        "end": 133,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 370
        },
        "endLoc": {
          "line": 133,
          "column": 60,
          "position": 853
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 44,
        "end": 90,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 357
        },
        "endLoc": {
          "line": 90,
          "column": 23,
          "position": 595
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "<div className=\"flex flex-col gap-3\">\n          <label className=\"text-xs font-semibold text-muted-foreground tracking-wide mb-1\">\n            Total Sales Range <span className=\"text-muted-foreground\">(֏)</span>\n          </label>\n          <div className=\"flex gap-2 items-center\">\n            <input\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 135,
        "end": 141,
        "startLoc": {
          "line": 135,
          "column": 9,
          "position": 869
        },
        "endLoc": {
          "line": 141,
          "column": 15,
          "position": 932
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesRangesFilters.tsx",
        "start": 134,
        "end": 140,
        "startLoc": {
          "line": 134,
          "column": 7,
          "position": 844
        },
        "endLoc": {
          "line": 140,
          "column": 13,
          "position": 907
        }
      }
    },
    {
      "format": "tsx",
      "lines": 118,
      "fragment": "import React, { useCallback } from \"react\";\nimport { Button } from \"@/core/components/ui/primitives/button\";\nimport { Plus } from 'lucide-react';\nimport { useSalesDialog } from \"../hooks/useSalesDialog\";\nimport type { Sale, CreateSaleRequest } from \"../types\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/core/components/ui/primitives/alert-dialog\";\n\ninterface SalesManagerProps {\n  /**\n   * Callback when a sale is created\n   */\n  onSaleCreated?: (sale: Sale) => void;\n\n  /**\n   * Callback when a sale is updated\n   */\n  onSaleUpdated?: (sale: Sale) => void;\n\n  /**\n   * Callback when a sale is deleted\n   * @param id The ID of the deleted sale\n   * @param sale The deleted sale entity (optional)\n   */\n  onSaleDeleted?: (id: string | number, sale?: Sale) => void;\n}\n\n/**\n * Sales management component that demonstrates using the refactored hooks\n *\n * This component shows how to use the new hooks architecture to manage sales operations\n * with significantly less boilerplate code.\n */\nexport function SalesManager({\n  onSaleCreated,\n  onSaleUpdated,\n  onSaleDeleted,\n}: SalesManagerProps) {\n  // Use our refactored hook with much less boilerplate\n  const salesDialog = useSalesDialog({\n    onCreateSuccess: onSaleCreated,\n    onUpdateSuccess: onSaleUpdated,\n    onDeleteSuccess: onSaleDeleted,\n  });\n\n  // Handler for form submission - much simpler with our new hook\n  const handleSubmit = useCallback(\n    async (data: CreateSaleRequest) => {\n      try {\n        await salesDialog.handleSubmit(data);\n        return true;\n      } catch (error) {\n        console.error(\"Error submitting sale form:\", error);\n        return false;\n      }\n    },\n    [salesDialog]\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add sale button */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Sales</h2>\n        <Button onClick={salesDialog.openCreateDialog} className=\"mb-4\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Sale\n        </Button>\n      </div>\n\n      {/* SalesForm dialog would go here - for demonstration purposes */}\n      {/* \n      <SalesFormDialog\n        open={salesDialog.isEditDialogOpen}\n        onOpenChange={salesDialog.handleEditDialogOpenChange}\n        sale={salesDialog.selectedSale}\n        onSubmit={handleSubmit}\n        isSubmitting={salesDialog.isSubmitting}\n      />\n      */}\n\n      {/* Delete confirmation dialog */}\n      <AlertDialog\n        open={salesDialog.isDeleteDialogOpen}\n        onOpenChange={(open) => !open && salesDialog.closeDeleteDialog()}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Deletion</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this sale? This action cannot be\n              undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={salesDialog.handleDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {salesDialog.isSubmitting ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n\nexport default SalesManager;",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesManager.tsx",
        "start": 1,
        "end": 118,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 118,
          "column": 2,
          "position": 662
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesManager.tsx",
        "start": 1,
        "end": 118,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 118,
          "column": 2,
          "position": 663
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "import React from \"react\";\nimport { SalesFilters } from \"./SalesFilters\";\nimport { SalesRangesFilters } from \"./SalesRangesFilters\";\nimport { NewSaleButton } from \"./NewSaleButton\";\n\ninterface SalesHeaderProps {\n  search: string;\n  onSearchChange: (search: string) => void;\n  date: Date | undefined;\n  onDateChange: (date: Date | undefined) => void;\n  systemId: string;\n  onSystemChange: (id: string) => void;\n  systems: { id: string; name: string }[];\n  litersRange: [number, number];\n  onLitersRangeChange: (range: [number, number]) => void;\n  priceRange: [number, number];\n  onPriceRangeChange: (range: [number, number]) => void;\n  totalSalesRange?",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesHeader.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 222
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesHeader.tsx",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 222
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "litersRange: [number, number];\n  onLitersRangeChange: (range: [number, number]) => void;\n  priceRange: [number, number];\n  onPriceRangeChange: (range: [number, number]) => void;\n  totalSalesRange?: [number, number];\n  onTotalSalesRangeChange?: (range: [number, number]) => void;\n}\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesHeader.tsx",
        "start": 14,
        "end": 22,
        "startLoc": {
          "line": 14,
          "column": 3,
          "position": 155
        },
        "endLoc": {
          "line": 22,
          "column": 7,
          "position": 258
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\SalesRangesFilters.tsx",
        "start": 4,
        "end": 12,
        "startLoc": {
          "line": 4,
          "column": 3,
          "position": 17
        },
        "endLoc": {
          "line": 12,
          "column": 45,
          "position": 120
        }
      }
    },
    {
      "format": "tsx",
      "lines": 44,
      "fragment": ": (range: [number, number]) => void;\n}\n\nexport function SalesHeader({\n  search,\n  onSearchChange,\n  date,\n  onDateChange,\n  systemId,\n  onSystemChange,\n  systems,\n  litersRange,\n  onLitersRangeChange,\n  priceRange,\n  onPriceRangeChange,\n  totalSalesRange,\n  onTotalSalesRangeChange,\n}: SalesHeaderProps) {\n  return (\n    <div className=\"flex flex-col space-y-6 bg-gray-50\">\n      <div className=\"flex flex-wrap justify-between items-center gap-4 mb-2\">\n        <div className=\"hidden\">\n          {/* Prevent duplication with card header */}\n          <h2 className=\"text-2xl font-semibold tracking-tight text-foreground\">\n            Sales\n          </h2>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage and track fuel sales records\n          </p>\n        </div>\n        <div className=\"ml-auto\">\n          <NewSaleButton />\n        </div>\n      </div>\n      <SalesFilters\n        search={search}\n        onSearchChange={onSearchChange}\n        date={date}\n        onDateChange={onDateChange}\n        systemId={systemId}\n        onSystemChange={onSystemChange}\n        systems={systems}\n      />\n      <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesHeader.tsx",
        "start": 19,
        "end": 62,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 236
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 498
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesHeader.tsx",
        "start": 19,
        "end": 62,
        "startLoc": {
          "line": 19,
          "column": 24,
          "position": 234
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 496
        }
      }
    },
    {
      "format": "javascript",
      "lines": 64,
      "fragment": "}\n        />\n      )}\n    </StandardForm>\n  );\n}\n\n// Separate component to handle form content with hooks\ninterface SalesFormContentProps {\n  control: Control<SalesFormData>;\n  employees?: Employee[];\n  totalSales: number;\n  setTotalSales: (value: number) => void;\n}\n\nfunction SalesFormContent({ control, employees, totalSales, setTotalSales }: SalesFormContentProps) {\n  const { t } = useTranslation();\n\n  // Watch for changes to calculate derived values\n  const unitPrice = useWatch({ control, name: \"unit_price\" });\n  const meterStart = useWatch({ control, name: \"meter_start\" });\n  const meterEnd = useWatch({ control, name: \"meter_end\" });\n\n  // Calculate quantity and total sales when meter values or unit price changes\n  useEffect(() => {\n    // Calculate quantity from meter readings\n    const calculatedQuantity = Math.max(0, meterEnd - meterStart);\n\n    // Calculate total sales\n    const calculatedTotal = calculatedQuantity * unitPrice;\n    setTotalSales(calculatedTotal || 0);\n  }, [meterStart, meterEnd, unitPrice, setTotalSales]);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={control}\n          name=\"quantity\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                {t(\"sales.quantity\", \"Quantity\")} (\n                {t(\"common.calculated\", \"Calculated\")})\n              </FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0\"\n                  {...field}\n                  value={field.value}\n                  disabled\n                  className=\"bg-muted\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <PriceAndEmployeeInputs\n          control={control}\n          employees={employees ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 189,
        "end": 252,
        "startLoc": {
          "line": 189,
          "column": 14,
          "position": 1474
        },
        "endLoc": {
          "line": 252,
          "column": 11,
          "position": 1914
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 206,
        "end": 264,
        "startLoc": {
          "line": 206,
          "column": 10,
          "position": 1870
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 2254
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": "}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={control}\n          name=\"meter_end\"\n          render={(",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 274,
        "end": 288,
        "startLoc": {
          "line": 274,
          "column": 2,
          "position": 2038
        },
        "endLoc": {
          "line": 288,
          "column": 2,
          "position": 2108
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 285,
        "end": 308,
        "startLoc": {
          "line": 285,
          "column": 6,
          "position": 2369
        },
        "endLoc": {
          "line": 308,
          "column": 8,
          "position": 2510
        }
      }
    },
    {
      "format": "javascript",
      "lines": 46,
      "fragment": "\n                  )}\n                  {...field}\n                  value={field.value || 0}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      {/* Display calculated total sales */}\n      <div className=\"bg-muted/30 p-3 rounded-md text-sm\">\n        <div className=\"font-medium\">\n          {t(\"sales.totalSales\", \"Total Sales\")}: {totalSales.toFixed(2)} ֏\n        </div>\n        <div className=\"text-muted-foreground text-xs\">\n          {t(\"sales.calculatedAs\", \"Calculated as\")}{\" \"}\n          {t(\"sales.quantity\", \"Quantity\")} (\n          {(meterEnd - meterStart).toFixed(2)}) × {t(\"sales.unitPrice\", \"Unit Price\")} ({unitPrice.toFixed(2)})\n        </div>\n      </div>\n\n      <FillingSystemSelect control={control} />\n\n      <FormField\n        control={control}\n        name=\"comments\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>{t(\"common.comments\", \"Comments\")}</FormLabel>\n            <FormControl>\n              <Input\n                type=\"text\"\n                placeholder={t(\"common.comments\", \"Comments\")}\n                {...field}\n                value={field.value || \"\"}\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 297,
        "end": 342,
        "startLoc": {
          "line": 297,
          "column": 23,
          "position": 2167
        },
        "endLoc": {
          "line": 342,
          "column": 2,
          "position": 2504
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 271,
        "end": 323,
        "startLoc": {
          "line": 271,
          "column": 25,
          "position": 2020
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2609
        }
      }
    },
    {
      "format": "tsx",
      "lines": 16,
      "fragment": "?: string;\n}\n\ninterface SalesFormStandardizedProps {\n  sale?: SaleFormModel;\n  onSubmit: (data: SalesFormData) => Promise<boolean>;\n  employees?: Employee[];\n}\n\nexport function SalesFormStandardized({\n  sale,\n  onSubmit,\n  employees,\n}: SalesFormStandardizedProps) {\n  const { t } = useTranslation();\n  const [",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 56,
        "end": 71,
        "startLoc": {
          "line": 56,
          "column": 9,
          "position": 526
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 628
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesFormStandardized.tsx",
        "start": 55,
        "end": 70,
        "startLoc": {
          "line": 55,
          "column": 11,
          "position": 573
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 675
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": "interface SalesFormContentProps {\n  control: Control<SalesFormData>;\n  employees?: Employee[];\n  totalSales: number;\n  setTotalSales: (value: number) => void;\n}\n\nfunction SalesFormContent({ control, employees, totalSales, setTotalSales }: SalesFormContentProps) {\n  const { t } = useTranslation();\n\n  // Watch for changes to calculate derived values\n  const unitPrice = useWatch({ control, name: \"unit_price\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 197,
        "end": 208,
        "startLoc": {
          "line": 197,
          "column": 1,
          "position": 1496
        },
        "endLoc": {
          "line": 208,
          "column": 13,
          "position": 1610
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 213,
        "end": 224,
        "startLoc": {
          "line": 213,
          "column": 1,
          "position": 1888
        },
        "endLoc": {
          "line": 224,
          "column": 12,
          "position": 2002
        }
      }
    },
    {
      "format": "tsx",
      "lines": 44,
      "fragment": "import React from \"react\";\nimport { SalesSearchBar } from \"./SalesSearchBar\";\nimport { SalesDatePicker } from \"./SalesDatePicker\";\nimport { SalesSystemSelect } from \"./SalesSystemSelect\";\n\ninterface SalesFiltersProps {\n  search: string;\n  onSearchChange: (search: string) => void;\n  date: Date | undefined;\n  onDateChange: (date: Date | undefined) => void;\n  systemId: string;\n  onSystemChange: (id: string) => void;\n  systems: { id: string; name: string }[];\n}\n\nexport function SalesFilters({\n  search,\n  onSearchChange,\n  date,\n  onDateChange,\n  systemId,\n  onSystemChange,\n  systems,\n}: SalesFiltersProps) {\n  return (\n    <section className=\"bg-gray-50/80 rounded-xl border border-border shadow-sm p-4 mb-3\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        <div className=\"md:col-span-2 lg:col-span-2 flex flex-col justify-end\">\n          <SalesSearchBar value={search} onChange={onSearchChange} />\n        </div>\n        <div className=\"flex flex-col justify-end\">\n          <SalesDatePicker date={date} onDateChange={onDateChange} />\n        </div>\n        <div className=\"flex flex-col justify-end\">\n          <SalesSystemSelect\n            value={systemId}\n            onChange={onSystemChange}\n            systems={systems}\n          />\n        </div>\n      </div>\n    </section>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFilters.tsx",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 350
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesFilters.tsx",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 350
        }
      }
    },
    {
      "format": "tsx",
      "lines": 64,
      "fragment": "import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { SalesFilters } from \"./SalesFilters\";\nimport { SalesRangesFilters } from \"./SalesRangesFilters\";\nimport { useSalesFilters } from \"../hooks/useSalesFilters\";\nimport { SalesFilters as SalesFiltersType } from \"../types\";\n\ninterface SalesFilterPanelProps {\n  onClose?: () => void;\n  onFiltersChange?: (filters: SalesFiltersType) => void;\n}\n\nexport const SalesFilterPanel: FC<SalesFilterPanelProps> = ({\n  onClose,\n  onFiltersChange,\n}) => {\n  const { t } = useTranslation();\n  const { filters, updateFilters, resetFilters, filterOptions } =\n    useSalesFilters();\n\n  // Pass filter changes to parent if provided\n  const handleFiltersChange = (newFilters: Partial<SalesFiltersType>) => {\n    updateFilters(newFilters);\n    if (onFiltersChange) {\n      onFiltersChange(filters);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 py-2\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-medium\">\n          {t(\"sales.filters.title\", \"Filters\")}\n        </h3>\n        {onClose && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">{t(\"common.close\")}</span>\n          </Button>\n        )}\n      </div>\n\n      <div className=\"space-y-6\">\n        <SalesFilters\n          search={filters.searchTerm || \"\"}\n          onSearchChange={(value: string) =>\n            handleFiltersChange({ searchTerm: value })\n          }\n          date={filters.dateRange?.from}\n          onDateChange={(date: Date | undefined) =>\n            handleFiltersChange({\n              dateRange: date ? { from: date } : undefined,\n            })\n          }\n          systemId={filters.fillingSystem || \"all\"}\n          onSystemChange={(id: string) =>\n            handleFiltersChange({ fillingSystem: id })\n          }\n          systems={[{ id: \"all\", name: t(\"common.all\") }]} // This should be populated with actual systems\n        />\n\n        <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesFilterPanel.tsx",
        "start": 1,
        "end": 64,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 64,
          "column": 2,
          "position": 605
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesFilterPanel.tsx",
        "start": 1,
        "end": 64,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 64,
          "column": 2,
          "position": 605
        }
      }
    },
    {
      "format": "javascript",
      "lines": 16,
      "fragment": "={isEditDialogOpen}\n        onOpenChange={setIsEditDialogOpen}\n        title={\n          selectedSale\n            ? t(\"sales.editSale\", \"Edit Sale\")\n            : t(\"sales.addSale\", \"Add Sale\")\n        }\n        schema={salesFormSchema}\n        defaultValues={defaultValues}\n        onSubmit={handleSubmit}\n        isSubmitting={isLoading}\n        size=\"lg\"\n      >\n        {({ control }) => (\n          <SalesFormContent \n            control={control",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 171,
        "end": 186,
        "startLoc": {
          "line": 171,
          "column": 5,
          "position": 1319
        },
        "endLoc": {
          "line": 186,
          "column": 8,
          "position": 1409
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 178,
        "end": 193,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1710
        },
        "endLoc": {
          "line": 193,
          "column": 9,
          "position": 1800
        }
      }
    },
    {
      "format": "javascript",
      "lines": 87,
      "fragment": "} \n            employees={employees} \n            totalSales={totalSales}\n            setTotalSales={setTotalSales}\n          />\n        )}\n      </FormDialog>\n\n      <DeleteConfirmDialog\n        open={isDeleteDialogOpen}\n        onOpenChange={setIsDeleteDialogOpen}\n        title=\"Delete Sale Record\"\n        description=\"This will delete the sale record and restore the fuel to the tank. This action cannot be undone.\"\n        onConfirm={confirmDelete}\n        isLoading={isLoading}\n      />\n    </>\n  );\n}\n\n// Separate component to handle the form content with hooks\ninterface SalesFormContentProps {\n  control: Control<{\n    quantity: number;\n    unit_price: number;\n    total_sales?: number;\n    shift_id: string;\n    filling_system_id: string;\n    meter_start: number;\n    meter_end: number;\n    date?: string;\n    comments?: string;\n  }>;\n  employees?: Employee[];\n  totalSales: number;\n  setTotalSales: (value: number) => void;\n}\n\nfunction SalesFormContent({ control, employees, totalSales, setTotalSales }: SalesFormContentProps) {\n  const { t } = useTranslation();\n\n  // Watch for changes to calculate derived values\n  const unitPrice = useWatch({ control, name: \"unit_price\" });\n  const meterStart = useWatch({ control, name: \"meter_start\" });\n  const meterEnd = useWatch({ control, name: \"meter_end\" });\n\n  // Calculate quantity and total sales when meter values or unit price changes\n  useEffect(() => {\n    // Calculate quantity from meter readings\n    const calculatedQuantity = Math.max(0, meterEnd - meterStart);\n\n    // Calculate total sales\n    const calculatedTotal = calculatedQuantity * unitPrice;\n    setTotalSales(calculatedTotal || 0);\n  }, [meterStart, meterEnd, unitPrice, setTotalSales]);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={control}\n          name=\"quantity\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                {t(\"sales.quantity\", \"Quantity\")} (\n                {t(\"common.calculated\", \"Calculated\")})\n              </FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0\"\n                  {...field}\n                  value={field.value}\n                  disabled\n                  className=\"bg-muted\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <PriceAndEmployeeInputs\n          control={control}\n          employees={employees",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 186,
        "end": 272,
        "startLoc": {
          "line": 186,
          "column": 8,
          "position": 1410
        },
        "endLoc": {
          "line": 272,
          "column": 10,
          "position": 1985
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 193,
        "end": 264,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1806
        },
        "endLoc": {
          "line": 264,
          "column": 2,
          "position": 2254
        }
      }
    },
    {
      "format": "javascript",
      "lines": 23,
      "fragment": "}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={control}\n          name=\"meter_start\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                {t(\"sales.meterStart\", \"Meter Start\")}\n              </FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={t(\n                    \"sales.startingMeterReading\",\n                    \"Starting meter reading\"\n                  )}\n                  {...field}\n                  onChange",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 272,
        "end": 294,
        "startLoc": {
          "line": 272,
          "column": 10,
          "position": 1986
        },
        "endLoc": {
          "line": 294,
          "column": 9,
          "position": 2096
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 252,
        "end": 274,
        "startLoc": {
          "line": 252,
          "column": 2,
          "position": 1919
        },
        "endLoc": {
          "line": 274,
          "column": 6,
          "position": 2029
        }
      }
    },
    {
      "format": "javascript",
      "lines": 29,
      "fragment": "\n                  )}\n                  {...field}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={control}\n          name=\"meter_end\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t(\"sales.meterEnd\", \"Meter End\")}</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={t(\n                    \"sales.endingMeterReading\",\n                    \"Ending meter reading\"\n                  )}\n                  {...field}\n                  onChange",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 291,
        "end": 319,
        "startLoc": {
          "line": 291,
          "column": 25,
          "position": 2087
        },
        "endLoc": {
          "line": 319,
          "column": 9,
          "position": 2232
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 283,
        "end": 300,
        "startLoc": {
          "line": 283,
          "column": 13,
          "position": 2362
        },
        "endLoc": {
          "line": 300,
          "column": 6,
          "position": 2176
        }
      }
    },
    {
      "format": "javascript",
      "lines": 41,
      "fragment": "\n                  )}\n                  {...field}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      {/* Display calculated total sales */}\n      <div className=\"bg-muted/30 p-3 rounded-md text-sm\">\n        <div className=\"font-medium\">\n          {t(\"sales.totalSales\", \"Total Sales\")}:{\" \"}\n          {totalSales.toFixed(2)} ֏\n        </div>\n      </div>\n\n      <FillingSystemSelect control={control} />\n\n      <FormField\n        control={control}\n        name=\"comments\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>{t(\"common.comments\", \"Comments\")}</FormLabel>\n            <FormControl>\n              <Input\n                type=\"text\"\n                placeholder={t(\"common.comments\", \"Comments\")}\n                {...field}\n                value={field.value || \"\"}\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 316,
        "end": 356,
        "startLoc": {
          "line": 316,
          "column": 23,
          "position": 2223
        },
        "endLoc": {
          "line": 356,
          "column": 2,
          "position": 2470
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 283,
        "end": 323,
        "startLoc": {
          "line": 283,
          "column": 13,
          "position": 2362
        },
        "endLoc": {
          "line": 323,
          "column": 2,
          "position": 2609
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "import { DeleteConfirmDialog } from \"@/core/components/ui/dialog\";\nimport { Sale } from \"@/types\";\nimport { useTranslation } from \"react-i18next\";\nimport { z } from \"zod\";\nimport {\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage,\n} from \"@/core/components/ui/primitives/form\";\nimport { Input } from \"@/core/components/ui/primitives/input\";\nimport { useEffect, useState } from \"react\";\nimport { PriceAndEmployeeInputs } from \"./form/PriceAndEmployeeInputs\";\nimport { FillingSystemSelect } from \"./form/FillingSystemSelect\";\nimport { FormDialog } from \"@/shared/components/common/dialog/FormDialog\";\nimport { toast } from \"sonner\";\nimport { Employee } from \"@/core/api\";\nimport { useWatch } from \"react-hook-form\";\nimport { Control",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 8,
          "position": 194
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 14,
          "position": 194
        }
      }
    },
    {
      "format": "tsx",
      "lines": 30,
      "fragment": "?: string;\n}\n\ninterface SalesDialogsProps {\n  isEditDialogOpen: boolean;\n  setIsEditDialogOpen: (open: boolean) => void;\n  selectedSale: Sale | null;\n  updateSale: (data: UpdateSaleRequest) => void;\n  isDeleteDialogOpen: boolean;\n  setIsDeleteDialogOpen: (open: boolean) => void;\n  confirmDelete: () => void;\n  isLoading?: boolean;\n  employees?: Employee[];\n}\n\nexport function SalesDialogsStandardized({\n  isEditDialogOpen,\n  setIsEditDialogOpen,\n  selectedSale,\n  updateSale,\n  isDeleteDialogOpen,\n  setIsDeleteDialogOpen,\n  confirmDelete,\n  isLoading = false,\n  employees,\n}: SalesDialogsProps) {\n  const { t } = useTranslation();\n  const [totalSales, setTotalSales] = useState<number>(0);\n\n  // Define the form schema using zod",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 32,
        "end": 61,
        "startLoc": {
          "line": 32,
          "column": 9,
          "position": 275
        },
        "endLoc": {
          "line": 61,
          "column": 36,
          "position": 491
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 36,
        "end": 65,
        "startLoc": {
          "line": 36,
          "column": 16,
          "position": 323
        },
        "endLoc": {
          "line": 65,
          "column": 73,
          "position": 539
        }
      }
    },
    {
      "format": "tsx",
      "lines": 68,
      "fragment": "const salesFormSchema = z\n    .object({\n      quantity: z\n        .number({\n          required_error: t(\"sales.quantityRequired\", \"Quantity is required.\"),\n        })\n        .min(\n          0.01,\n          t(\"sales.quantityPositive\", \"Quantity must be greater than 0\")\n        ),\n      unit_price: z\n        .number({\n          required_error: t(\"sales.priceRequired\", \"Unit price is required.\"),\n        })\n        .min(1, t(\"sales.priceMinimum\", \"Price must be at least 1\")),\n      total_sales: z.number().optional(),\n      shift_id: z.string({\n        required_error: t(\"sales.shiftRequired\", \"Shift is required\"),\n      }),\n      filling_system_id: z.string({\n        required_error: t(\n          \"sales.fillingSystemRequired\",\n          \"Please select a filling system.\"\n        ),\n      }),\n      meter_start: z\n        .number({\n          required_error: t(\n            \"sales.meterStartRequired\",\n            \"Starting meter reading is required.\"\n          ),\n        })\n        .nonnegative(\n          t(\n            \"sales.meterStartPositive\",\n            \"Starting meter reading must be a positive number\"\n          )\n        ),\n      meter_end: z\n        .number({\n          required_error: t(\n            \"sales.meterEndRequired\",\n            \"Ending meter reading is required.\"\n          ),\n        })\n        .nonnegative(\n          t(\n            \"sales.meterEndPositive\",\n            \"Ending meter reading must be a positive number\"\n          )\n        ),\n      date: z.string().optional(),\n      comments: z.string().optional(),\n    })\n    .refine((data) => data.meter_end >= data.meter_start, {\n      message: t(\n        \"sales.meterEndGreater\",\n        \"Ending meter reading must be greater than or equal to starting meter reading\"\n      ),\n      path: [\"meter_end\"],\n    });\n\n  // Create and export the type for use in other components\n  type SalesFormData = z.infer<typeof salesFormSchema>;\n\n  // Prepare default values\n  const defaultValues: Partial<SalesFormData> = {\n    quantity: (",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 62,
        "end": 129,
        "startLoc": {
          "line": 62,
          "column": 3,
          "position": 494
        },
        "endLoc": {
          "line": 129,
          "column": 2,
          "position": 928
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\SalesFormStandardized.tsx",
        "start": 74,
        "end": 141,
        "startLoc": {
          "line": 74,
          "column": 3,
          "position": 652
        },
        "endLoc": {
          "line": 141,
          "column": 5,
          "position": 1086
        }
      }
    },
    {
      "format": "tsx",
      "lines": 50,
      "fragment": ",\n      };\n\n      if (selectedSale?.id) {\n        // Update existing sale\n        updateSale({\n          id: selectedSale.id,\n          ...submissionData,\n        });\n\n        toast.success(t(\"sales.updated\", \"Sale updated.\"));\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error(\"Error updating sale:\", error);\n      toast.error(t(\"sales.updateError\", \"Failed to update sale\"));\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <FormDialog\n        open={isEditDialogOpen}\n        onOpenChange={setIsEditDialogOpen}\n        title={\n          selectedSale\n            ? t(\"sales.editSale\", \"Edit Sale\")\n            : t(\"sales.addSale\", \"Add Sale\")\n        }\n        schema={salesFormSchema}\n        defaultValues={defaultValues}\n        onSubmit={handleSubmit}\n        isSubmitting={isLoading}\n        size=\"lg\"\n      >\n        {({ control }) => (\n          <SalesFormContent \n            control={control} \n            employees={employees} \n            totalSales={totalSales}\n            setTotalSales={setTotalSales}\n          />\n        )}\n      </FormDialog>\n\n      <DeleteConfirmDialog\n        open",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 146,
        "end": 195,
        "startLoc": {
          "line": 146,
          "column": 11,
          "position": 1175
        },
        "endLoc": {
          "line": 195,
          "column": 5,
          "position": 1446
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 153,
        "end": 202,
        "startLoc": {
          "line": 153,
          "column": 8,
          "position": 1566
        },
        "endLoc": {
          "line": 202,
          "column": 7,
          "position": 1842
        }
      }
    },
    {
      "format": "tsx",
      "lines": 116,
      "fragment": ";\n  employees?: Employee[];\n  totalSales: number;\n  setTotalSales: (value: number) => void;\n}\n\nfunction SalesFormContent({ control, employees, totalSales, setTotalSales }: SalesFormContentProps) {\n  const { t } = useTranslation();\n\n  // Watch for changes to calculate derived values\n  const unitPrice = useWatch({ control, name: \"unit_price\" });\n  const meterStart = useWatch({ control, name: \"meter_start\" });\n  const meterEnd = useWatch({ control, name: \"meter_end\" });\n\n  // Calculate quantity and total sales when meter values or unit price changes\n  useEffect(() => {\n    // Calculate quantity from meter readings\n    const calculatedQuantity = Math.max(0, meterEnd - meterStart);\n\n    // Calculate total sales\n    const calculatedTotal = calculatedQuantity * unitPrice;\n    setTotalSales(calculatedTotal || 0);\n  }, [meterStart, meterEnd, unitPrice, setTotalSales]);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={control}\n          name=\"quantity\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                {t(\"sales.quantity\", \"Quantity\")} (\n                {t(\"common.calculated\", \"Calculated\")})\n              </FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0\"\n                  {...field}\n                  value={field.value}\n                  disabled\n                  className=\"bg-muted\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <PriceAndEmployeeInputs\n          control={control}\n          employees={employees}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={control}\n          name=\"meter_start\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>\n                {t(\"sales.meterStart\", \"Meter Start\")}\n              </FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={t(\n                    \"sales.startingMeterReading\",\n                    \"Starting meter reading\"\n                  )}\n                  {...field}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={control}\n          name=\"meter_end\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t(\"sales.meterEnd\", \"Meter End\")}</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={t(\n                    \"sales.endingMeterReading\",\n                    \"Ending meter reading\"\n                  )}\n                  {...field}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      {/* Display calculated total sales */}\n      <div className=\"bg-muted/30 p-3 rounded-md text-sm\">\n        <div className=\"font-medium\">\n          {t(\"sales.totalSales\", \"Total Sales\")}:{\" \"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 218,
        "end": 333,
        "startLoc": {
          "line": 218,
          "column": 2,
          "position": 1581
        },
        "endLoc": {
          "line": 333,
          "column": 4,
          "position": 2325
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 214,
        "end": 315,
        "startLoc": {
          "line": 214,
          "column": 2,
          "position": 1902
        },
        "endLoc": {
          "line": 315,
          "column": 11,
          "position": 2281
        }
      }
    },
    {
      "format": "tsx",
      "lines": 37,
      "fragment": "\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t(\"sales.meterEnd\", \"Meter End\")}</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder={t(\n                    \"sales.endingMeterReading\",\n                    \"Ending meter reading\"\n                  )}\n                  {...field}\n                  onChange={(e) =>\n                    field.onChange(parseFloat(e.target.value) || 0)\n                  }\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      {/* Display calculated total sales */}\n      <div className=\"bg-muted/30 p-3 rounded-md text-sm\">\n        <div className=\"font-medium\">\n          {t(\"sales.totalSales\", \"Total Sales\")}:{\" \"}\n          {totalSales.toFixed(2)} ֏\n        </div>\n      </div>\n\n      <FillingSystemSelect control={control} />\n\n      <FormField\n        control={control}\n        name=\"comments",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDialogsStandardized.tsx",
        "start": 306,
        "end": 342,
        "startLoc": {
          "line": 306,
          "column": 10,
          "position": 2159
        },
        "endLoc": {
          "line": 342,
          "column": 9,
          "position": 2377
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDialogsStandardized.tsx",
        "start": 271,
        "end": 309,
        "startLoc": {
          "line": 271,
          "column": 10,
          "position": 2296
        },
        "endLoc": {
          "line": 309,
          "column": 6,
          "position": 2516
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "import { StandardDatePicker } from \"@/shared/components/common/datepicker\";\nimport React from \"react\";\n\ninterface SalesDatePickerProps {\n  date: Date | undefined;\n  onDateChange: (date: Date | undefined) => void;\n}\n\nexport function SalesDatePicker({ date, onDateChange }: SalesDatePickerProps) {\n  return (\n    <StandardDatePicker\n      value={date}\n      onChange={onDateChange}\n      label=\"Date\"\n      mode=\"single\"\n      className=\"w-full\"\n    />\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\SalesDatePicker.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 129
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\SalesDatePicker.tsx",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 129
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": " {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expenses\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {t(\"finance.profitLoss.expenses\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ProfitLossManagerStandardized.tsx",
        "start": 269,
        "end": 282,
        "startLoc": {
          "line": 269,
          "column": 2,
          "position": 1980
        },
        "endLoc": {
          "line": 282,
          "column": 30,
          "position": 2049
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\ProfitLossManagerStandardized.tsx",
        "start": 253,
        "end": 266,
        "startLoc": {
          "line": 253,
          "column": 6,
          "position": 1882
        },
        "endLoc": {
          "line": 266,
          "column": 29,
          "position": 1951
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": ")}\n                    </FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={(",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ProfitLossManagerStandardized.tsx",
        "start": 282,
        "end": 296,
        "startLoc": {
          "line": 282,
          "column": 11,
          "position": 2053
        },
        "endLoc": {
          "line": 296,
          "column": 2,
          "position": 2129
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\ProfitLossManagerStandardized.tsx",
        "start": 266,
        "end": 277,
        "startLoc": {
          "line": 266,
          "column": 10,
          "position": 1955
        },
        "endLoc": {
          "line": 277,
          "column": 5,
          "position": 2014
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": ";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/core/components/ui/dialog\";\nimport { Button } from \"@/core/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/core/components/ui/form\";\nimport { Input } from \"@/core/components/ui/primitives/input\";\nimport { useFinance",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ProfitLossManagerStandardized.tsx",
        "start": 7,
        "end": 26,
        "startLoc": {
          "line": 7,
          "column": 24,
          "position": 92
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 191
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\TransactionDialogStandardized.tsx",
        "start": 5,
        "end": 23,
        "startLoc": {
          "line": 5,
          "column": 6,
          "position": 59
        },
        "endLoc": {
          "line": 23,
          "column": 9,
          "position": 157
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ";\nimport { useState, useRef } from \"react\";\nimport { salesApi } from \"@/core/api\";\nimport { useToast } from \"@/hooks\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport React from \"react\";\nimport { CreateButton } from \"@/core/components/ui/create-button\";\nimport { Sale } from \"@/core/api/types\";\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\NewSaleButton.tsx",
        "start": 3,
        "end": 12,
        "startLoc": {
          "line": 3,
          "column": 26,
          "position": 40
        },
        "endLoc": {
          "line": 12,
          "column": 10,
          "position": 133
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\NewSaleButton.tsx",
        "start": 3,
        "end": 11,
        "startLoc": {
          "line": 3,
          "column": 11,
          "position": 37
        },
        "endLoc": {
          "line": 11,
          "column": 7,
          "position": 129
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": ";\n\ninterface NewSaleButtonProps {\n  className?: string;\n}\n\nexport function NewSaleButton({ className }: NewSaleButtonProps = {}) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const triggerRef = useRef<HTMLButtonElement>(null);\n\n  const handleSubmit = async (data: SalesFormData): Promise<boolean> => {\n    try {\n      // Map form data to API format\n      const saleData: Omit<Sale, \"id\" | \"created_at\" | \"updated_at\"> = {\n        filling_system_id: data.filling_system_id",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\NewSaleButton.tsx",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 19,
          "position": 130
        },
        "endLoc": {
          "line": 26,
          "column": 18,
          "position": 302
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\NewSaleButton.tsx",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 52,
          "position": 140
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 312
        }
      }
    },
    {
      "format": "tsx",
      "lines": 44,
      "fragment": ",\n      };\n\n      await salesApi.createSale(saleData);\n      queryClient.invalidateQueries({ queryKey: [\"sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"fuel-tanks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"latest-sale\"] });\n\n      toast({\n        title: \"Success\",\n        description: \"Sale created successfully and tank level updated\",\n      });\n\n      setIsOpen(false);\n      return true;\n    } catch (error: unknown) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create sale\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error creating sale:\", error);\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <CreateButton\n        ref={triggerRef}\n        label=\"Add Sale\"\n        className={className}\n        onClick={() => setIsOpen(true)}\n      />\n      <StandardDialog\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        title=\"Add New Sale\"\n      >\n        <SalesFormStandardized onSubmit={handleSubmit} />\n      </StandardDialog>\n    </>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\NewSaleButton.tsx",
        "start": 33,
        "end": 76,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 370
        },
        "endLoc": {
          "line": 76,
          "column": 2,
          "position": 663
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\NewSaleButton.tsx",
        "start": 34,
        "end": 77,
        "startLoc": {
          "line": 34,
          "column": 2,
          "position": 416
        },
        "endLoc": {
          "line": 77,
          "column": 2,
          "position": 709
        }
      }
    },
    {
      "format": "tsx",
      "lines": 50,
      "fragment": "import * as React from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/core/components/ui/primitives/select\";\n\ninterface FillingSystemSelectProps {\n  value: string;\n  onChange: (value: string) => void;\n  systems: { id: string; name: string }[];\n  placeholder?: string;\n  className?: string;\n}\n\nexport function FillingSystemSelect({\n  value,\n  onChange,\n  systems = [],\n  placeholder = \"All systems\",\n  className = \"\",\n}: FillingSystemSelectProps) {\n  // Ensure systems is always an array\n  const systemsList = Array.isArray(systems) ? systems : [];\n\n  return (\n    <div className=\"flex flex-col gap-1.5\">\n      <label className=\"text-xs font-medium text-muted-foreground\">\n        Filling System\n      </label>\n      <Select value={value} onValueChange={onChange}>\n        <SelectTrigger\n          className={`h-9 px-3 py-2 w-full rounded-md border border-input bg-gray-50 text-sm ${className}`}\n        >\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">All systems</SelectItem>\n          {systemsList.map((sys) => (\n            <SelectItem key={sys.id} value={sys.id}>\n              {sys.name}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\FillingSystemSelect.tsx",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 372
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\components\\FillingSystemSelect.tsx",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 372
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "?: { id: string; name: string }[];\n  onFiltersChange?: (filters: FiltersShape) => void;\n  totalCount?: number;\n  onPageChange?: (page: number, pageSize: number) => void;\n  onSortChange?: (column: string | null, direction: \"asc\" | \"desc\") => void;\n}\n\nexport function ExpensesTableStandardized",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\finance\\components\\ExpensesTableStandardized.tsx",
        "start": 20,
        "end": 27,
        "startLoc": {
          "line": 20,
          "column": 15,
          "position": 186
        },
        "endLoc": {
          "line": 27,
          "column": 26,
          "position": 293
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeesTableStandardized.tsx",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 260
        },
        "endLoc": {
          "line": 37,
          "column": 27,
          "position": 367
        }
      }
    },
    {
      "format": "typescript",
      "lines": 180,
      "fragment": "/**\n * useFillingSystem Hook\n *\n * Custom hook for working with filling systems data using React Query\n */\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/core/hooks/useToast\";\nimport {\n  apiNamespaces,\n  getApiErrorMessage,\n  getApiSuccessMessage,\n} from \"@/i18n/i18n\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  getFillingSystemsWithFilters,\n  getFillingSystemById,\n  createFillingSystem as createFillingSystemService,\n  updateFillingSystem as updateFillingSystemService,\n  deleteFillingSystem as deleteFillingSystemService,\n  validateTankIds as validateTankIdsService,\n} from \"../services\";\nimport type {\n  FillingSystem,\n  CreateFillingSystemRequest,\n  UpdateFillingSystemRequest,\n  FillingSystemFilters,\n} from \"../types\";\n\n/**\n * Hook for managing filling systems with React Query\n */\nexport const useFillingSystem = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n\n  /**\n   * Query to fetch filling systems with optional filters\n   */\n  const useFillingSystemsQuery = (filters?: FillingSystemFilters) => {\n    return useQuery({\n      queryKey: [\"filling-systems\", filters],\n      queryFn: () => getFillingSystemsWithFilters(filters),\n    });\n  };\n\n  /**\n   * Query to fetch a single filling system by ID\n   */\n  const useFillingSystemByIdQuery = (id: string) => {\n    return useQuery({\n      queryKey: [\"filling-system\", id],\n      queryFn: () => getFillingSystemById(id),\n      enabled: !!id,\n    });\n  };\n\n  /**\n   * Mutation to create a new filling system\n   */\n  const useCreateFillingSystemMutation = () => {\n    return useMutation({\n      mutationFn: (data: CreateFillingSystemRequest) =>\n        createFillingSystemService(data),\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"filling-systems\"] });\n        toast({\n          title: t(\"common.success\"),\n          description: getApiSuccessMessage(\n            apiNamespaces.fillingSystems,\n            \"create\",\n            \"filling system\"\n          ),\n        });\n      },\n      onError: (error) => {\n        toast({\n          title: t(\"common.error\"),\n          description: getApiErrorMessage(\n            apiNamespaces.fillingSystems,\n            \"create\",\n            \"filling system\"\n          ),\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  /**\n   * Mutation to update an existing filling system\n   */\n  const useUpdateFillingSystemMutation = () => {\n    return useMutation({\n      mutationFn: ({\n        id,\n        data,\n      }: {\n        id: string;\n        data: UpdateFillingSystemRequest;\n      }) => updateFillingSystemService(id, data),\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"filling-systems\"] });\n        toast({\n          title: t(\"common.success\"),\n          description: getApiSuccessMessage(\n            apiNamespaces.fillingSystems,\n            \"update\",\n            \"filling system\"\n          ),\n        });\n      },\n      onError: (error) => {\n        toast({\n          title: t(\"common.error\"),\n          description: getApiErrorMessage(\n            apiNamespaces.fillingSystems,\n            \"update\",\n            \"filling system\"\n          ),\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  /**\n   * Mutation to delete a filling system\n   */\n  const useDeleteFillingSystemMutation = () => {\n    return useMutation({\n      mutationFn: (id: string) => deleteFillingSystemService(id),\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"filling-systems\"] });\n        toast({\n          title: t(\"common.success\"),\n          description: getApiSuccessMessage(\n            apiNamespaces.fillingSystems,\n            \"delete\",\n            \"filling system\"\n          ),\n        });\n      },\n      onError: (error) => {\n        toast({\n          title: t(\"common.error\"),\n          description: getApiErrorMessage(\n            apiNamespaces.fillingSystems,\n            \"delete\",\n            \"filling system\"\n          ),\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  /**\n   * Validate tank IDs\n   * This is a utility function used by the diagnostics tool\n   */\n  const validateTankIds = async (tankIds: string[]) => {\n    try {\n      return await validateTankIdsService(tankIds);\n    } catch (error) {\n      console.error(\"Failed to validate tank IDs:\", error);\n      return { valid: false, invalidIds: tankIds };\n    }\n  };\n\n  return {\n    useFillingSystemsQuery,\n    useFillingSystemByIdQuery,\n    useCreateFillingSystemMutation,\n    useUpdateFillingSystemMutation,\n    useDeleteFillingSystemMutation,\n    validateTankIds,\n  };\n};",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\hooks\\useFillingSystem.ts",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1102
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFillingSystem.ts",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1102
        }
      }
    },
    {
      "format": "tsx",
      "lines": 94,
      "fragment": "import React, { useMemo, useCallback } from \"react\";\nimport { useDialog } from \"@/core/hooks/useDialog\";\nimport { useFillingSystem } from \"../hooks/useFillingSystem\";\nimport { FillingSystem } from \"../types\";\n\n// Import components within the feature\nimport { FillingSystemHeader } from \"./FillingSystemHeader\";\nimport { FillingSystemList } from \"./FillingSystemList\";\nimport { FillingSystemFormStandardized } from \"./FillingSystemFormStandardized\";\n\ninterface FillingSystemManagerStandardizedProps {\n  onRenderAction?: (actionElement: React.ReactNode) => void;\n}\n\nexport function FillingSystemManagerStandardized({\n  onRenderAction,\n}: FillingSystemManagerStandardizedProps) {\n  // Use dialog hook for managing the form dialog\n  const formDialog = useDialog();\n\n  // Use the custom hook for filling systems\n  const { useFillingSystemsQuery } = useFillingSystem();\n\n  // Query for filling systems data\n  const {\n    data: fillingSystemsResponse,\n    isLoading,\n    refetch,\n  } = useFillingSystemsQuery();\n\n  // Memoize the action element\n  const actionElement = useMemo(\n    () => (\n      <FillingSystemHeader onAddNew={formDialog.open} showAddButton={false} />\n    ),\n    [formDialog.open]\n  );\n\n  // Call the onRenderAction prop with the memoized action element if provided\n  React.useEffect(() => {\n    if (onRenderAction) {\n      onRenderAction(actionElement);\n    }\n  }, [onRenderAction, actionElement]);\n\n  // Memoize the filling systems data\n  const fillingSystemsData = useMemo(() => {\n    if (!fillingSystemsResponse) {\n      return [];\n    }\n    // Map the API response to our feature's FillingSystem type\n    return fillingSystemsResponse.map(\n      (apiSystem) =>\n        ({\n          id: apiSystem.id,\n          name: apiSystem.name,\n          status: apiSystem.status || \"active\",\n          type: \"standard\", // Add default type since it's not in the API response\n          tank_id: apiSystem.tank_id,\n          location: apiSystem.location,\n          created_at: apiSystem.created_at,\n          updated_at: apiSystem.updated_at,\n        }) as FillingSystem\n    );\n  }, [fillingSystemsResponse]);\n\n  // Memoize the delete handler\n  const handleDelete = useCallback(() => {\n    refetch();\n  }, [refetch]);\n\n  // Memoize the success handler\n  const handleSuccess = useCallback(() => {\n    formDialog.close();\n    refetch();\n  }, [formDialog, refetch]);\n\n  return (\n    <div className=\"space-y-6\">\n      <FillingSystemList\n        fillingSystems={fillingSystemsData}\n        isLoading={isLoading}\n        onDelete={handleDelete}\n      />\n\n      <FillingSystemFormStandardized\n        open={formDialog.isOpen}\n        onOpenChange={formDialog.onOpenChange}\n        onSuccess={handleSuccess}\n      />\n\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemManagerStandardized.tsx",
        "start": 1,
        "end": 94,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 94,
          "column": 2,
          "position": 646
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemManagerStandardized.tsx",
        "start": 1,
        "end": 94,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 94,
          "column": 2,
          "position": 646
        }
      }
    },
    {
      "format": "javascript",
      "lines": 39,
      "fragment": "={system.id} className=\"border-t\">\n                <td className=\"p-3\">{system.name}</td>\n                <td className=\"p-3\">\n                  {system.tank_id\n                    ? (() => {\n                        const tank = getTankDetails(system.tank_id);\n                        if (!tank) return t(\"common.unknown\");\n                        return (\n                          <span className=\"flex items-center\">\n                            {tank.name}\n                            <span className=\"ml-2 text-xs text-muted-foreground\">\n                              ({tank.fuel_type_id})\n                            </span>\n                          </span>\n                        );\n                      })()\n                    : t(\"common.unknown\")}\n                </td>\n                <td className=\"p-3 text-center\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => openDeleteConfirm(system)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <DeleteConfirmDialog\n        open={deleteDialog.open}\n        onOpenChange={(open) => setDeleteDialog({ open, id: null })}\n        onConfirm={handleDeleteConfirm}\n        description=\"Are you sure you want to delete this filling system? This action cannot be undone.\"\n        isLoading={isDeleting}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemList.tsx",
        "start": 104,
        "end": 142,
        "startLoc": {
          "line": 104,
          "column": 4,
          "position": 880
        },
        "endLoc": {
          "line": 142,
          "column": 2,
          "position": 1191
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemList.tsx",
        "start": 104,
        "end": 143,
        "startLoc": {
          "line": 104,
          "column": 4,
          "position": 880
        },
        "endLoc": {
          "line": 143,
          "column": 2,
          "position": 1199
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "import { useState } from \"react\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { tanksApi } from \"@/core/api\";\nimport { FillingSystem } from \"@/features/filling-systems/types\";\nimport { FuelTank } from \"@/features/fuel-management/types\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemList.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 35,
          "position": 114
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemList.tsx",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 11,
          "position": 114
        }
      }
    },
    {
      "format": "tsx",
      "lines": 129,
      "fragment": ";\nimport { DeleteConfirmDialog } from \"@/shared/components/common/dialog/DeleteConfirmDialog\";\n\ninterface FillingSystemListProps {\n  fillingSystems: FillingSystem[];\n  isLoading: boolean;\n  onDelete: () => void;\n}\n\nexport function FillingSystemList({\n  fillingSystems,\n  isLoading,\n  onDelete,\n}: FillingSystemListProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [systemToDelete, setSystemToDelete] = useState<FillingSystem | null>(\n    null\n  );\n  const [deleteDialog, setDeleteDialog] = useState({ open: false, id: null });\n\n  // Fetch tanks to associate with filling systems\n  const { data: tanks } = useQuery({\n    queryKey: [\"tanks\"],\n    queryFn: tanksApi.getTanks,\n  });\n\n  // Get tank details for a given tank ID\n  const getTankDetails = (tankId: string): FuelTank | undefined => {\n    return tanks?.data?.find((tank) => tank.id === tankId) as\n      | FuelTank\n      | undefined;\n  };\n\n  const openDeleteConfirm = (system: FillingSystem) => {\n    setSystemToDelete(system);\n    setIsConfirmOpen(true);\n  };\n\n  const closeDeleteConfirm = () => {\n    setIsConfirmOpen(false);\n    // Reset system to delete after a brief delay to allow the dialog closing animation\n    setTimeout(() => setSystemToDelete(null), 300);\n  };\n\n  const handleDelete = async () => {\n    if (!systemToDelete) return;\n\n    setIsDeleting(true);\n    try {\n      // Note: This would be handled through useFillingSystem in FillingSystemManagerStandardized\n      onDelete();\n      closeDeleteConfirm();\n    } catch (error) {\n      toast({\n        title: t(\"common.error\"),\n        message: t(\"fillingSystems.errorAddingSystem\"),\n        type: \"error\",\n      });\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const handleDeleteConfirm = () => {\n    // Implementation of handleDeleteConfirm\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full p-8 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">{t(\"common.loading\")}</div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"overflow-hidden rounded-md border\">\n        <table className=\"w-full table-fixed\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"p-3 text-left font-medium\">\n                {t(\"fillingSystems.systemName\")}\n              </th>\n              <th className=\"p-3 text-left font-medium\">\n                {t(\"fillingSystems.connectedTank\")}\n              </th>\n              <th className=\"p-3 text-center w-24\">{t(\"common.actions\")}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {fillingSystems.map((system) => (\n              <tr key={system.id} className=\"border-t\">\n                <td className=\"p-3\">{system.name}</td>\n                <td className=\"p-3\">\n                  {system.tank_id\n                    ? (() => {\n                        const tank = getTankDetails(system.tank_id);\n                        if (!tank) return t(\"common.unknown\");\n                        return (\n                          <span className=\"flex items-center\">\n                            {tank.name}\n                            <span className=\"ml-2 text-xs text-muted-foreground\">\n                              ({tank.fuel_type_id})\n                            </span>\n                          </span>\n                        );\n                      })()\n                    : t(\"common.unknown\")}\n                </td>\n                <td className=\"p-3 text-center\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => openDeleteConfirm(system)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemList.tsx",
        "start": 9,
        "end": 137,
        "startLoc": {
          "line": 9,
          "column": 35,
          "position": 115
        },
        "endLoc": {
          "line": 137,
          "column": 2,
          "position": 1141
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemList.tsx",
        "start": 9,
        "end": 137,
        "startLoc": {
          "line": 9,
          "column": 11,
          "position": 115
        },
        "endLoc": {
          "line": 137,
          "column": 2,
          "position": 1141
        }
      }
    },
    {
      "format": "tsx",
      "lines": 36,
      "fragment": "import { Button } from \"@/core/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { apiNamespaces, getApiActionLabel } from \"@/i18n/i18n\";\n\ninterface FillingSystemHeaderProps {\n  onAddNew: () => void;\n  showAddButton?: boolean;\n}\n\nexport function FillingSystemHeader({\n  onAddNew,\n  showAddButton = true,\n}: FillingSystemHeaderProps) {\n  const { t } = useTranslation();\n\n  // Get translated title using API helpers or fallback to direct translation\n  const title =\n    t(\"fillingSystems.title\") ||\n    getApiActionLabel(apiNamespaces.fillingSystems, \"list\");\n  const addButtonText =\n    t(\"fillingSystems.addFillingSystem\") ||\n    getApiActionLabel(apiNamespaces.fillingSystems, \"create\");\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <h1 className=\"text-2xl font-semibold\">{title}</h1>\n      {showAddButton && (\n        <Button onClick={onAddNew}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          {addButtonText}\n        </Button>\n      )}\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemHeader.tsx",
        "start": 1,
        "end": 36,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 275
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemHeader.tsx",
        "start": 1,
        "end": 36,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 275
        }
      }
    },
    {
      "format": "javascript",
      "lines": 38,
      "fragment": "={() => onOpenChange(false)}\n        disabled={isSubmitting}\n      >\n        {cancelButton}\n      </Button>\n      <Button type=\"submit\" disabled={isSubmitting} form=\"filling-system-form\">\n        {isSubmitting ? creatingButton : createButton}\n      </Button>\n    </div>\n  );\n\n  return (\n    <StandardDialog\n      isOpen={open}\n      onOpenChange={onOpenChange}\n      title={title}\n      description={description}\n      className=\"sm:max-w-[425px]\"\n      footer={formActions}\n    >\n      <form\n        id=\"filling-system-form\"\n        onSubmit={handleSubmit}\n        className=\"space-y-4\"\n      >\n        <FormInput\n          name=\"name\"\n          label={systemNameLabel}\n          form={form}\n          placeholder={systemNamePlaceholder}\n        />\n\n        <FormSelect\n          name=\"tank_id\"\n          label={tankLabel}\n          form={form}\n          options={tankOptions}\n          placeholder={tankPlaceholder}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemFormStandardized.tsx",
        "start": 106,
        "end": 143,
        "startLoc": {
          "line": 106,
          "column": 8,
          "position": 894
        },
        "endLoc": {
          "line": 143,
          "column": 2,
          "position": 1110
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemFormStandardized.tsx",
        "start": 106,
        "end": 144,
        "startLoc": {
          "line": 106,
          "column": 8,
          "position": 894
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1116
        }
      }
    },
    {
      "format": "tsx",
      "lines": 119,
      "fragment": "import { z } from \"zod\";\nimport { StandardDialog } from \"@/core/components/ui/composed/base-dialog\";\nimport { Button } from \"@/core/components/ui/button\";\nimport { useToast } from \"@/hooks\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { tanksApi } from \"@/core/api\";\nimport {\n  FormInput,\n  FormSelect,\n} from \"@/core/components/ui/composed/form-fields\";\nimport { useZodForm, useFormSubmitHandler } from \"@/shared/hooks/use-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { apiNamespaces, getApiActionLabel } from \"@/i18n/i18n\";\nimport { useFillingSystem } from \"../hooks/useFillingSystem\";\n\ninterface FillingSystemFormStandardizedProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n}\n\n// Define Zod schema for validation\nconst fillingSystemSchema = z.object({\n  name: z\n    .string({ required_error: \"Name is required\" })\n    .min(2, \"Name must be at least 2 characters\"),\n  tank_id: z.string({ required_error: \"Tank selection is required\" }),\n});\n\n// Type based on schema\ntype FillingSystemFormData = z.infer<typeof fillingSystemSchema>;\n\nexport function FillingSystemFormStandardized({\n  open,\n  onOpenChange,\n  onSuccess,\n}: FillingSystemFormStandardizedProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const { useCreateFillingSystemMutation } = useFillingSystem();\n  const createFillingSystemMutation = useCreateFillingSystemMutation();\n\n  // Initialize form with Zod validation\n  const form = useZodForm({\n    schema: fillingSystemSchema,\n    defaultValues: {\n      name: \"\",\n      tank_id: \"\",\n    },\n  });\n\n  const { data: tanks } = useQuery({\n    queryKey: [\"fuel-tanks\"],\n    queryFn: tanksApi.getTanks,\n  });\n\n  // Format tanks as options for select\n  const tankOptions =\n    tanks?.data?.map((tank) => ({\n      value: tank.id,\n      label: `${tank.name} (${tank.fuel_type_id})`,\n    })) || [];\n\n  // Get translated strings or use API translation helpers\n  const title =\n    t(\"fillingSystems.addSystem\") ||\n    getApiActionLabel(apiNamespaces.fillingSystems, \"create\");\n  const description =\n    t(\"fillingSystems.addSystemDescription\") ||\n    \"Create a new filling system connected to a fuel tank\";\n  const cancelButton = t(\"common.cancel\") || \"Cancel\";\n  const createButton = t(\"common.create\") || \"Create System\";\n  const creatingButton = t(\"common.creating\") || \"Creating...\";\n  const systemNameLabel = t(\"fillingSystems.systemName\") || \"System Name\";\n  const systemNamePlaceholder =\n    t(\"fillingSystems.enterSystemName\") || \"Enter system name\";\n  const tankLabel = t(\"fillingSystems.associatedTank\") || \"Associated Tank\";\n  const tankPlaceholder = t(\"fillingSystems.selectTank\") || \"Select a tank\";\n\n  // Form submission handler\n  const { isSubmitting, onSubmit: handleSubmit } =\n    useFormSubmitHandler<FillingSystemFormData>(form, async (data) => {\n      try {\n        // Use the mutation from our hook\n        await createFillingSystemMutation.mutateAsync({\n          name: data.name,\n          tank_id: data.tank_id,\n          location: \"Default Location\",\n          status: \"active\",\n          type: \"standard\",\n        });\n        form.reset();\n        onSuccess();\n        return true;\n      } catch (error) {\n        return false;\n      }\n    });\n\n  // Create form actions\n  const formActions = (\n    <div className=\"flex justify-end space-x-2\">\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={() => onOpenChange(false)}\n        disabled={isSubmitting}\n      >\n        {cancelButton}\n      </Button>\n      <Button type=\"submit\" disabled={isSubmitting} form=\"filling-system-form\">\n        {isSubmitting ? creatingButton : createButton}\n      </Button>\n    </div>\n  );\n\n  return (\n    <StandardDialog\n      isOpen",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemFormStandardized.tsx",
        "start": 1,
        "end": 119,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 119,
          "column": 7,
          "position": 985
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemFormStandardized.tsx",
        "start": 1,
        "end": 119,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 119,
          "column": 5,
          "position": 985
        }
      }
    },
    {
      "format": "tsx",
      "lines": 53,
      "fragment": "import { Card, CardContent, CardHeader, CardTitle } from \"@/core/components/ui/card\";\nimport { Edit, Trash2 } from 'lucide-react';\nimport { Separator } from \"@/core/components/ui/separator\";\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useTranslation } from \"react-i18next\";\nimport { FillingSystemFormDialog } from \"./FillingSystemFormDialog\";\nimport { toast } from \"sonner\";\nimport { fillingsApi, FillingSystem } from \"@/core/api\";\n\nconst FillingSystemCard: React.FC = () => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [fillingSystem, setFillingSystem] = useState<FillingSystem | null>(null);\n  const { t } = useTranslation();\n  const queryClient = useQueryClient();\n\n  const handleEdit = (system: FillingSystem) => {\n    setFillingSystem(system);\n    setIsEditing(true);\n  };\n\n  const handleDelete = (system: FillingSystem) => {\n    setFillingSystem(system);\n    setIsDeleting(true);\n  };\n\n  const handleSave = (system: FillingSystem) => {\n    // Implement the logic to save the updated system\n    queryClient.invalidateQueries({ queryKey: [\"fillingSystems\"] });\n    toast.success(\"Filling system updated successfully\");\n    setIsEditing(false);\n  };\n\n  const handleDeleteConfirm = async () => {\n    if (fillingSystem) {\n      try {\n        await fillingsApi.deleteFillingSystem(fillingSystem.id);\n        queryClient.invalidateQueries({ queryKey: [\"fillingSystems\"] });\n        toast.success(\"Filling system deleted successfully\");\n        setIsDeleting(false);\n      } catch (error) {\n        toast.error(\"Failed to delete filling system\");\n      }\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col justify-between\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{t(\"fillingSystemCard.title\")}</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemCard.tsx",
        "start": 1,
        "end": 53,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 53,
          "column": 13,
          "position": 531
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemCard.tsx",
        "start": 1,
        "end": 53,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 53,
          "column": 13,
          "position": 580
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ">\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-sm font-medium\">\n          {fillingSystem ? fillingSystem.name : t(\"fillingSystemCard.noSystem\")}\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          {fillingSystem ? fillingSystem.location : t(\"fillingSystemCard.noLocation\")}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FillingSystemCard;",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\components\\FillingSystemCard.tsx",
        "start": 63,
        "end": 80,
        "startLoc": {
          "line": 63,
          "column": 11,
          "position": 611
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 736
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\components\\FillingSystemCard.tsx",
        "start": 63,
        "end": 80,
        "startLoc": {
          "line": 63,
          "column": 11,
          "position": 663
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 805
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ")}</span>\n            </Button>\n          </div>\n        </PageHeader>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-4\">\n        {/* Alert for when no data might be available */}\n        {(dateRange.from > new Date() ||\n          (dateRange.to &&\n            dateRange.to <\n              new Date(Date.now() - 365 * 24 * 60 * 60 * 1000))) && (\n          <Alert variant=\"default\" className=\"bg-muted border-amber-500/50",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\expenses\\pages\\ExpensesPage.tsx",
        "start": 234,
        "end": 247,
        "startLoc": {
          "line": 234,
          "column": 9,
          "position": 1964
        },
        "endLoc": {
          "line": 247,
          "column": 29,
          "position": 2095
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesPage.tsx",
        "start": 167,
        "end": 180,
        "startLoc": {
          "line": 167,
          "column": 11,
          "position": 1339
        },
        "endLoc": {
          "line": 180,
          "column": 54,
          "position": 1470
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "import * as React from \"react\";\n\nimport { cn } from \"@/shared/utils/cn\";\n\n/**\n * FilterPanel component\n *\n * @placeholder This is a placeholder component that needs proper implementation\n */\nexport function FilterPanel({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div className={cn(\"-filter-panel\", className)} {...props}>\n      {/* Placeholder for FilterPanel implementation */}\n      <div className=\"p-4 border border-dashed border-gray-300 rounded-md text-center text-gray-500\">\n        FilterPanel (Placeholder)\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\expenses\\components\\FilterPanel.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\FilterPanel.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "import * as React from \"react\";\n\nimport { cn } from \"@/shared/utils/cn\";\n\n/**\n * ExpensesTable component\n *\n * @placeholder This is a placeholder component that needs proper implementation\n */\nexport function ExpensesTable({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div className={cn(\"-expenses-table\", className)} {...props}>\n      {/* Placeholder for ExpensesTable implementation */}\n      <div className=\"p-4 border border-dashed border-gray-300 rounded-md text-center text-gray-500\">\n        ExpensesTable (Placeholder)\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\expenses\\components\\ExpensesTable.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\components\\ExpensesTable.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      }
    },
    {
      "format": "typescript",
      "lines": 99,
      "fragment": "import type { Database } from \"@/types/supabase\";\nimport type { Employee, EmployeeFormData } from \"../types/employees.types\";\n\n// Type for database employees shape\nexport type DbEmployee = Database[\"public\"][\"Tables\"][\"employees\"][\"Row\"];\n\n/**\n * Extract department information from status field\n * @param status - Status string which may contain department info\n */\nexport function extractDepartment(status: string): string {\n  if (status.includes(\"dept:\")) {\n    return status.replace(\"dept:\", \"\");\n  }\n  return \"general\";\n}\n\n/**\n * Normalize status to one of the allowed values\n * @param status - Status string from database\n */\nexport function normalizeStatus(\n  status: string\n): \"active\" | \"inactive\" | \"on_leave\" {\n  if (status.includes(\"dept:\")) {\n    return \"active\";\n  }\n\n  if ([\"active\", \"inactive\", \"on_leave\"].includes(status)) {\n    return status as \"active\" | \"inactive\" | \"on_leave\";\n  }\n\n  return \"active\"; // Default fallback\n}\n\n/**\n * Maps a database employee record to a domain Employee model\n * @param dbEmployee - Employee record from database\n * @returns Domain Employee model\n */\nexport function mapDbToEmployee(dbEmployee: DbEmployee): Employee {\n  // Parse name into first and last name (assuming format \"First Last\")\n  const nameParts = dbEmployee.name.split(\" \");\n  const firstName = nameParts[0] || \"\";\n  const lastName = nameParts.slice(1).join(\" \") || \"\";\n\n  // Parse contact string (assuming format \"email|phone\")\n  const contactParts = dbEmployee.contact.split(\"|\");\n  const email = contactParts[0] || \"\";\n  const phone = contactParts[1] || \"\";\n\n  return {\n    id: dbEmployee.id,\n    first_name: firstName,\n    last_name: lastName,\n    email,\n    phone,\n    position: dbEmployee.position,\n    department: extractDepartment(dbEmployee.status),\n    hire_date: dbEmployee.hire_date,\n    salary: dbEmployee.salary,\n    status: normalizeStatus(dbEmployee.status),\n    notes: \"\",\n    created_at: dbEmployee.created_at || new Date().toISOString(),\n    updated_at: dbEmployee.created_at || new Date().toISOString(),\n  };\n}\n\n/**\n * Maps a domain Employee model to database format for insert/update\n * @param employee - Employee form data\n * @returns Employee data in database format\n */\nexport function mapEmployeeToDb(\n  employee: EmployeeFormData\n): Omit<DbEmployee, \"id\" | \"created_at\"> {\n  // Combine first and last name\n  const name = `${employee.first_name} ${employee.last_name}`;\n\n  // Combine email and phone into contact string\n  const contact = `${employee.email}|${employee.phone}`;\n\n  // Store department info in status field if not general\n  // The database status field is a string type that can hold both status values\n  // and department information using our own convention\n  let status: string = employee.status;\n  if (employee.department !== \"general\") {\n    status = `dept:${employee.department}`;\n  }\n\n  return {\n    name,\n    contact,\n    position: employee.position,\n    hire_date: employee.hire_date,\n    salary: employee.salary,\n    status,\n  };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\utils\\employeeMappers.ts",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 696
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\utils\\employeeMappers.ts",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 696
        }
      }
    },
    {
      "format": "typescript",
      "lines": 45,
      "fragment": "import type { Database } from \"@/types/supabase\";\n\n// Type for database employees shape\nexport type DbEmployee = Database[\"public\"][\"Tables\"][\"employees\"][\"Row\"];\n\n// Employee domain model\nexport interface Employee {\n  id: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone: string;\n  position: string;\n  department: string;\n  hire_date: string;\n  salary: number;\n  status: \"active\" | \"inactive\" | \"on_leave\";\n  notes: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Form data for creating/updating employees\nexport type EmployeeFormData = Omit<\n  Employee,\n  \"id\" | \"created_at\" | \"updated_at\"\n>;\n\n// Filter options for employee queries\nexport interface EmployeeFilters {\n  status?: string;\n  searchQuery?: string;\n  department?: string;\n}\n\n// Summary statistics for employees\nexport interface EmployeeSummary {\n  totalEmployees: number;\n  activeEmployees: number;\n  onLeaveEmployees: number;\n  departments: Array<{\n    name: string;\n    count: number;\n  }>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\types\\employees.types.ts",
        "start": 1,
        "end": 45,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 281
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\types\\employees.types.ts",
        "start": 1,
        "end": 45,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 281
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ");\n      }\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"employees\"] });\n      setIsDialogOpen(false);\n      toast({\n        title: t(\"employees.success\"),\n        description: getApiSuccessMessage(\n          apiNamespaces.employees,\n          \"update\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesPage.tsx",
        "start": 138,
        "end": 149,
        "startLoc": {
          "line": 138,
          "column": 28,
          "position": 1143
        },
        "endLoc": {
          "line": 149,
          "column": 9,
          "position": 1224
        }
      },
      "secondFile": {
        "name": "src\\features\\employees\\pages\\EmployeesPage.tsx",
        "start": 102,
        "end": 113,
        "startLoc": {
          "line": 102,
          "column": 28,
          "position": 861
        },
        "endLoc": {
          "line": 113,
          "column": 9,
          "position": 942
        }
      }
    },
    {
      "format": "javascript",
      "lines": 65,
      "fragment": "={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              description={stat.description}\r\n              icon={stat.icon}\r\n              trend={stat.trend}\r\n              change={stat.change}\r\n              color={stat.color}\r\n            />\r\n          ))}\r\n        </DashboardGrid>\r\n\r\n        {/* Quick Actions */}\r\n        <CardContainer>\r\n          <Card className=\"card-enhanced\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-xl\">\r\n                <Briefcase className=\"mr-2 h-6 w-6\" />\r\n                Արագ գործողություններ\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Աշխատակիցների կառավարման հիմնական գործողություններ\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                {quickActions.map((action, index) => (\r\n                  <Button\r\n                    key={index}\r\n                    variant=\"outline\"\r\n                    className=\"h-24 flex flex-col items-center justify-center space-y-2 glass-effect hover:shadow-lg transition-all duration-200\"\r\n                  >\r\n                    <div className={cn(\"p-2 rounded-lg\", action.color)}>\r\n                      <action.icon className={cn(\"h-5 w-5\", action.iconColor)} />\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <div className=\"font-medium\">{action.title}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                    </div>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </CardContainer>\r\n\r\n        {/* Main Content Grid */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\r\n          {/* Employees List */}\r\n          <div className=\"lg:col-span-3\">\r\n            <Card className=\"card-enhanced\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center text-xl\">\r\n                  <Users className=\"mr-2 h-6 w-6\" />\r\n                  Աշխատակիցների ցանկ\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Բոլոր աշխատակիցների մանրամասն տեղեկություններ\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {employees.map((employee) => (\r\n                    <div\r\n                      key={employee",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesMainPage.tsx",
        "start": 278,
        "end": 342,
        "startLoc": {
          "line": 278,
          "column": 4,
          "position": 2291
        },
        "endLoc": {
          "line": 342,
          "column": 9,
          "position": 2825
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesMainPage.tsx",
        "start": 285,
        "end": 356,
        "startLoc": {
          "line": 285,
          "column": 4,
          "position": 2298
        },
        "endLoc": {
          "line": 356,
          "column": 5,
          "position": 2897
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "};\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-6\">\r\n      <div className=\"mx-auto max-w-7xl space-y-8\">\r\n        {/* Page Header */}\r\n        <div className=\"page-header-container\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                {t('modules.employees.title'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesMainPage.tsx",
        "start": 241,
        "end": 251,
        "startLoc": {
          "line": 241,
          "column": 3,
          "position": 1942
        },
        "endLoc": {
          "line": 251,
          "column": 26,
          "position": 2030
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsMainPage.tsx",
        "start": 195,
        "end": 205,
        "startLoc": {
          "line": 195,
          "column": 3,
          "position": 1447
        },
        "endLoc": {
          "line": 205,
          "column": 23,
          "position": 1535
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ")}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex space-x-3\">\r\n              <Button variant=\"outline\" size=\"lg\" className=\"glass-effect\">\r\n                <Search className=\"mr-2 h-5 w-5\" />\r\n                {t('common.search')}\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"lg\" className=\"glass-effect\">\r\n                <Filter className=\"mr-2 h-5 w-5\" />\r\n                {t('common.filter')}\r\n              </Button>\r\n              <Button size",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesMainPage.tsx",
        "start": 254,
        "end": 266,
        "startLoc": {
          "line": 254,
          "column": 32,
          "position": 2058
        },
        "endLoc": {
          "line": 266,
          "column": 5,
          "position": 2194
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesMainPage.tsx",
        "start": 257,
        "end": 269,
        "startLoc": {
          "line": 257,
          "column": 28,
          "position": 2018
        },
        "endLoc": {
          "line": 269,
          "column": 8,
          "position": 2154
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": ".map((stat, index) => (\r\n            <DashboardCard\r\n              key={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              description={stat.description}\r\n              icon={stat.icon}\r\n              trend={stat.trend}\r\n              change={stat.change}\r\n              color={stat.color}\r\n            />\r\n          ))}\r\n        </DashboardGrid>\r\n\r\n        {/* Quick Actions */}\r\n        <CardContainer>\r\n          <Card className=\"card-enhanced\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-xl\">\r\n                <Briefcase",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesMainPage.tsx",
        "start": 276,
        "end": 295,
        "startLoc": {
          "line": 276,
          "column": 14,
          "position": 2271
        },
        "endLoc": {
          "line": 295,
          "column": 10,
          "position": 2413
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\pages\\SalesMainPage.tsx",
        "start": 283,
        "end": 302,
        "startLoc": {
          "line": 283,
          "column": 11,
          "position": 2278
        },
        "endLoc": {
          "line": 302,
          "column": 4,
          "position": 2420
        }
      }
    },
    {
      "format": "tsx",
      "lines": 27,
      "fragment": "կառավարման հիմնական գործողություններ\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                {quickActions.map((action, index) => (\r\n                  <Button\r\n                    key={index}\r\n                    variant=\"outline\"\r\n                    className=\"h-24 flex flex-col items-center justify-center space-y-2 glass-effect hover:shadow-lg transition-all duration-200\"\r\n                  >\r\n                    <div className={cn(\"p-2 rounded-lg\", action.color)}>\r\n                      <action.icon className={cn(\"h-5 w-5\", action.iconColor)} />\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <div className=\"font-medium\">{action.title}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                    </div>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </CardContainer>\r\n\r\n        {/* Main Content Grid */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\pages\\EmployeesMainPage.tsx",
        "start": 299,
        "end": 325,
        "startLoc": {
          "line": 299,
          "column": 2,
          "position": 2445
        },
        "endLoc": {
          "line": 325,
          "column": 38,
          "position": 2679
        }
      },
      "secondFile": {
        "name": "src\\features\\shifts\\pages\\ShiftsMainPage.tsx",
        "start": 257,
        "end": 332,
        "startLoc": {
          "line": 257,
          "column": 2,
          "position": 2020
        },
        "endLoc": {
          "line": 332,
          "column": 38,
          "position": 2686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 79,
      "fragment": ";\nimport { useToast } from \"@/hooks\";\n\n/**\n * Custom hook for managing EmployeeDialog state and data handling\n */\nexport function useEmployeeDialog(options?: {\n  onCreateSuccess?: (employee: Employee) => void;\n  onUpdateSuccess?: (employee: Employee) => void;\n}) {\n  const { toast } = useToast();\n  \n  // Dialog state\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(\n    null\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const triggerRef = useRef<HTMLElement>(null);\n\n  /**\n   * Open dialog to create a new employee\n   */\n  const openCreate = useCallback(() => {\n    setSelectedEmployee(null);\n    setIsOpen(true);\n  }, []);\n\n  /**\n   * Open dialog to edit an existing employee\n   */\n  const openEdit = useCallback((employee: Employee) => {\n    setSelectedEmployee(employee);\n    setIsOpen(true);\n  }, []);\n\n  /**\n   * Close the dialog\n   */\n  const close = useCallback(() => {\n    setIsOpen(false);\n    // Optional: Reset selected employee after a delay to avoid UI flicker\n    setTimeout(() => {\n      setSelectedEmployee(null);\n    }, 300);\n  }, []);\n\n  /**\n   * Handle dialog open state change\n   */\n  const onOpenChange = useCallback((open: boolean) => {\n    setIsOpen(open);\n    if (!open) {\n      // Optional: Reset selected employee after a delay to avoid UI flicker\n      setTimeout(() => {\n        setSelectedEmployee(null);\n      }, 300);\n    }\n  }, []);\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = useCallback(\n    async (formData: Partial<Employee>) => {\n      try {\n        setIsSubmitting(true);\n\n        if (selectedEmployee) {\n          // Update existing employee\n          const updatedEmployee = {\n            ...selectedEmployee,\n            ...formData,\n          };\n\n          // Here you would typically make an API call to update the employee\n          // await updateEmployee(updatedEmployee);\n\n          toast",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\hooks\\useEmployeeDialog.ts",
        "start": 2,
        "end": 80,
        "startLoc": {
          "line": 2,
          "column": 10,
          "position": 30
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 524
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\hooks\\useEmployeeDialog.ts",
        "start": 2,
        "end": 80,
        "startLoc": {
          "line": 2,
          "column": 27,
          "position": 30
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 524
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "}.`,\n          });\n\n          if (options?.onUpdateSuccess) {\n            options.onUpdateSuccess(updatedEmployee as Employee);\n          }\n        } else {\n          // Create new employee\n          const newEmployee = {\n            id: `temp-${Date.now()}`, // This would be replaced by the database\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            ...formData,\n          } as Employee;\n\n          // Here you would typically make an API call to create the employee\n          // await createEmployee(newEmployee);\n\n          toast",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\hooks\\useEmployeeDialog.ts",
        "start": 82,
        "end": 100,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 544
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 670
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\hooks\\useEmployeeDialog.ts",
        "start": 83,
        "end": 101,
        "startLoc": {
          "line": 83,
          "column": 12,
          "position": 564
        },
        "endLoc": {
          "line": 101,
          "column": 6,
          "position": 690
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "}.`,\n          });\n\n          if (options?.onCreateSuccess) {\n            options.onCreateSuccess(newEmployee);\n          }\n        }\n\n        // Close dialog\n        setIsOpen(false);\n\n        // Optional: Reset selected employee after a delay\n        setTimeout(() => {\n          setSelectedEmployee(null);\n        }, 300);\n\n        return true;\n      } catch (error) {\n        console.error(\"Error submitting employee form:\", error);\n\n        toast({\n          title: \"Error\",\n          description: `Failed to ${selectedEmployee ? \"update\" : \"create\"} employee.`,\n          variant: \"destructive\",\n        });\n\n        return false;\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [selectedEmployee, options]",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\hooks\\useEmployeeDialog.ts",
        "start": 102,
        "end": 133,
        "startLoc": {
          "line": 102,
          "column": 5,
          "position": 690
        },
        "endLoc": {
          "line": 133,
          "column": 2,
          "position": 874
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\hooks\\useEmployeeDialog.ts",
        "start": 104,
        "end": 135,
        "startLoc": {
          "line": 104,
          "column": 12,
          "position": 730
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 914
        }
      }
    },
    {
      "format": "tsx",
      "lines": 370,
      "fragment": "import { useMemo, useState, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { format } from \"date-fns\";\nimport {\n  User,\n  Briefcase,\n  Mail,\n  Phone,\n  Wallet,\n  CircleUser,\n  Calendar,\n} from \"lucide-react\";\nimport {\n  FiltersShape,\n  createBadgeCell,\n  createDateCell,\n} from \"@/shared/components/unified/StandardizedDataTable\";\nimport { ResponsiveDataTable } from \"@/shared/components/unified/ResponsiveDataTable\";\nimport { Badge } from \"@/core/components/ui/primitives/badge\";\nimport type { Employee } from \"../types/employees.types\";\nimport { VisuallyHidden } from \"@/core/components/ui/accessibility/visually-hidden\";\n\ninterface EmployeesTableStandardizedProps {\n  employees: Employee[];\n  isLoading: boolean;\n  onEdit?: (employee: Employee) => void;\n  onDelete?: (id: string) => void;\n  onView?: (employee: Employee) => void;\n  positions?: { id: string; name: string }[];\n  departments?: { id: string; name: string }[];\n  onFiltersChange?: (filters: FiltersShape) => void;\n  totalCount?: number;\n  onPageChange?: (page: number, pageSize: number) => void;\n  onSortChange?: (column: string | null, direction: \"asc\" | \"desc\") => void;\n}\n\nexport function EmployeesTableStandardized({\n  employees,\n  isLoading,\n  onEdit,\n  onDelete,\n  onView,\n  positions = [],\n  departments = [],\n  onFiltersChange = () => {},\n  totalCount = 0,\n  onPageChange,\n  onSortChange,\n}: EmployeesTableStandardizedProps) {\n  const { t } = useTranslation([\"employees\", \"common\"]);\n\n  // Initial filter state\n  const [filters, setFilters] = useState<FiltersShape>({\n    searchTerm: \"\",\n    status: \"all\",\n  });\n\n  // Handle filter changes\n  const handleFilterChange = (newFilters: FiltersShape) => {\n    setFilters(newFilters);\n    onFiltersChange(newFilters);\n  };\n\n  // Get status badge variant\n  const getStatusBadgeVariant = useCallback((status?: string) => {\n    if (!status) return \"outline\";\n\n    switch (status.toLowerCase()) {\n      case \"active\":\n        return \"success\";\n      case \"on_leave\":\n        return \"warning\";\n      case \"inactive\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  }, []);\n\n  // Format status text\n  const formatStatus = useCallback(\n    (status?: string) => {\n      if (!status) return \"Unknown\";\n\n      switch (status.toLowerCase()) {\n        case \"active\":\n          return t(\"employees:status.active\", \"Active\");\n        case \"on_leave\":\n          return t(\"employees:status.onLeave\", \"On Leave\");\n        case \"inactive\":\n          return t(\"employees:status.inactive\", \"Inactive\");\n        default:\n          return status;\n      }\n    },\n    [t]\n  );\n\n  // Handle edit with full employee object\n  const handleEdit = useCallback(\n    (id: string) => {\n      if (onEdit) {\n        const employee = employees.find((emp) => emp.id === id);\n        if (employee) {\n          onEdit(employee);\n        }\n      }\n    },\n    [employees, onEdit]\n  );\n\n  // Handle view with full employee object\n  const handleRowClick = useCallback(\n    (employee: Employee) => {\n      if (onView) {\n        onView(employee);\n      }\n    },\n    [onView]\n  );\n\n  // Format employee name\n  const formatEmployeeName = useCallback((employee: Employee) => {\n    return `${employee.first_name} ${employee.last_name}`;\n  }, []);\n\n  // Define columns for the StandardizedDataTable\n  const columns = useMemo(\n    () => [\n      {\n        header: t(\"employees:fields.name\"),\n        accessorKey: \"id\" as keyof Employee,\n        cell: (_value: string, row: Employee) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <User\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"font-medium\">{formatEmployeeName(row)}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByName\", \"Sort by name\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.position\"),\n        accessorKey: \"position\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Briefcase\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>{value || t(\"common:notAvailable\")}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByPosition\", \"Sort by position\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.department\"),\n        accessorKey: \"department\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Mail\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>{value || t(\"common:notAvailable\")}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByDepartment\", \"Sort by department\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.hireDate\"),\n        accessorKey: \"hire_date\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Calendar\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>\n              {value ? format(new Date(value), \"PP\") : t(\"common:notAvailable\")}\n            </span>\n            {value && (\n              <VisuallyHidden>{format(new Date(value), \"PPPP\")}</VisuallyHidden>\n            )}\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByHireDate\", \"Sort by hire date\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.email\"),\n        accessorKey: \"email\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Mail\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>{value || t(\"common:notAvailable\")}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByEmail\", \"Sort by email\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.phone\"),\n        accessorKey: \"phone\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <Phone\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span>{value || t(\"common:notAvailable\")}</span>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByPhone\", \"Sort by phone\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.salary\"),\n        accessorKey: \"salary\" as keyof Employee,\n        cell: (value: number) => (\n          <div className=\"flex items-center gap-2 justify-end\" role=\"cell\">\n            <Wallet\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"font-medium tabular-nums\">\n              {value ? value.toLocaleString() + \" ֏\" : t(\"common:notAvailable\")}\n            </span>\n            {value && (\n              <VisuallyHidden>\n                {t(\"employees:aria.salary\", \"{{amount}} Armenian Dram\", {\n                  amount: value.toLocaleString(),\n                })}\n              </VisuallyHidden>\n            )}\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortBySalary\", \"Sort by salary\"),\n        },\n      },\n      {\n        header: t(\"employees:fields.status\"),\n        accessorKey: \"status\" as keyof Employee,\n        cell: (value: string) => (\n          <div className=\"flex items-center gap-2\" role=\"cell\">\n            <CircleUser\n              className=\"h-4 w-4 text-muted-foreground\"\n              aria-hidden=\"true\"\n            />\n            <Badge variant={getStatusBadgeVariant(value)}>\n              {formatStatus(value)}\n            </Badge>\n          </div>\n        ),\n        enableSorting: true,\n        meta: {\n          ariaLabel: t(\"employees:aria.sortByStatus\", \"Sort by status\"),\n        },\n      },\n    ],\n    [t, formatStatus, getStatusBadgeVariant, formatEmployeeName]\n  );\n\n  const isServerSide = Boolean(onPageChange && onSortChange);\n\n  // Function to extract plain text data for screen readers\n  const getAccessibleRowData = useCallback(\n    (employee: Employee) => {\n      return {\n        name: formatEmployeeName(employee),\n        position: employee.position || t(\"common:notAvailable\"),\n        department: employee.department || t(\"common:notAvailable\"),\n        hireDate: employee.hire_date\n          ? format(new Date(employee.hire_date), \"PP\")\n          : t(\"common:notAvailable\"),\n        email: employee.email || t(\"common:notAvailable\"),\n        phone: employee.phone || t(\"common:notAvailable\"),\n        salary: employee.salary\n          ? `${employee.salary.toLocaleString()} ֏`\n          : t(\"common:notAvailable\"),\n        status: formatStatus(employee.status),\n      };\n    },\n    [formatEmployeeName, formatStatus, t]\n  );\n\n  return (\n    <ResponsiveDataTable\n      title={t(\"employees:title\")}\n      columns={columns}\n      data={employees}\n      loading={isLoading}\n      onEdit={onEdit ? handleEdit : undefined}\n      onDelete={onDelete}\n      onRowClick={onView ? handleRowClick : undefined}\n      filters={filters}\n      onFilterChange={handleFilterChange}\n      totalRows={totalCount}\n      serverSide={isServerSide}\n      onPageChange={onPageChange}\n      onSortChange={onSortChange}\n      exportOptions={{\n        enabled: true,\n        filename: \"employees-export\",\n        exportAll: true,\n      }}\n      aria-label={t(\n        \"employees:aria.employeesTable\",\n        \"Employees table with sortable columns\"\n      )}\n      getRowAriaLabel={(employee) => {\n        const data = getAccessibleRowData(employee);\n        return t(\n          \"employees:aria.employeeRow\",\n          \"{{name}}, Position: {{position}}, Department: {{department}}, Status: {{status}}\",\n          data\n        );\n      }}\n      keyboardNavigation={{\n        enabled: true,\n        rowFocusKey: \"id\",\n        onKeyDown: (e, row) => {\n          // Handle Enter key for opening employee details\n          if (e.key === \"Enter\" && onView) {\n            handleRowClick(row);\n          }\n          // Handle Edit with E key\n          if (e.key === \"e\" && onEdit) {\n            handleEdit(row.id);\n          }\n          // Handle Delete with Delete key\n          if (\n            e.key === \"Delete\" &&\n            onDelete &&\n            window.confirm(\n              t(\n                \"employees:confirmDelete\",\n                \"Are you sure you want to delete this employee?\"\n              )\n            )\n          ) {\n            onDelete(row.id);\n          }\n        },\n      }}\n    />\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\EmployeesTableStandardized.tsx",
        "start": 1,
        "end": 370,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 370,
          "column": 2,
          "position": 2913
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeesTableStandardized.tsx",
        "start": 1,
        "end": 370,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 370,
          "column": 2,
          "position": 2913
        }
      }
    },
    {
      "format": "tsx",
      "lines": 72,
      "fragment": "import React, { useCallback } from \"react\";\nimport { Button } from \"@/core/components/ui/primitives/button\";\nimport { Plus } from \"lucide-react\";\nimport { useEmployeeDialog } from \"../hooks/useEmployeeDialog\";\nimport { Employee } from \"../types/employees.types\";\nimport EmployeeDialogStandardized, {\n  EmployeeFormValues,\n} from \"./EmployeeDialogStandardized\";\n\ninterface EmployeeManagerProps {\n  /**\n   * Callback when an employee is created\n   */\n  onEmployeeCreated?: (employee: Employee) => void;\n\n  /**\n   * Callback when an employee is updated\n   */\n  onEmployeeUpdated?: (employee: Employee) => void;\n}\n\n/**\n * Employee management component that demonstrates using the refactored hooks\n *\n * This component shows how to use the new hooks architecture to manage employee operations\n * with significantly less boilerplate code.\n */\nexport function EmployeeManager({\n  onEmployeeCreated,\n  onEmployeeUpdated,\n}: EmployeeManagerProps) {\n  // Use our new hook with much less boilerplate\n  const employeeDialog = useEmployeeDialog({\n    onCreateSuccess: onEmployeeCreated,\n    onUpdateSuccess: onEmployeeUpdated,\n  });\n\n  // Handler for form submission - now much simpler with our new hook\n  const handleSubmit = useCallback(\n    async (data: EmployeeFormValues) => {\n      try {\n        await employeeDialog.handleSubmit(data);\n        return true;\n      } catch (error) {\n        console.error(\"Error submitting employee form:\", error);\n        return false;\n      }\n    },\n    [employeeDialog]\n  );\n\n  return (\n    <div>\n      {/* Add employee button */}\n      <Button onClick={employeeDialog.openCreate} className=\"mb-4\">\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Add Employee\n      </Button>\n\n      {/* Employee dialog using our new hook */}\n      <EmployeeDialogStandardized\n        open={employeeDialog.isOpen}\n        onOpenChange={employeeDialog.onOpenChange}\n        employee={employeeDialog.selectedEmployee as Employee}\n        onSubmit={handleSubmit}\n        isLoading={employeeDialog.isSubmitting}\n      />\n    </div>\n  );\n}\n\nexport default EmployeeManager;",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\EmployeeManager.tsx",
        "start": 1,
        "end": 72,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 417
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeManager.tsx",
        "start": 1,
        "end": 72,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 417
        }
      }
    },
    {
      "format": "javascript",
      "lines": 169,
      "fragment": "={open}\n      onOpenChange={onOpenChange}\n      title={\n        isEditing\n          ? t(\"employees.editEmployee\", \"Edit Employee\")\n          : t(\"employees.addEmployee\", \"Add Employee\")\n      }\n      schema={employeeSchema}\n      defaultValues={defaultValues}\n      onSubmit={handleSubmit}\n      submitText={\n        isLoading\n          ? t(\"common.saving\", \"Saving...\")\n          : isEditing\n            ? t(\"common.save\", \"Save\")\n            : t(\"common.create\", \"Create\")\n      }\n      isSubmitting={isLoading}\n      size=\"lg\"\n    >\n      {({ control }) => (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"first_name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.firstName\", \"First Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"last_name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.lastName\", \"Last Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"employees.position\", \"Position\")}</FormLabel>\n                <FormControl>\n                  <Input {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"department\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"employees.department\", \"Department\")}</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"hire_date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"employees.hireDate\", \"Hire Date\")}</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"employees.status\", \"Status\")}</FormLabel>\n                  <FormControl>\n                    <select\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      {...field}\n                    >\n                      <option value=\"active\">\n                        {t(\"employees.statusActive\", \"Active\")}\n                      </option>\n                      <option value=\"inactive\">\n                        {t(\"employees.statusInactive\", \"Inactive\")}\n                      </option>\n                      <option value=\"on_leave\">\n                        {t(\"employees.statusOnLeave\", \"On Leave\")}\n                      </option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.email\", \"Email\")}</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.phone\", \"Phone\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"common.notes\", \"Notes\")}</FormLabel>\n                <FormControl>\n                  <textarea\n                    className=\"w-full h-20 px-3 py-2 border rounded-md resize-none\"\n                    {...field}\n                    value={field.value || \"\"}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\EmployeeDialogStandardized.tsx",
        "start": 112,
        "end": 280,
        "startLoc": {
          "line": 112,
          "column": 5,
          "position": 1046
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 2152
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 112,
        "end": 280,
        "startLoc": {
          "line": 112,
          "column": 5,
          "position": 1046
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 2152
        }
      }
    },
    {
      "format": "tsx",
      "lines": 289,
      "fragment": "import React from \"react\";\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/core/components/ui/primitives/form\";\nimport { Input } from \"@/core/components/ui/primitives/input\";\nimport { z } from \"zod\";\nimport { useTranslation } from \"react-i18next\";\nimport { Employee } from \"@/features/employees/types/employees.types\";\nimport { Control, FieldValues } from \"react-hook-form\";\nimport { FormDialog } from \"@/shared/components/common/dialog/FormDialog\";\n\n// Create a base schema type for export\nconst baseEmployeeSchema = z.object({\n  first_name: z.string().min(1),\n  last_name: z.string().min(1),\n  position: z.string().min(1),\n  department: z.string().optional(),\n  hire_date: z.string().optional(),\n  email: z.string().email().optional(),\n  phone: z.string().optional(),\n  status: z.enum([\"active\", \"inactive\", \"on_leave\"]).default(\"active\"),\n  salary: z.number().optional(),\n  notes: z.string().optional(),\n});\n\n// Export the type for reuse in other components\nexport type EmployeeFormValues = z.infer<typeof baseEmployeeSchema>;\n\ninterface EmployeeDialogStandardizedProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  employee?: Employee;\n  onSubmit: (data: EmployeeFormValues) => Promise<boolean>;\n  isLoading?: boolean;\n}\n\nfunction EmployeeDialogStandardized({\n  open,\n  onOpenChange,\n  employee,\n  onSubmit,\n  isLoading = false,\n}: EmployeeDialogStandardizedProps) {\n  const { t } = useTranslation();\n  const isEditing = Boolean(employee);\n\n  // Create schema inside the component where hooks can be called\n  const employeeSchema = z.object({\n    first_name: z\n      .string()\n      .min(1, t(\"employees.firstNameRequired\", \"First name is required\")),\n    last_name: z\n      .string()\n      .min(1, t(\"employees.lastNameRequired\", \"Last name is required\")),\n    position: z\n      .string()\n      .min(1, t(\"employees.positionRequired\", \"Position is required\")),\n    department: z.string().optional(),\n    hire_date: z.string().optional(),\n    email: z\n      .string()\n      .email(t(\"employees.invalidEmail\", \"Invalid email address\"))\n      .optional(),\n    phone: z.string().optional(),\n    status: z.enum([\"active\", \"inactive\", \"on_leave\"]).default(\"active\"),\n    salary: z.number().optional(),\n    notes: z.string().optional(),\n  });\n\n  // Set up default values\n  const defaultValues: Partial<EmployeeFormValues> = {\n    first_name: employee?.first_name || \"\",\n    last_name: employee?.last_name || \"\",\n    position: employee?.position || \"\",\n    department: employee?.department || \"\",\n    hire_date: employee?.hire_date\n      ? new Date(employee.hire_date).toISOString().split(\"T\")[0]\n      : \"\",\n    email: employee?.email || \"\",\n    phone: employee?.phone || \"\",\n    status: employee?.status || \"active\",\n    salary: employee?.salary || 0,\n    notes: employee?.notes || \"\",\n  };\n\n  // Handle form submission\n  const handleSubmit = async (data: EmployeeFormValues) => {\n    try {\n      const success = await onSubmit(data);\n\n      if (success) {\n        sonnerToast.success(\n          isEditing\n            ? t(\"employees.updateSuccess\", \"Employee updated successfully\")\n            : t(\"employees.createSuccess\", \"Employee created successfully\")\n        );\n        return true;\n      }\n      return false;\n    } catch (error) {\n      sonnerToast.error(t(\"employees.saveError\", \"Failed to save employee\"));\n      return false;\n    }\n  };\n\n  return (\n    <FormDialog\n      open={open}\n      onOpenChange={onOpenChange}\n      title={\n        isEditing\n          ? t(\"employees.editEmployee\", \"Edit Employee\")\n          : t(\"employees.addEmployee\", \"Add Employee\")\n      }\n      schema={employeeSchema}\n      defaultValues={defaultValues}\n      onSubmit={handleSubmit}\n      submitText={\n        isLoading\n          ? t(\"common.saving\", \"Saving...\")\n          : isEditing\n            ? t(\"common.save\", \"Save\")\n            : t(\"common.create\", \"Create\")\n      }\n      isSubmitting={isLoading}\n      size=\"lg\"\n    >\n      {({ control }) => (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"first_name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.firstName\", \"First Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"last_name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.lastName\", \"Last Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"employees.position\", \"Position\")}</FormLabel>\n                <FormControl>\n                  <Input {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"department\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"employees.department\", \"Department\")}</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"hire_date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"employees.hireDate\", \"Hire Date\")}</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"employees.status\", \"Status\")}</FormLabel>\n                  <FormControl>\n                    <select\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      {...field}\n                    >\n                      <option value=\"active\">\n                        {t(\"employees.statusActive\", \"Active\")}\n                      </option>\n                      <option value=\"inactive\">\n                        {t(\"employees.statusInactive\", \"Inactive\")}\n                      </option>\n                      <option value=\"on_leave\">\n                        {t(\"employees.statusOnLeave\", \"On Leave\")}\n                      </option>\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.email\", \"Email\")}</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"common.phone\", \"Phone\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"common.notes\", \"Notes\")}</FormLabel>\n                <FormControl>\n                  <textarea\n                    className=\"w-full h-20 px-3 py-2 border rounded-md resize-none\"\n                    {...field}\n                    value={field.value || \"\"}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </>\n      )}\n    </FormDialog>\n  );\n}\n\nexport { EmployeeDialogStandardized };\nexport default EmployeeDialogStandardized;",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\EmployeeDialogStandardized.tsx",
        "start": 1,
        "end": 289,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 289,
          "column": 2,
          "position": 2191
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 1,
        "end": 289,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 289,
          "column": 2,
          "position": 2191
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "import * as React from \"react\";\n\nimport { cn } from \"@/shared/utils/cn\";\n\n/**\n * EmployeeDialog component\n *\n * @placeholder This is a placeholder component that needs proper implementation\n */\nexport function EmployeeDialog({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div className={cn(\"-employee-dialog\", className)} {...props}>\n      {/* Placeholder for EmployeeDialog implementation */}\n      <div className=\"p-4 border border-dashed border-gray-300 rounded-md text-center text-gray-500\">\n        EmployeeDialog (Placeholder)\n      </div>\n    </div>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\EmployeeDialog.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialog.tsx",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 122
        }
      }
    },
    {
      "format": "tsx",
      "lines": 49,
      "fragment": "import { useTranslation } from \"react-i18next\";\nimport { StandardDialog } from \"@/shared/components/common/dialog/StandardDialog\";\nimport { Button } from \"@/core/components/ui/button\";\nimport type { Employee } from \"../types/employees.types\";\n\ninterface DeleteConfirmDialogStandardizedProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  employee: Employee;\n  isLoading?: boolean;\n}\n\nexport function DeleteConfirmDialogStandardized({\n  open,\n  onOpenChange,\n  onConfirm,\n  employee,\n  isLoading,\n}: DeleteConfirmDialogStandardizedProps) {\n  const { t } = useTranslation();\n\n  const dialogActions = (\n    <>\n      <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n        {t(\"common.cancel\")}\n      </Button>\n      <Button variant=\"destructive\" onClick={onConfirm} disabled={isLoading}>\n        {isLoading ? t(\"common.deleting\") : t(\"common.delete\")}\n      </Button>\n    </>\n  );\n\n  return (\n    <StandardDialog\n      open={open}\n      onOpenChange={onOpenChange}\n      title={t(\"employees.delete_employee\")}\n      description={t(\"employees.delete_employee_confirmation\", {\n        name: `${employee.first_name} ${employee.last_name}`,\n      })}\n      actions={dialogActions}\n    >\n      <p className=\"text-sm text-muted-foreground\">\n        {t(\"employees.delete_employee_warning\")}\n      </p>\n    </StandardDialog>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\employees\\components\\DeleteConfirmDialogStandardized.tsx",
        "start": 1,
        "end": 49,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 386
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\DeleteConfirmDialogStandardized.tsx",
        "start": 1,
        "end": 49,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 386
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "|| 0)}\n            <span className=\"ml-1\">{t(\"dashboard.fromPreviousPeriod\")}</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">\n            {t(\"dashboard.expenses\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\MetricsCardsStandardized.tsx",
        "start": 76,
        "end": 85,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 615
        },
        "endLoc": {
          "line": 85,
          "column": 21,
          "position": 688
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\MetricsCardsStandardized.tsx",
        "start": 58,
        "end": 67,
        "startLoc": {
          "line": 58,
          "column": 2,
          "position": 460
        },
        "endLoc": {
          "line": 67,
          "column": 22,
          "position": 533
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "|| 0)}\n            <span className=\"ml-1\">{t(\"dashboard.fromPreviousPeriod\")}</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">\n            {t(\"dashboard.efficiency\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\MetricsCardsStandardized.tsx",
        "start": 94,
        "end": 103,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 769
        },
        "endLoc": {
          "line": 103,
          "column": 23,
          "position": 842
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\MetricsCardsStandardized.tsx",
        "start": 58,
        "end": 67,
        "startLoc": {
          "line": 58,
          "column": 2,
          "position": 460
        },
        "endLoc": {
          "line": 67,
          "column": 22,
          "position": 533
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "\"\n                          x1=\"0\"\n                          y1=\"0\"\n                          x2=\"0\"\n                          y2=\"1\"\n                        >\n                          <stop\n                            offset=\"5%\"\n                            stopColor={COLORS.expense.main}\n                            stopOpacity={0.8}\n                          />\n                          <stop\n                            offset=\"95%\"\n                            stopColor={COLORS.expense.main}\n                            stopOpacity={0.4}\n                          />\n                        </linearGradient>\n                        <linearGradient\n                          id=\"profitGradient",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 458,
        "end": 476,
        "startLoc": {
          "line": 458,
          "column": 16,
          "position": 3860
        },
        "endLoc": {
          "line": 476,
          "column": 15,
          "position": 3956
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 440,
        "end": 458,
        "startLoc": {
          "line": 440,
          "column": 15,
          "position": 3763
        },
        "endLoc": {
          "line": 458,
          "column": 16,
          "position": 3859
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "\"\n                          x1=\"0\"\n                          y1=\"0\"\n                          x2=\"0\"\n                          y2=\"1\"\n                        >\n                          <stop\n                            offset=\"5%\"\n                            stopColor={COLORS.profit.main}\n                            stopOpacity={0.8}\n                          />\n                          <stop\n                            offset=\"95%\"\n                            stopColor={COLORS.profit.main}\n                            stopOpacity={0.4}\n                          />\n                        </linearGradient>\n                        <linearGradient\n                          id=\"lossGradient",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 476,
        "end": 494,
        "startLoc": {
          "line": 476,
          "column": 15,
          "position": 3957
        },
        "endLoc": {
          "line": 494,
          "column": 13,
          "position": 4053
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 440,
        "end": 458,
        "startLoc": {
          "line": 440,
          "column": 15,
          "position": 3763
        },
        "endLoc": {
          "line": 458,
          "column": 16,
          "position": 3859
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": "\"\n                          x1=\"0\"\n                          y1=\"0\"\n                          x2=\"0\"\n                          y2=\"1\"\n                        >\n                          <stop\n                            offset=\"5%\"\n                            stopColor={COLORS.loss.main}\n                            stopOpacity={0.8}\n                          />\n                          <stop\n                            offset=\"95%\"\n                            stopColor={COLORS.loss.main}\n                            stopOpacity={0.4}\n                          />\n                        </linearGradient>\n                      </",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 494,
        "end": 511,
        "startLoc": {
          "line": 494,
          "column": 13,
          "position": 4054
        },
        "endLoc": {
          "line": 511,
          "column": 3,
          "position": 4144
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\IncomeExpenseOverview.tsx",
        "start": 440,
        "end": 457,
        "startLoc": {
          "line": 440,
          "column": 15,
          "position": 3763
        },
        "endLoc": {
          "line": 457,
          "column": 2,
          "position": 3853
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "const DashboardCard = ({ \n  title, \n  value, \n  unit, \n  trend, \n  icon, \n  children, \n  className = \"\" \n}: {\n  title: string;\n  value?: string | number;\n  unit?: string;\n  trend?: { value: string; isPositive: boolean };\n  icon?: React.ReactNode;\n  children?: React.ReactNode;\n  className?: string;\n}) => (\n  <div className={`group relative bg-card border border-border rounded-xl p-6 \n    hover:bg-gradient-natural-light hover:border-accent/20 \n    transition-all duration-300 hover:scale-[1.01] hover:shadow-lg \n    backdrop-blur-sm ${className}`}>\n    {",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\FuelManagementDashboard.tsx",
        "start": 64,
        "end": 85,
        "startLoc": {
          "line": 64,
          "column": 1,
          "position": 577
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 729
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\SalesDashboard.tsx",
        "start": 63,
        "end": 81,
        "startLoc": {
          "line": 63,
          "column": 1,
          "position": 569
        },
        "endLoc": {
          "line": 81,
          "column": 2,
          "position": 721
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "\">{unit}</span>}\n        </div>\n      )}\n      \n      {trend && (\n        <div className={`flex items-center gap-2 text-sm ${trend.isPositive ? 'text-status-operational' : 'text-status-critical'}`}>\n          {trend.isPositive ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n          {trend.value}\n        </div>\n      )}\n      \n      {children}\n    </div>\n  </",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\FuelManagementDashboard.tsx",
        "start": 97,
        "end": 110,
        "startLoc": {
          "line": 97,
          "column": 30,
          "position": 865
        },
        "endLoc": {
          "line": 110,
          "column": 3,
          "position": 980
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\SalesDashboard.tsx",
        "start": 89,
        "end": 102,
        "startLoc": {
          "line": 89,
          "column": 22,
          "position": 827
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 941
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ";\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"animate-pulse space-y-4\", className)} {...props}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-muted/30 rounded-xl animate-pulse",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\FuelManagementDashboard.tsx",
        "start": 141,
        "end": 148,
        "startLoc": {
          "line": 141,
          "column": 2,
          "position": 1255
        },
        "endLoc": {
          "line": 148,
          "column": 42,
          "position": 1340
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\SalesDashboard.tsx",
        "start": 147,
        "end": 154,
        "startLoc": {
          "line": 147,
          "column": 2,
          "position": 1447
        },
        "endLoc": {
          "line": 154,
          "column": 31,
          "position": 1532
        }
      }
    },
    {
      "format": "tsx",
      "lines": 80,
      "fragment": ";\n  expanded?: boolean;\n  startDate?: string;\n  endDate?: string;\n}\n\n// Progress Bar Component\nconst ProgressBar = ({ value, max, color = \"blue\", label }: { value: number; max: number; color?: \"blue\" | \"orange\" | \"green\" | \"red\"; label?: string }) => {\n  const percentage = Math.min((value / max) * 100, 100);\n  const colorClasses = {\n    blue: \"bg-blue-500\",\n    orange: \"bg-orange-500\", \n    green: \"bg-emerald-500\",\n    red: \"bg-red-500\"\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      {label && (\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-300\">{label}</span>\n          <span className=\"text-gray-100 font-medium\">{Math.round(percentage)}%</span>\n        </div>\n      )}\n      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n        <div\n          className={`h-2 rounded-full transition-all duration-300 ${colorClasses[color]}`}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Dashboard Card Component\nconst DashboardCard = ({ \n  title, \n  value, \n  unit, \n  trend, \n  icon, \n  children, \n  className = \"\" \n}: {\n  title: string;\n  value?: string | number;\n  unit?: string;\n  trend?: { value: string; isPositive: boolean };\n  icon?: React.ReactNode;\n  children?: React.ReactNode;\n  className?: string;\n}) => (\n  <div className={`bg-gray-800/50 backdrop-blur border border-gray-700/50 rounded-xl p-6 hover:bg-gray-800/70 transition-all duration-300 ${className}`}>\n    <div className=\"flex items-center justify-between mb-4\">\n      <h3 className=\"text-gray-400 text-sm font-medium uppercase tracking-wide\">{title}</h3>\n      {icon && <div className=\"text-gray-400\">{icon}</div>}\n    </div>\n    \n    {value && (\n      <div className=\"flex items-baseline gap-2 mb-3\">\n        <span className=\"text-3xl font-bold text-white\">{value}</span>\n        {unit && <span className=\"text-lg text-gray-400\">{unit}</span>}\n      </div>\n    )}\n    \n    {trend && (\n      <div className={`flex items-center gap-2 text-sm ${trend.isPositive ? 'text-emerald-400' : 'text-red-400'}`}>\n        {trend.isPositive ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n        {trend.value}\n      </div>\n    )}\n    \n    {children}\n  </div>\n);\n\n/**\n * FinanceDashboard component\n * Displays financial metrics including revenue, expenses, profit, and cash flow\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\FinanceDashboard.tsx",
        "start": 29,
        "end": 108,
        "startLoc": {
          "line": 29,
          "column": 21,
          "position": 238
        },
        "endLoc": {
          "line": 108,
          "column": 4,
          "position": 943
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\SalesDashboard.tsx",
        "start": 28,
        "end": 107,
        "startLoc": {
          "line": 28,
          "column": 19,
          "position": 240
        },
        "endLoc": {
          "line": 107,
          "column": 4,
          "position": 945
        }
      }
    },
    {
      "format": "tsx",
      "lines": 17,
      "fragment": "];\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"animate-pulse space-y-4\", className)} {...props}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-800/30 rounded-xl\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"finance-dashboard space-y-6\", className)} {...props}>\n      {/* Key Financial Metrics */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\FinanceDashboard.tsx",
        "start": 148,
        "end": 164,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 1441
        },
        "endLoc": {
          "line": 164,
          "column": 28,
          "position": 1585
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\SalesDashboard.tsx",
        "start": 147,
        "end": 163,
        "startLoc": {
          "line": 147,
          "column": 3,
          "position": 1446
        },
        "endLoc": {
          "line": 163,
          "column": 24,
          "position": 1590
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ")}\n            </CardTitle>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              className=\"h-4 w-4 text-muted-foreground\"\n            >\n              <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 95,
        "end": 107,
        "startLoc": {
          "line": 95,
          "column": 21,
          "position": 763
        },
        "endLoc": {
          "line": 107,
          "column": 73,
          "position": 832
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 25,
          "position": 545
        },
        "endLoc": {
          "line": 77,
          "column": 58,
          "position": 614
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ")}\n            </CardTitle>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              className=\"h-4 w-4 text-muted-foreground\"\n            >\n              <rect",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 126,
        "end": 138,
        "startLoc": {
          "line": 126,
          "column": 21,
          "position": 994
        },
        "endLoc": {
          "line": 138,
          "column": 5,
          "position": 1058
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 25,
          "position": 545
        },
        "endLoc": {
          "line": 77,
          "column": 5,
          "position": 609
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": ")}\n            </CardTitle>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              className=\"h-4 w-4 text-muted-foreground\"\n            >\n              <path d=\"M22 12h-4l-3 9L9 3l-3 9H2",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 157,
        "end": 169,
        "startLoc": {
          "line": 157,
          "column": 19,
          "position": 1248
        },
        "endLoc": {
          "line": 169,
          "column": 26,
          "position": 1317
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\components\\DashboardOverviewStandardized.tsx",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 25,
          "position": 545
        },
        "endLoc": {
          "line": 77,
          "column": 58,
          "position": 614
        }
      }
    },
    {
      "format": "tsx",
      "lines": 25,
      "fragment": "const { user } = useAuth();\n  const { toast } = useToast();\n\n  const {\n    data: dashboardData,\n    isLoading,\n    error,\n  } = useQuery<DashboardData>({\n    queryKey: [\"dashboard\", user?.id],\n    queryFn: fetchDashboardData,\n    enabled: !!user,\n    retry: 1,\n  });\n\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"Error loading dashboard data\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  const",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\dashboard\\components\\DashboardMetrics.tsx",
        "start": 22,
        "end": 46,
        "startLoc": {
          "line": 22,
          "column": 3,
          "position": 198
        },
        "endLoc": {
          "line": 46,
          "column": 6,
          "position": 376
        }
      },
      "secondFile": {
        "name": "src\\features\\dashboard\\pages\\DashboardNew.tsx",
        "start": 9,
        "end": 33,
        "startLoc": {
          "line": 9,
          "column": 3,
          "position": 99
        },
        "endLoc": {
          "line": 33,
          "column": 7,
          "position": 277
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n      });\n\n      if (error) {\n        return {\n          user: null,\n          session: null,\n          error: new Error(error.message),\n        };\n      }\n\n      return {\n        user: data.user,\n        session: data.session,\n        error: null,\n      };\n    } catch (error) {\n      return {\n        user: null,\n        session: null,\n        error: error as Error,\n      };\n    }\n  },\n\n  async logout",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\services\\authService.ts",
        "start": 53,
        "end": 78,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 388
        },
        "endLoc": {
          "line": 78,
          "column": 7,
          "position": 536
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\services\\authService.ts",
        "start": 19,
        "end": 44,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 150
        },
        "endLoc": {
          "line": 44,
          "column": 9,
          "position": 298
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "): Promise<{ error?: Error }> {\n    try {\n      const { error } = await supabase.auth.signOut();\n\n      if (error) {\n        return { error: new Error(error.message) };\n      }\n\n      return {};\n    } catch (error) {\n      return { error: error as Error };\n    }\n  },\n\n  async requestPasswordReset",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\services\\authService.ts",
        "start": 106,
        "end": 120,
        "startLoc": {
          "line": 106,
          "column": 7,
          "position": 829
        },
        "endLoc": {
          "line": 120,
          "column": 21,
          "position": 954
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\services\\authService.ts",
        "start": 78,
        "end": 92,
        "startLoc": {
          "line": 78,
          "column": 2,
          "position": 538
        },
        "endLoc": {
          "line": 92,
          "column": 12,
          "position": 663
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ",\n        isLoading: false,\n      }));\n\n      navigate(APP_ROUTES.AUTH.path);\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        error: error as Error,\n        isLoading: false,\n      }));\n    }\n  }, [navigate]);\n\n  const requestPasswordReset",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\hooks\\useAuth.ts",
        "start": 130,
        "end": 144,
        "startLoc": {
          "line": 130,
          "column": 5,
          "position": 1063
        },
        "endLoc": {
          "line": 144,
          "column": 21,
          "position": 1159
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\hooks\\useAuth.ts",
        "start": 76,
        "end": 92,
        "startLoc": {
          "line": 76,
          "column": 8,
          "position": 627
        },
        "endLoc": {
          "line": 92,
          "column": 9,
          "position": 726
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ");\n      if (error) throw error;\n\n      setState((prev) => ({\n        ...prev,\n        isLoading: false,\n      }));\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        error: error as Error,\n        isLoading: false,\n      }));\n    }\n  }, []);\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\hooks\\useAuth.ts",
        "start": 171,
        "end": 187,
        "startLoc": {
          "line": 171,
          "column": 9,
          "position": 1428
        },
        "endLoc": {
          "line": 187,
          "column": 7,
          "position": 1540
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\hooks\\useAuth.ts",
        "start": 149,
        "end": 167,
        "startLoc": {
          "line": 149,
          "column": 8,
          "position": 1236
        },
        "endLoc": {
          "line": 167,
          "column": 6,
          "position": 1351
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"firstName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"auth.firstName\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 133,
        "end": 146,
        "startLoc": {
          "line": 133,
          "column": 6,
          "position": 986
        },
        "endLoc": {
          "line": 146,
          "column": 17,
          "position": 1064
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 185,
        "end": 198,
        "startLoc": {
          "line": 185,
          "column": 3,
          "position": 1523
        },
        "endLoc": {
          "line": 198,
          "column": 21,
          "position": 1601
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": ", \"First Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={control as Control<FieldValues>}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t(\"auth.lastName\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 146,
        "end": 160,
        "startLoc": {
          "line": 146,
          "column": 17,
          "position": 1065
        },
        "endLoc": {
          "line": 160,
          "column": 16,
          "position": 1151
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 140,
        "end": 154,
        "startLoc": {
          "line": 140,
          "column": 19,
          "position": 1227
        },
        "endLoc": {
          "line": 154,
          "column": 18,
          "position": 1313
        }
      }
    },
    {
      "format": "javascript",
      "lines": 16,
      "fragment": ", \"Last Name\")}</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"auth.password\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 160,
        "end": 175,
        "startLoc": {
          "line": 160,
          "column": 16,
          "position": 1152
        },
        "endLoc": {
          "line": 175,
          "column": 16,
          "position": 1243
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 154,
        "end": 169,
        "startLoc": {
          "line": 154,
          "column": 18,
          "position": 1314
        },
        "endLoc": {
          "line": 169,
          "column": 21,
          "position": 1405
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": " {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"confirmPassword\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>\n                  ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 177,
        "end": 190,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1265
        },
        "endLoc": {
          "line": 190,
          "column": 19,
          "position": 1333
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\components\\EmployeeDialogStandardized.tsx",
        "start": 171,
        "end": 183,
        "startLoc": {
          "line": 171,
          "column": 6,
          "position": 1421
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 1489
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "}</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"password\"\n            render={({ field }) => (\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\LoginForm.tsx",
        "start": 92,
        "end": 105,
        "startLoc": {
          "line": 92,
          "column": 8,
          "position": 697
        },
        "endLoc": {
          "line": 105,
          "column": 15,
          "position": 774
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 131,
        "end": 145,
        "startLoc": {
          "line": 131,
          "column": 2,
          "position": 965
        },
        "endLoc": {
          "line": 145,
          "column": 17,
          "position": 1053
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"auth.password\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\LoginForm.tsx",
        "start": 94,
        "end": 106,
        "startLoc": {
          "line": 94,
          "column": 6,
          "position": 713
        },
        "endLoc": {
          "line": 106,
          "column": 16,
          "position": 785
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 177,
        "end": 183,
        "startLoc": {
          "line": 177,
          "column": 9,
          "position": 1264
        },
        "endLoc": {
          "line": 183,
          "column": 23,
          "position": 1492
        }
      }
    },
    {
      "format": "tsx",
      "lines": 44,
      "fragment": "(credentials);\n      return true;\n    } catch (error) {\n      setAuthError(formatAuthError(error));\n      return false;\n    }\n  };\n\n  return (\n    <StandardForm\n      schema={loginSchema}\n      defaultValues={defaultValues}\n      onSubmit={handleSubmit}\n      submitText={\n        isLoading\n          ? t(\"auth.signingIn\") || \"Signing in...\"\n          : t(\"auth.signIn.button\") || \"Sign in\"\n      }\n      className=\"space-y-4\"\n    >\n      {({ control }) => (\n        <>\n          {authError && (\n            <Alert variant=\"destructive\">\n              <ExclamationTriangleIcon className=\"h-4 w-4\" />\n              <AlertDescription>{authError}</AlertDescription>\n            </Alert>\n          )}\n\n          <FormField\n            control={control as Control<FieldValues>}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t(\"auth.email\") || \"Email\"}</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\auth\\components\\LoginForm.tsx",
        "start": 58,
        "end": 101,
        "startLoc": {
          "line": 58,
          "column": 6,
          "position": 468
        },
        "endLoc": {
          "line": 101,
          "column": 10,
          "position": 743
        }
      },
      "secondFile": {
        "name": "src\\features\\auth\\components\\RegisterForm.tsx",
        "start": 97,
        "end": 140,
        "startLoc": {
          "line": 97,
          "column": 13,
          "position": 739
        },
        "endLoc": {
          "line": 140,
          "column": 4,
          "position": 1011
        }
      }
    },
    {
      "format": "javascript",
      "lines": 73,
      "fragment": "={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {icon && <span className=\"mr-2\">{icon}</span>}\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\n/**\n * Content of a submenu\n */\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\n/**\n * Main content of the dropdown menu\n */\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\n/**\n * Item in the dropdown menu\n */\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n    icon?: React.ReactNode;\n    destructive?: boolean;\n  }\n>(({ className, inset, icon, destructive, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      inset && \"pl-8\",\n      destructive ",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 57,
        "end": 129,
        "startLoc": {
          "line": 57,
          "column": 4,
          "position": 289
        },
        "endLoc": {
          "line": 129,
          "column": 19,
          "position": 733
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 26,
        "end": 87,
        "startLoc": {
          "line": 26,
          "column": 4,
          "position": 211
        },
        "endLoc": {
          "line": 87,
          "column": 5,
          "position": 599
        }
      }
    },
    {
      "format": "javascript",
      "lines": 99,
      "fragment": ",\n      className\n    )}\n    {...props}\n  >\n    {icon && <span className=\"mr-2\">{icon}</span>}\n    {children}\n  </DropdownMenuPrimitive.Item>\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\n/**\n * Checkbox item in the dropdown menu\n */\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\n/**\n * Radio item in the dropdown menu\n */\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\n/**\n * Group of radio items in the dropdown menu\n */\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\n/**\n * Label for a section in the dropdown menu\n */\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\n/**\n * Separator between items or sections\n */\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 129,
        "end": 227,
        "startLoc": {
          "line": 129,
          "column": 53,
          "position": 737
        },
        "endLoc": {
          "line": 227,
          "column": 2,
          "position": 1329
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 85,
        "end": 163,
        "startLoc": {
          "line": 85,
          "column": 7,
          "position": 598
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1135
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "const DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\n/**\n * Main content of the dropdown menu\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 76,
        "end": 94,
        "startLoc": {
          "line": 76,
          "column": 1,
          "position": 384
        },
        "endLoc": {
          "line": 94,
          "column": 4,
          "position": 485
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 41,
        "end": 57,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 281
        },
        "endLoc": {
          "line": 57,
          "column": 6,
          "position": 382
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "const DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\n/**\n * Item in the dropdown menu\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 95,
        "end": 115,
        "startLoc": {
          "line": 95,
          "column": 1,
          "position": 487
        },
        "endLoc": {
          "line": 115,
          "column": 4,
          "position": 610
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 57,
        "end": 75,
        "startLoc": {
          "line": 57,
          "column": 1,
          "position": 382
        },
        "endLoc": {
          "line": 75,
          "column": 6,
          "position": 505
        }
      }
    },
    {
      "format": "tsx",
      "lines": 27,
      "fragment": "const DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\n/**\n * Radio item in the dropdown menu\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 143,
        "end": 169,
        "startLoc": {
          "line": 143,
          "column": 1,
          "position": 802
        },
        "endLoc": {
          "line": 169,
          "column": 4,
          "position": 963
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 93,
        "end": 117,
        "startLoc": {
          "line": 93,
          "column": 1,
          "position": 628
        },
        "endLoc": {
          "line": 117,
          "column": 6,
          "position": 789
        }
      }
    },
    {
      "format": "tsx",
      "lines": 25,
      "fragment": "const DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\n/**\n * Group of radio items in the dropdown menu\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 170,
        "end": 194,
        "startLoc": {
          "line": 170,
          "column": 1,
          "position": 965
        },
        "endLoc": {
          "line": 194,
          "column": 4,
          "position": 1116
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 117,
        "end": 139,
        "startLoc": {
          "line": 117,
          "column": 1,
          "position": 789
        },
        "endLoc": {
          "line": 139,
          "column": 6,
          "position": 940
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "const DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\n/**\n * Separator between items or sections\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 200,
        "end": 220,
        "startLoc": {
          "line": 200,
          "column": 1,
          "position": 1132
        },
        "endLoc": {
          "line": 220,
          "column": 4,
          "position": 1255
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 139,
        "end": 157,
        "startLoc": {
          "line": 139,
          "column": 1,
          "position": 940
        },
        "endLoc": {
          "line": 157,
          "column": 6,
          "position": 1063
        }
      }
    },
    {
      "format": "tsx",
      "lines": 28,
      "fragment": "const DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\n/**\n * Dropdown menu composed component for creating dropdown menus\n *\n * @example\n * ```tsx\n * <DropdownMenu>\n *   <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n *   <DropdownMenuContent>\n *     <DropdownMenuItem>Item 1</DropdownMenuItem>\n *     <DropdownMenuItem>Item 2</DropdownMenuItem>\n *     <DropdownMenuSeparator />\n *     <DropdownMenuItem>Item 3</DropdownMenuItem>\n *   </DropdownMenuContent>\n * </DropdownMenu>\n * ```\n */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\dropdownmenu.tsx",
        "start": 221,
        "end": 248,
        "startLoc": {
          "line": 221,
          "column": 1,
          "position": 1257
        },
        "endLoc": {
          "line": 248,
          "column": 4,
          "position": 1356
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\dropdown-menu.tsx",
        "start": 157,
        "end": 169,
        "startLoc": {
          "line": 157,
          "column": 1,
          "position": 1063
        },
        "endLoc": {
          "line": 169,
          "column": 6,
          "position": 1162
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": ",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends ButtonHTMLAttributes",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\button.tsx",
        "start": 20,
        "end": 41,
        "startLoc": {
          "line": 20,
          "column": 81,
          "position": 113
        },
        "endLoc": {
          "line": 41,
          "column": 21,
          "position": 223
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\button.tsx",
        "start": 97,
        "end": 118,
        "startLoc": {
          "line": 97,
          "column": 78,
          "position": 501
        },
        "endLoc": {
          "line": 118,
          "column": 6,
          "position": 611
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": "forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\n// Import and re-export ButtonLink from primitives",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\components\\ui\\button.tsx",
        "start": 46,
        "end": 60,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 256
        },
        "endLoc": {
          "line": 60,
          "column": 51,
          "position": 376
        }
      },
      "secondFile": {
        "name": "src\\core\\components\\ui\\primitives\\button.tsx",
        "start": 126,
        "end": 142,
        "startLoc": {
          "line": 126,
          "column": 2,
          "position": 652
        },
        "endLoc": {
          "line": 142,
          "column": 4,
          "position": 772
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "<\r\n  DefaultSchemaTableNameOrOptions extends\r\n    | keyof DefaultSchema[\"Tables\"]\r\n    | { schema: keyof Database },\r\n  TableName extends DefaultSchemaTableNameOrOptions extends {\r\n    schema: keyof Database;\r\n  }\r\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\r\n    : never = never,\r\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\r\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\r\n      Update",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\api\\types\\supabase-database.ts",
        "start": 374,
        "end": 385,
        "startLoc": {
          "line": 374,
          "column": 13,
          "position": 3334
        },
        "endLoc": {
          "line": 385,
          "column": 7,
          "position": 3467
        }
      },
      "secondFile": {
        "name": "src\\core\\api\\types\\supabase-database.ts",
        "start": 351,
        "end": 362,
        "startLoc": {
          "line": 351,
          "column": 13,
          "position": 3105
        },
        "endLoc": {
          "line": 362,
          "column": 7,
          "position": 3238
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "interface UseZodFormOptions<TSchema extends z.ZodSchema>\n  extends Omit<UseFormProps<z.infer<TSchema>>, \"resolver\"> {\n  /**\n   * The Zod schema to validate against\n   */\n  schema: TSchema;\n}\n\n/**\n * A hook that integrates react-hook-form with Zod validation\n *\n * @param options Configuration options including schema and form options\n * @returns The react-hook-form methods with Zod validation\n */\nexport function useZodForm<TSchema extends z.ZodSchema>({\n  schema,\n  ...formOptions\n}: UseZodFormOptions<TSchema>): UseFormReturn<z.infer<TSchema>> {\n  return useForm<z.infer<TSchema>>({\n    ...formOptions,\n    resolver: zodResolver(schema),\n  });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useZodForm.ts",
        "start": 14,
        "end": 36,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 69
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 197
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\form\\useZodForm.ts",
        "start": 8,
        "end": 30,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 50
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 178
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "const updateTankMutation = useMutation({\r\n    mutationFn: async ({ id, data }: { id: string; data: TankUpdate }) => {\r\n      const response = await tanksApi.updateTank(id, data);\r\n      return response.data;\r\n    },\r\n    onSuccess: (_",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useTanks.ts",
        "start": 140,
        "end": 145,
        "startLoc": {
          "line": 140,
          "column": 3,
          "position": 1054
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 1143
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\hooks\\useFuel.ts",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 3,
          "position": 283
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 367
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ");\r\n      return response.data;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: TANK_QUERY_KEYS.tanks });\r\n      queryClient.invalidateQueries({ queryKey: TANK_QUERY_KEYS.summary });\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Tank deleted successfully\"",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useTanks.ts",
        "start": 167,
        "end": 175,
        "startLoc": {
          "line": 167,
          "column": 3,
          "position": 1379
        },
        "endLoc": {
          "line": 175,
          "column": 28,
          "position": 1465
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\useTanks.ts",
        "start": 118,
        "end": 126,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 868
        },
        "endLoc": {
          "line": 126,
          "column": 28,
          "position": 954
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n\n        const target = element || document.documentElement;\n        const scrollX =\n          target === document.documentElement\n            ? window.scrollX\n            : target.scrollLeft;\n        const scrollY =\n          target === document.documentElement\n            ? window.scrollY\n            : target.scrollTop;\n\n        handler({ scrollX, scrollY });\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useOptimizedEventListeners.ts",
        "start": 231,
        "end": 244,
        "startLoc": {
          "line": 231,
          "column": 5,
          "position": 1503
        },
        "endLoc": {
          "line": 244,
          "column": 2,
          "position": 1601
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\useOptimizedEventListeners.ts",
        "start": 218,
        "end": 229,
        "startLoc": {
          "line": 218,
          "column": 4,
          "position": 1367
        },
        "endLoc": {
          "line": 229,
          "column": 5,
          "position": 1464
        }
      }
    },
    {
      "format": "typescript",
      "lines": 92,
      "fragment": "interface UseFormValidationOptions<TSchema extends z.ZodSchema>\n  extends Omit<UseFormProps<z.infer<TSchema>>, \"resolver\"> {\n  /**\n   * The Zod schema to validate against\n   */\n  schema: TSchema;\n\n  /**\n   * Function to handle form submission\n   */\n  onSubmit: (data: z.infer<TSchema>) => Promise<void> | void;\n\n  /**\n   * Additional options for the form submission handler\n   */\n  submitOptions?: {\n    /**\n     * Custom success message to show after submission\n     */\n    successMessage?: string;\n\n    /**\n     * Custom error message to show when submission fails\n     */\n    errorMessage?: string;\n\n    /**\n     * Whether to reset the form after successful submission\n     */\n    resetOnSuccess?: boolean;\n\n    /**\n     * Callback to run after successful submission but before toast\n     */\n    onSuccess?: () => void;\n\n    /**\n     * Callback to run when submission fails but before toast\n     */\n    onError?: (error: Error) => void;\n\n    /**\n     * Whether to show success toasts\n     */\n    showSuccessToast?: boolean;\n\n    /**\n     * Whether to show error toasts\n     */\n    showErrorToast?: boolean;\n  };\n}\n\n/**\n * A consolidated hook for form validation that integrates useZodForm and useFormSubmitHandler\n *\n * This hook provides a unified API for handling form validation and submission.\n *\n * @param options Configuration options including schema, default values, and submit handler\n * @returns An object containing form methods, submission handler, and loading state\n */\nexport function useFormValidation<TSchema extends z.ZodSchema>({\n  schema,\n  onSubmit,\n  submitOptions,\n  ...formOptions\n}: UseFormValidationOptions<TSchema>) {\n  // Set up the form with Zod validation\n  const form = useZodForm({\n    schema,\n    ...formOptions,\n  });\n\n  // Set up the form submission handler and capture the typed submit handler\n  const formHandler = useFormSubmitHandler(\n    form,\n    onSubmit as (data: z.infer<TSchema>) => Promise<void> | void,\n    submitOptions\n  );\n\n  // Access validation utilities\n  const validationUtils = {\n    common: useCommonValidation(),\n    fields: useFieldValidation(),\n    schemas: useFormSchemas(),\n  };\n\n  // Return the form methods, submission handler, and validation utils\n  return {\n    form,\n    isSubmitting: formHandler.isSubmitting,\n    formError",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useFormValidation.ts",
        "start": 12,
        "end": 103,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 96
        },
        "endLoc": {
          "line": 103,
          "column": 10,
          "position": 481
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\form\\useFormValidation.ts",
        "start": 14,
        "end": 105,
        "startLoc": {
          "line": 14,
          "column": 2,
          "position": 101
        },
        "endLoc": {
          "line": 105,
          "column": 13,
          "position": 486
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "(required: boolean = true) => {\n      const schema = z\n        .string()\n        .min(13, t(\"validation.creditCard.invalidLength\"))\n        .max(19, t(\"validation.creditCard.invalidLength\"))\n        .regex(/^[0-9]+$/, t(\"validation.creditCard.numbersOnly\"))\n        .refine(\n          (cardNumber) => {\n            // Luhn algorithm for credit card validation\n            let sum = 0;\n            let shouldDouble = false;\n\n            // Loop through values starting from the rightmost digit\n            for (let i = cardNumber.length - 1; i >= 0; i--) {\n              let digit = parseInt(cardNumber.charAt(i));\n\n              if (shouldDouble) {\n                digit *= 2;\n                if (digit > 9) digit -= 9;\n              }\n\n              sum += digit;\n              shouldDouble = !shouldDouble;\n            }\n\n            return sum % 10 === 0;\n          },\n          { message: t(\"validation.creditCard.invalid\") }\n        );\n\n      return required ? schema : schema.optional();\n    },",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useFieldValidation.ts",
        "start": 20,
        "end": 51,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 83
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 360
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\useFormSchemas.ts",
        "start": 37,
        "end": 68,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 246
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 523
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "(required: boolean = true) => {\n      const schema = z\n        .string()\n        .regex(\n          /^(0[1-9]|1[0-2])\\/([0-9]{2})$/,\n          t(\"validation.expirationDate.format\")\n        )\n        .refine(\n          (expDate) => {\n            const [month, yearStr] = expDate.split(\"/\");\n            const year = parseInt(`20${yearStr}`);\n            const currentDate = new Date();\n            const currentYear = currentDate.getFullYear();\n            const currentMonth = currentDate.getMonth() + 1;\n\n            // Check if the expiration date is in the future\n            return (\n              year > currentYear ||\n              (year === currentYear && parseInt(month) >= currentMonth)\n            );\n          },\n          { message: t(\"validation.expirationDate.expired\") }\n        );\n\n      return required ? schema : schema.optional();\n    },",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useFieldValidation.ts",
        "start": 59,
        "end": 84,
        "startLoc": {
          "line": 59,
          "column": 5,
          "position": 386
        },
        "endLoc": {
          "line": 84,
          "column": 2,
          "position": 615
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\useFormSchemas.ts",
        "start": 71,
        "end": 96,
        "startLoc": {
          "line": 71,
          "column": 2,
          "position": 536
        },
        "endLoc": {
          "line": 96,
          "column": 2,
          "position": 765
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "(required: boolean = true) => {\n      const schema = z\n        .string()\n        .min(3, t(\"validation.cvv.tooShort\"))\n        .max(4, t(\"validation.cvv.tooLong\"))\n        .regex(/^[0-9]+$/, t(\"validation.cvv.numbersOnly\"));\n\n      return required ? schema : schema.optional();\n    },",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useFieldValidation.ts",
        "start": 92,
        "end": 100,
        "startLoc": {
          "line": 92,
          "column": 5,
          "position": 641
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 732
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\useFormSchemas.ts",
        "start": 99,
        "end": 107,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 778
        },
        "endLoc": {
          "line": 107,
          "column": 2,
          "position": 869
        }
      }
    },
    {
      "format": "typescript",
      "lines": 66,
      "fragment": "const REGEX_PATTERNS = {\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  PASSWORD: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, // Min 8 chars, at least 1 letter and 1 number\n  PHONE: /^\\+?[0-9]{10,15}$/,\n};\n\n/**\n * Common validation patterns used across the application\n *\n * This hook provides access to frequently used validation schemas with proper i18n support\n * and consistent error messages.\n *\n * @returns An object containing commonly used validation schemas and utility functions\n */\nexport function useCommonValidation() {\n  const { t } = useTranslation();\n\n  /**\n   * Creates a required string schema with an optional minimum length\n   */\n  const requiredString = useCallback(\n    (minLength?: number, fieldName?: string) => {\n      const name = fieldName ? t(`fields.${fieldName}`) : t(\"common.field\");\n\n      return minLength\n        ? z\n            .string({\n              required_error: t(\"validation.required\", { field: name }),\n            })\n            .min(\n              minLength,\n              t(\"validation.minLength\", { field: name, length: minLength })\n            )\n        : z\n            .string({\n              required_error: t(\"validation.required\", { field: name }),\n            })\n            .min(1, t(\"validation.required\", { field: name }));\n    },\n    [t]\n  );\n\n  /**\n   * Creates an email validation schema with proper error messages\n   */\n  const email = useCallback(() => {\n    return z\n      .string({\n        required_error: t(\"validation.emailRequired\"),\n      })\n      .email(t(\"validation.invalidEmail\"));\n  }, [t]);\n\n  /**\n   * Creates a password validation schema with requirements\n   */\n  const password = useCallback(\n    (minLength: number = 8) => {\n      return z\n        .string({\n          required_error: t(\"validation.passwordRequired\"),\n        })\n        .min(\n          minLength,\n          t(\"validation.passwordMinLength\", { length: minLength })\n        );",
      "tokens": 0,
      "firstFile": {
        "name": "src\\shared\\hooks\\useCommonValidation.ts",
        "start": 6,
        "end": 71,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 462
        }
      },
      "secondFile": {
        "name": "src\\shared\\hooks\\form\\useCommonValidation.ts",
        "start": 6,
        "end": 72,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 464
        }
      }
    },
    {
      "format": "typescript",
      "lines": 431,
      "fragment": "export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[];\n\nexport type Database = {\n  public: {\n    Tables: {\n      employees: {\n        Row: {\n          contact: string;\n          created_at: string | null;\n          hire_date: string;\n          id: string;\n          name: string;\n          position: string;\n          salary: number;\n          status: string;\n        };\n        Insert: {\n          contact: string;\n          created_at?: string | null;\n          hire_date: string;\n          id?: string;\n          name: string;\n          position: string;\n          salary: number;\n          status?: string;\n        };\n        Update: {\n          contact?: string;\n          created_at?: string | null;\n          hire_date?: string;\n          id?: string;\n          name?: string;\n          position?: string;\n          salary?: number;\n          status?: string;\n        };\n        Relationships: [];\n      };\n      expenses: {\n        Row: {\n          amount: number;\n          category: string;\n          created_at: string | null;\n          date: string;\n          description: string;\n          id: string;\n          invoice_number: string | null;\n          notes: string | null;\n          payment_method: string | null;\n          payment_status: string;\n        };\n        Insert: {\n          amount: number;\n          category: string;\n          created_at?: string | null;\n          date: string;\n          description: string;\n          id?: string;\n          invoice_number?: string | null;\n          notes?: string | null;\n          payment_method?: string | null;\n          payment_status: string;\n        };\n        Update: {\n          amount?: number;\n          category?: string;\n          created_at?: string | null;\n          date?: string;\n          description?: string;\n          id?: string;\n          invoice_number?: string | null;\n          notes?: string | null;\n          payment_method?: string | null;\n          payment_status?: string;\n        };\n        Relationships: [];\n      };\n      filling_systems: {\n        Row: {\n          id: number;\n          name: string;\n          status: string;\n          tank_id: string | null;\n        };\n        Insert: {\n          id?: number;\n          name: string;\n          status?: string;\n          tank_id?: string | null;\n        };\n        Update: {\n          id?: number;\n          name?: string;\n          status?: string;\n          tank_id?: string | null;\n        };\n        Relationships: [];\n      };\n      inventory: {\n        Row: {\n          fuel_type: string;\n          id: number;\n          last_updated: string | null;\n          quantity: number;\n        };\n        Insert: {\n          fuel_type: string;\n          id?: number;\n          last_updated?: string | null;\n          quantity?: number;\n        };\n        Update: {\n          fuel_type?: string;\n          id?: number;\n          last_updated?: string | null;\n          quantity?: number;\n        };\n        Relationships: [];\n      };\n      profiles: {\n        Row: {\n          avatar_url: string | null;\n          email: string | null;\n          full_name: string | null;\n          id: string;\n          role: string | null;\n          updated_at: string | null;\n          username: string | null;\n        };\n        Insert: {\n          avatar_url?: string | null;\n          email?: string | null;\n          full_name?: string | null;\n          id: string;\n          role?: string | null;\n          updated_at?: string | null;\n          username?: string | null;\n        };\n        Update: {\n          avatar_url?: string | null;\n          email?: string | null;\n          full_name?: string | null;\n          id?: string;\n          role?: string | null;\n          updated_at?: string | null;\n          username?: string | null;\n        };\n        Relationships: [];\n      };\n      profit_loss_summary: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          period: string;\n          profit: number;\n          total_expenses: number;\n          total_sales: number;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          period: string;\n          profit: number;\n          total_expenses: number;\n          total_sales: number;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          period?: string;\n          profit?: number;\n          total_expenses?: number;\n          total_sales?: number;\n        };\n        Relationships: [];\n      };\n      sales: {\n        Row: {\n          created_at: string | null;\n          date: string;\n          filling_system_id: number | null;\n          fuel_type: string;\n          id: number;\n          liters: number;\n          price_per_unit: number;\n          total_sales: number | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          date?: string;\n          filling_system_id?: number | null;\n          fuel_type: string;\n          id?: number;\n          liters: number;\n          price_per_unit: number;\n          total_sales?: number | null;\n        };\n        Update: {\n          created_at?: string | null;\n          date?: string;\n          filling_system_id?: number | null;\n          fuel_type?: string;\n          id?: number;\n          liters?: number;\n          price_per_unit?: number;\n          total_sales?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"sales_filling_system_id_fkey\";\n            columns: [\"filling_system_id\"];\n            isOneToOne: false;\n            referencedRelation: \"filling_systems\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      shift_payment_methods: {\n        Row: {\n          amount: number;\n          created_at: string | null;\n          id: string;\n          payment_method: string;\n          reference: string | null;\n          shift_id: string;\n        };\n        Insert: {\n          amount?: number;\n          created_at?: string | null;\n          id?: string;\n          payment_method: string;\n          reference?: string | null;\n          shift_id: string;\n        };\n        Update: {\n          amount?: number;\n          created_at?: string | null;\n          id?: string;\n          payment_method?: string;\n          reference?: string | null;\n          shift_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"shift_payment_methods_shift_id_fkey\";\n            columns: [\"shift_id\"];\n            isOneToOne: false;\n            referencedRelation: \"shifts\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      shifts: {\n        Row: {\n          closing_cash: number | null;\n          created_at: string | null;\n          employee_id: string;\n          end_time: string | null;\n          id: string;\n          opening_cash: number;\n          sales_total: number;\n          start_time: string;\n          status: string;\n          updated_at: string | null;\n        };\n        Insert: {\n          closing_cash?: number | null;\n          created_at?: string | null;\n          employee_id: string;\n          end_time?: string | null;\n          id?: string;\n          opening_cash?: number;\n          sales_total?: number;\n          start_time?: string;\n          status?: string;\n          updated_at?: string | null;\n        };\n        Update: {\n          closing_cash?: number | null;\n          created_at?: string | null;\n          employee_id?: string;\n          end_time?: string | null;\n          id?: string;\n          opening_cash?: number;\n          sales_total?: number;\n          start_time?: string;\n          status?: string;\n          updated_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"shifts_employee_id_fkey\";\n            columns: [\"employee_id\"];\n            isOneToOne: false;\n            referencedRelation: \"employees\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      [_ in never]: never;\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">];\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R;\n      }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never;\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database;\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never;\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const;",
      "tokens": 0,
      "firstFile": {
        "name": "src\\integrations\\supabase\\types.ts",
        "start": 1,
        "end": 431,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 431,
          "column": 2,
          "position": 3503
        }
      },
      "secondFile": {
        "name": "src\\core\\api\\types\\supabase-database.ts",
        "start": 1,
        "end": 431,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 431,
          "column": 2,
          "position": 3933
        }
      }
    },
    {
      "format": "tsx",
      "lines": 25,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Tank Management System\n              </h1>\n              <p className=\"page-description\">\n                Comprehensive tank monitoring, maintenance",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\TanksPage.tsx",
        "start": 8,
        "end": 32,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 92
        },
        "endLoc": {
          "line": 32,
          "column": 12,
          "position": 277
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 202,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 202,
          "column": 9,
          "position": 1726
        }
      }
    },
    {
      "format": "javascript",
      "lines": 44,
      "fragment": "={breadcrumbItems}\n    >\n      {/* Quick Stats Overview */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {quickStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              title={stat.title}\n              value={stat.value}\n              icon={stat.icon}\n              color={stat.color}\n              description={stat.description}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Management Modules */}\n      <div className=\"space-y-8\">\n        {Object.entries(groupedModules).map(([category, modules]) => (\n          <div key={category}>\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\n                {category}\n              </h2>\n              <div className=\"h-px bg-gradient-to-r from-black via-[#717181] to-transparent dark:from-[#717181] dark:via-[#A6A698] dark:to-transparent\"></div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {modules.map((module) => (\n                <ModuleCard\n                  key={module.id}\n                  id={module.id}\n                  title={module.title}\n                  description={module.description}\n                  path={module.path}\n                  icon={module.icon}\n                  badge={module.badge}\n                  stats={module.stats}\n                  color={module.color}\n                  bgGradient={module.bgGradient}\n                  iconGradient={module.iconGradient}\n                  textColor={module.textColor}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 267,
        "end": 310,
        "startLoc": {
          "line": 267,
          "column": 16,
          "position": 1871
        },
        "endLoc": {
          "line": 310,
          "column": 2,
          "position": 2217
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 384,
        "end": 427,
        "startLoc": {
          "line": 384,
          "column": 16,
          "position": 2687
        },
        "endLoc": {
          "line": 427,
          "column": 2,
          "position": 3033
        }
      }
    },
    {
      "format": "tsx",
      "lines": 19,
      "fragment": "{\n  id: string;\n  title: string;\n  description: string;\n  path: string;\n  icon: React.ComponentType<any>;\n  category?: string;\n  badge?: string;\n  stats?: {\n    count: string;\n    label: string;\n  };\n  color: string;\n  bgGradient: string;\n  iconGradient: string;\n  textColor: string;\n}\n\nconst managementModules",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 22,
        "end": 40,
        "startLoc": {
          "line": 22,
          "column": 2,
          "position": 136
        },
        "endLoc": {
          "line": 40,
          "column": 18,
          "position": 252
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 141
        },
        "endLoc": {
          "line": 45,
          "column": 16,
          "position": 257
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ".reduce((acc, module) => {\n    const category = module.category || 'Other';\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(module);\n    return acc;\n  }, {} as Record<string, ManagementModule",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 223,
        "end": 230,
        "startLoc": {
          "line": 223,
          "column": 18,
          "position": 1574
        },
        "endLoc": {
          "line": 230,
          "column": 17,
          "position": 1664
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 340,
        "end": 347,
        "startLoc": {
          "line": 340,
          "column": 16,
          "position": 2390
        },
        "endLoc": {
          "line": 347,
          "column": 15,
          "position": 2480
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "\"\n      breadcrumbItems={breadcrumbItems}\n    >\n      {/* Quick Stats Overview */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {quickStats.map((stat, index) => (\n            <StatsCard\n              key={index}\n              title={stat.title}\n              value={stat.value}\n              icon={stat.icon}\n              color={stat.color}\n              description={stat.description}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Management Modules */",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 266,
        "end": 285,
        "startLoc": {
          "line": 266,
          "column": 59,
          "position": 1868
        },
        "endLoc": {
          "line": 285,
          "column": 25,
          "position": 1992
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 383,
        "end": 402,
        "startLoc": {
          "line": 383,
          "column": 92,
          "position": 2684
        },
        "endLoc": {
          "line": 402,
          "column": 23,
          "position": 2808
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "}\n      <div className=\"space-y-8\">\n        {Object.entries(groupedModules).map(([category, modules]) => (\n          <div key={category}>\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold text-black dark:text-[#EEEFE7] mb-2\">\n                {category}\n              </h2>\n              <div className=\"h-px bg-gradient-to-r from-black via-[#717181] to-transparent dark:from-[#717181] dark:via-[#A6A698] dark:to-transparent",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 285,
        "end": 293,
        "startLoc": {
          "line": 285,
          "column": 25,
          "position": 1993
        },
        "endLoc": {
          "line": 293,
          "column": 121,
          "position": 2080
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 402,
        "end": 410,
        "startLoc": {
          "line": 402,
          "column": 23,
          "position": 2809
        },
        "endLoc": {
          "line": 410,
          "column": 125,
          "position": 2896
        }
      }
    },
    {
      "format": "tsx",
      "lines": 27,
      "fragment": "\"></div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {modules.map((module) => (\n                <ModuleCard\n                  key={module.id}\n                  id={module.id}\n                  title={module.title}\n                  description={module.description}\n                  path={module.path}\n                  icon={module.icon}\n                  badge={module.badge}\n                  stats={module.stats}\n                  color={module.color}\n                  bgGradient={module.bgGradient}\n                  iconGradient={module.iconGradient}\n                  textColor={module.textColor}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </WindowContainer>\n  );\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\ManagementPage.tsx",
        "start": 293,
        "end": 319,
        "startLoc": {
          "line": 293,
          "column": 121,
          "position": 2081
        },
        "endLoc": {
          "line": 319,
          "column": 2,
          "position": 2255
        }
      },
      "secondFile": {
        "name": "src\\features\\settings\\pages\\SettingsPage.tsx",
        "start": 410,
        "end": 436,
        "startLoc": {
          "line": 410,
          "column": 125,
          "position": 2897
        },
        "endLoc": {
          "line": 436,
          "column": 2,
          "position": 3071
        }
      }
    },
    {
      "format": "tsx",
      "lines": 22,
      "fragment": "}\n  ];\n\n  return (\n    <div className=\"subnav-container\">\n      <div className=\"subnav-card-window\">\n        {/* Header with Breadcrumb */}\n        <div className=\"subnav-header\">\n          <div className=\"subnav-header-content\">\n            <div className=\"subnav-breadcrumb\">\n              <Breadcrumb items={breadcrumbItems} />\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"subnav-body\">\n          <div className=\"subnav-content\">\n            {/* Page Title Section */}\n            <div className=\"page-title-section\">\n              <h1 className=\"page-title\">\n                Fuel Systems",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\FuelSystemsPage.tsx",
        "start": 8,
        "end": 29,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 92
        },
        "endLoc": {
          "line": 29,
          "column": 8,
          "position": 249
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\pages\\TanksPage.tsx",
        "start": 178,
        "end": 116,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 1541
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 764
        }
      }
    },
    {
      "format": "javascript",
      "lines": 36,
      "fragment": "}\r\n              disabled={loading}\r\n              className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-card border border-border rounded-lg hover:shadow-md transition-all duration-200 disabled:opacity-50\"\r\n            >\r\n              <ActionIcons.Refresh className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\r\n              Refresh\r\n            </button>\r\n            <button \r\n              onClick={() => setShowCreateModal(true)}\r\n              className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-accent text-accent-foreground rounded-lg hover:bg-accent/90 transition-all duration-200\"\r\n            >\r\n              <UserIcons.UserPlus className=\"w-4 h-4\" />\r\n              Add Employee\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {quickStats.map((stat, index) => (\r\n            <StatsCard\r\n              key={index}\r\n              title={stat.title}\r\n              value={stat.value}\r\n              icon={stat.icon}\r\n              color={stat.color}\r\n              description={stat.description}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters and Controls */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div className=\"flex bg-muted rounded-lg p-1\">\r\n            <button\r\n              onClick={() => setViewMode('grid'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\EmployeesPage.tsx",
        "start": 207,
        "end": 242,
        "startLoc": {
          "line": 207,
          "column": 14,
          "position": 2009
        },
        "endLoc": {
          "line": 242,
          "column": 7,
          "position": 2283
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\ExpensesPage.tsx",
        "start": 339,
        "end": 374,
        "startLoc": {
          "line": 339,
          "column": 13,
          "position": 2661
        },
        "endLoc": {
          "line": 374,
          "column": 13,
          "position": 2914
        }
      }
    },
    {
      "format": "javascript",
      "lines": 32,
      "fragment": "}))}\r\n                    className=\"w-full px-3 py-2.5 bg-background border border-border rounded-lg text-card-foreground focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent\"\r\n                  >\r\n                    <option value=\"active\">Active</option>\r\n                    <option value=\"inactive\">Inactive</option>\r\n                    <option value=\"on_leave\">On Leave</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"md:col-span-2\">\r\n                  <label className=\"block text-sm font-medium text-card-foreground mb-2\">\r\n                    Notes\r\n                  </label>\r\n                  <textarea\r\n                    value={createForm.notes}\r\n                    onChange={(e) => setCreateForm(prev => ({ ...prev, notes: e.target.value }))}\r\n                    rows={3}\r\n                    className=\"w-full px-3 py-2.5 bg-background border border-border rounded-lg text-card-foreground focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent resize-none\"\r\n                    placeholder=\"Additional notes about the employee...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-3 mt-8\">\r\n                <button\r\n                  onClick={() => setShowCreateModal(false)}\r\n                  className=\"flex-1 px-6 py-2.5 text-sm text-muted-foreground border border-border rounded-lg hover:bg-muted transition-colors\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={handleCreateEmployee",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\EmployeesPage.tsx",
        "start": 572,
        "end": 603,
        "startLoc": {
          "line": 572,
          "column": 2,
          "position": 5409
        },
        "endLoc": {
          "line": 603,
          "column": 21,
          "position": 5656
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\ExpensesPage.tsx",
        "start": 780,
        "end": 808,
        "startLoc": {
          "line": 780,
          "column": 7,
          "position": 6431
        },
        "endLoc": {
          "line": 808,
          "column": 20,
          "position": 6613
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "({\r\n          first_name: '',\r\n          last_name: '',\r\n          email: '',\r\n          phone: '',\r\n          position: '',\r\n          department: '',\r\n          hire_date: new Date().toISOString().split('T')[0],\r\n          salary: 0,\r\n          status: 'active',",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\EmployeesPage.tsx",
        "start": 94,
        "end": 103,
        "startLoc": {
          "line": 94,
          "column": 14,
          "position": 918
        },
        "endLoc": {
          "line": 103,
          "column": 2,
          "position": 1007
        }
      },
      "secondFile": {
        "name": "src\\features\\management\\EmployeesPage.tsx",
        "start": 40,
        "end": 49,
        "startLoc": {
          "line": 40,
          "column": 9,
          "position": 421
        },
        "endLoc": {
          "line": 49,
          "column": 3,
          "position": 511
        }
      }
    },
    {
      "format": "tsx",
      "lines": 7,
      "fragment": "}\r\n      {showCreateModal && (\r\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-card border border-border rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h3 className=\"text-xl font-semibold text-card-foreground\">Add",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\management\\EmployeesPage.tsx",
        "start": 440,
        "end": 446,
        "startLoc": {
          "line": 440,
          "column": 28,
          "position": 4245
        },
        "endLoc": {
          "line": 446,
          "column": 4,
          "position": 4315
        }
      },
      "secondFile": {
        "name": "src\\features\\finance\\pages\\ExpensesPage.tsx",
        "start": 669,
        "end": 675,
        "startLoc": {
          "line": 669,
          "column": 27,
          "position": 5464
        },
        "endLoc": {
          "line": 675,
          "column": 7,
          "position": 5528
        }
      }
    },
    {
      "format": "markdown",
      "lines": 112,
      "fragment": "Filling Systems Feature\n\nThis feature module manages fuel dispensing systems, including creating, updating, and associating them with fuel tanks. It provides components for managing filling systems and diagnosing issues with tank associations.\n\n## Directory Structure\n\n```\nfilling-systems/\n├── components/                     # Feature-specific components\n│   ├── FillingSystemManagerStandardized.tsx   # Main manager component\n│   ├── FillingSystemFormStandardized.tsx      # Form for creating filling systems\n│   ├── FillingSystemList.tsx                  # List of filling systems\n│   ├── FillingSystemHeader.tsx                # Header with actions\n│   ├── ConfirmDeleteDialogStandardized.tsx    # Delete confirmation dialog\n│   └── TankDiagnostics.tsx                    # Tank diagnostics tool\n├── hooks/                          # Feature-specific hooks\n│   └── useFillingSystem.ts         # Custom hook for filling system operations\n├── services/                       # Feature-specific services\n│   └── fillingSystemsService.ts    # Service for API interactions\n├── types/                          # Feature-specific type definitions\n│   └── index.ts                    # Type definitions\n└── index.ts                        # Public API exports\n```\n\n## Usage\n\n### Importing Components\n\n```tsx\nimport {\n  FillingSystemManagerStandardized,\n  FillingSystemFormStandardized,\n  TankDiagnostics,\n} from \"@/features/filling-systems\";\n```\n\n### Using the Manager Component\n\nThe `FillingSystemManagerStandardized` component is the main entry point for managing filling systems:\n\n```tsx\nimport { FillingSystemManagerStandardized } from \"@/features/filling-systems\";\n\nfunction MyPage() {\n  return (\n    <div>\n      <h1>Filling Systems Management</h1>\n      <FillingSystemManagerStandardized\n        onRenderAction={(action) => {\n          // Handle action rendering\n        }}\n      />\n    </div>\n  );\n}\n```\n\n### Using the Custom Hook\n\n```tsx\nimport { useFillingSystem } from \"@/features/filling-systems\";\n\nfunction MyComponent() {\n  const {\n    getFillingSystemsQuery,\n    getFillingSystemQuery,\n    createFillingSystem,\n    updateFillingSystem,\n    deleteFillingSystem,\n  } = useFillingSystem();\n\n  // Use these functions to interact with filling systems\n}\n```\n\n## Type Definitions\n\nThe feature exports several TypeScript interfaces:\n\n- `FillingSystem`: Represents a filling system entity\n- `CreateFillingSystemRequest`: For creating new filling systems\n- `UpdateFillingSystemRequest`: For updating existing filling systems\n- `FillingSystemFilters`: For filtering filling systems\n- `FillingSystemStats`: For filling system statistics\n\n## Internationalization\n\nThis feature uses the API translation helpers for internationalization:\n\n```tsx\nimport { apiNamespaces, getApiActionLabel } from \"@/i18n/i18n\";\n\n// Get translated title\nconst title =\n  t(\"fillingSystems.title\") ||\n  getApiActionLabel(apiNamespaces.fillingSystems, \"list\");\n```\n\n## Diagnostics\n\nThe feature includes a diagnostics tool that can help identify issues with tank associations:\n\n```tsx\nimp",
      "tokens": 0,
      "firstFile": {
        "name": "src\\features\\filling-systems\\README.md",
        "start": 3,
        "end": 114,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 114,
          "column": 4,
          "position": 659
        }
      },
      "secondFile": {
        "name": "src\\features\\fuel-management\\README.md",
        "start": 3,
        "end": 114,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 114,
          "column": 4,
          "position": 659
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "export interface Sale {\n  id: string;\n  amount: number;\n  quantityLiters: number;\n  unitPrice: number;\n  saleDate: Date;\n  fuelType: FuelTypeCode;\n  vehiclePlate?: string;\n  customerName?: string;\n  paymentMethod: PaymentMethod;\n  paymentStatus: PaymentStatus;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date | null;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\types\\index.ts",
        "start": 109,
        "end": 123,
        "startLoc": {
          "line": 109,
          "column": 1,
          "position": 582
        },
        "endLoc": {
          "line": 123,
          "column": 2,
          "position": 688
        }
      },
      "secondFile": {
        "name": "src\\features\\sales\\types\\index.ts",
        "start": 26,
        "end": 40,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 173
        },
        "endLoc": {
          "line": 40,
          "column": 16,
          "position": 280
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ": NavigationCategoryConfig[] = [\r\n  {\r\n    id: 'overview',\r\n    title: 'Overview',\r\n    titleAm: 'Ընդհանուր',\r\n    description: 'Dashboard and system overview',\r\n    descriptionAm: 'Կառավարման վահանակ և համակարգի ակնարկ',\r\n    icon: LayoutDashboard,\r\n    color: 'from-blue-500 to-blue-600',\r\n    priority: 1\r\n  },\r\n  {\r\n    id: 'management',\r\n    title: 'Management',\r\n    titleAm: 'Կառավարում',\r\n    description: 'Staff and shift management',\r\n    descriptionAm: 'Անձնակազմի և հերթափոխությունների կառավարում',\r\n    icon: Users,\r\n    color: 'from-green-500 to-green-600'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 39,
        "end": 57,
        "startLoc": {
          "line": 39,
          "column": 29,
          "position": 194
        },
        "endLoc": {
          "line": 57,
          "column": 30,
          "position": 333
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 215,
        "end": 233,
        "startLoc": {
          "line": 215,
          "column": 21,
          "position": 1343
        },
        "endLoc": {
          "line": 233,
          "column": 28,
          "position": 1464
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": ": NavigationItem[] = [\r\n  {\r\n    id: 'overview',\r\n    name: 'Dashboard',\r\n    nameAm: 'Կառավարման վահանակ',\r\n    icon: LayoutDashboard,\r\n    path: '/',\r\n    description: 'Main dashboard overview',\r\n    descriptionAm: 'Հիմնական վահանակի ակնարկ'\r\n  },\r\n  {\r\n    id: 'management',\r\n    name: 'Management',\r\n    nameAm: 'Կառավարում',\r\n    icon: Users,\r\n    path: '/management',\r\n    description: 'Staff and operations management',\r\n    descriptionAm: 'Անձնակազմի և գործառնությունների կառավարում',\r\n    children: [\r\n      {\r\n        id: 'management.shifts',\r\n        name: 'Shifts',\r\n        nameAm: 'Հերթափոխություններ',\r\n        icon: CalendarDays,\r\n        path: '/management/shifts',\r\n        description: 'Employee shift management',\r\n        descriptionAm: 'Աշխատակիցների հերթափոխությունների կառավարում'\r\n      },\r\n      {\r\n        id: 'management.employees',\r\n        name: 'Employees',\r\n        nameAm: 'Աշխատակիցներ',\r\n        icon: UserCheck,\r\n        path: '/management/employees',\r\n        description: 'Staff management'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 103,
        "end": 137,
        "startLoc": {
          "line": 103,
          "column": 28,
          "position": 650
        },
        "endLoc": {
          "line": 137,
          "column": 19,
          "position": 904
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 259,
        "end": 293,
        "startLoc": {
          "line": 259,
          "column": 20,
          "position": 1611
        },
        "endLoc": {
          "line": 293,
          "column": 32,
          "position": 1831
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "}\r\n    ]\r\n  },\r\n  {\r\n    id: 'finance',\r\n    name: 'Finance',\r\n    nameAm: 'Ֆինանսներ',\r\n    icon: DollarSign,\r\n    path: '/finance',\r\n    description: 'Financial management and analytics',\r\n    descriptionAm: 'Ֆինանսական կառավարում և վերլուծություն',\r\n    children: [\r\n      {\r\n        id: 'finance.dashboard',\r\n        name: 'Finance Dashboard',\r\n        nameAm: 'Ֆինանսական վահանակ',\r\n        icon: BarChart3,\r\n        path: '/finance/dashboard',\r\n        description: 'Overview/analytics'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 139,
        "end": 157,
        "startLoc": {
          "line": 139,
          "column": 7,
          "position": 916
        },
        "endLoc": {
          "line": 157,
          "column": 21,
          "position": 1043
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 295,
        "end": 313,
        "startLoc": {
          "line": 295,
          "column": 7,
          "position": 1841
        },
        "endLoc": {
          "line": 313,
          "column": 35,
          "position": 1950
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": ",\r\n        name: 'Payment Methods',\r\n        nameAm: 'Վճարման մեթոդներ',\r\n        icon: Banknote,\r\n        path: '/finance/payment-methods',\r\n        description: 'Payment processing options',\r\n        descriptionAm: 'Վճարման մշակման տարբերակներ'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'fuel',\r\n    name: 'Fuel Management',\r\n    nameAm: 'Վառելիքի կառավարում',\r\n    icon: Fuel,\r\n    path: '/fuel-management',\r\n    description: 'Fuel inventory and operations',\r\n    descriptionAm: 'Վառելիքի պաշարներ և գործառնություններ',\r\n    children: [\r\n      {\r\n        id: 'fuel.dashboard',\r\n        name: 'Fuel Dashboard',\r\n        nameAm: 'Վառելիքի վահանակ',\r\n        icon: Gauge,\r\n        path: '/fuel-management/dashboard',\r\n        description: 'Fuel analytics overview',\r\n        descriptionAm: 'Վառելիքի վերլուծության ակնարկ'\r\n      },\r\n      {\r\n        id: 'fuel.tanks',\r\n        name: 'Tanks',\r\n        nameAm: 'Ցիստեռներ',\r\n        icon: Database,\r\n        path: '/fuel-management/tanks',\r\n        description: 'Storage tank management',\r\n        descriptionAm: 'Պահման ցիստեռների կառավարում'",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 188,
        "end": 223,
        "startLoc": {
          "line": 188,
          "column": 26,
          "position": 1260
        },
        "endLoc": {
          "line": 223,
          "column": 31,
          "position": 1510
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 344,
        "end": 379,
        "startLoc": {
          "line": 344,
          "column": 19,
          "position": 2136
        },
        "endLoc": {
          "line": 379,
          "column": 35,
          "position": 2351
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "},\r\n      {\r\n        id: 'fuel.supplies',\r\n        name: 'Fuel Supplies',\r\n        nameAm: 'Վառելիքի մատակարարում',\r\n        icon: Package,\r\n        path: '/fuel-management/fuel-supplies',\r\n        description: 'Inventory management',\r\n        descriptionAm: 'Պաշարների կառավարում'\r\n      },\r\n      {\r\n        id: 'fuel.prices',\r\n        name: 'Fuel Prices',\r\n        nameAm: 'Վառելիքի գներ',\r\n        icon: PiggyBank,\r\n        path: '/fuel-management/prices',\r\n        description: 'Pricing management',\r\n        descriptionAm: 'Գնակառուցման կառավարում'\r\n      },\r\n      {\r\n        id: 'fuel.types',\r\n        name: 'Fuel Types',\r\n        nameAm: 'Վառելիքի տիպեր',\r\n        icon: Droplets",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 224,
        "end": 247,
        "startLoc": {
          "line": 224,
          "column": 7,
          "position": 1514
        },
        "endLoc": {
          "line": 247,
          "column": 9,
          "position": 1678
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 380,
        "end": 403,
        "startLoc": {
          "line": 380,
          "column": 7,
          "position": 2354
        },
        "endLoc": {
          "line": 403,
          "column": 5,
          "position": 2495
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "= (id: string): NavigationItem | undefined => {\r\n  const findItem = (items: NavigationItem[]): NavigationItem | undefined => {\r\n    for (const item of items) {\r\n      if (item.id === id) return item;\r\n      if (item.children) {\r\n        const found = findItem(item.children);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return undefined;\r\n  };\r\n  return findItem(enhancedNavigationStructure",
      "tokens": 0,
      "firstFile": {
        "name": "src\\core\\config\\enhanced-navigation.ts",
        "start": 337,
        "end": 348,
        "startLoc": {
          "line": 337,
          "column": 2,
          "position": 2300
        },
        "endLoc": {
          "line": 348,
          "column": 28,
          "position": 2450
        }
      },
      "secondFile": {
        "name": "src\\core\\config\\navigation.ts",
        "start": 501,
        "end": 513,
        "startLoc": {
          "line": 501,
          "column": 2,
          "position": 3161
        },
        "endLoc": {
          "line": 513,
          "column": 20,
          "position": 3302
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "): string {\n  if (value === null || value === undefined) return \"\";\n\n  const numValue = typeof value === \"string\" ? parseFloat(value) : value;\n  if (isNaN(numValue)) return \"\";\n\n  try {\n    return new Intl.NumberFormat(locale, {\n      style",
      "tokens": 0,
      "firstFile": {
        "name": "src\\lib\\formatters.ts",
        "start": 175,
        "end": 183,
        "startLoc": {
          "line": 175,
          "column": 1,
          "position": 1209
        },
        "endLoc": {
          "line": 183,
          "column": 6,
          "position": 1304
        }
      },
      "secondFile": {
        "name": "src\\lib\\formatters.ts",
        "start": 139,
        "end": 147,
        "startLoc": {
          "line": 139,
          "column": 1,
          "position": 930
        },
        "endLoc": {
          "line": 147,
          "column": 22,
          "position": 1025
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ".getTime() - startTime.getTime();\n\n  // Convert to hours and minutes\n  const hours = Math.floor(diffMillis / (1000 * 60 * 60));\n  const minutes = Math.floor((diffMillis % (1000 * 60 * 60)) / (1000 * 60));\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else {\n    return `${minutes}m`;\n  }\n}\n\n// Legacy aliases for backward compatibility (no need for separate imports)",
      "tokens": 0,
      "firstFile": {
        "name": "src\\lib\\formatters.ts",
        "start": 281,
        "end": 294,
        "startLoc": {
          "line": 281,
          "column": 8,
          "position": 2123
        },
        "endLoc": {
          "line": 294,
          "column": 76,
          "position": 2262
        }
      },
      "secondFile": {
        "name": "src\\lib\\formatters.ts",
        "start": 257,
        "end": 272,
        "startLoc": {
          "line": 257,
          "column": 4,
          "position": 1900
        },
        "endLoc": {
          "line": 272,
          "column": 4,
          "position": 2039
        }
      }
    },
    {
      "format": "typescript",
      "lines": 207,
      "fragment": "/**\n * AraraTOil Design System\n *\n * A comprehensive design system for the Fuel Station Management application\n * with support for both light and dark modes, consistent spacing, and\n * typography guidelines.\n */\n\n// =============================================================================\n// COLOR SYSTEM\n// =============================================================================\n\nexport const colors = {\n  // Primary brand colors\n  primary: {\n    50: \"hsl(215, 100%, 97%)\",\n    100: \"hsl(215, 100%, 92%)\",\n    200: \"hsl(215, 95%, 84%)\",\n    300: \"hsl(215, 90%, 76%)\",\n    400: \"hsl(215, 90%, 67%)\",\n    500: \"hsl(215, 90%, 57%)\", // Main primary\n    600: \"hsl(215, 80%, 50%)\",\n    700: \"hsl(215, 80%, 40%)\",\n    800: \"hsl(215, 80%, 30%)\",\n    900: \"hsl(215, 80%, 20%)\",\n    950: \"hsl(215, 90%, 10%)\",\n  },\n\n  // Gray scale for text, backgrounds, borders\n  gray: {\n    50: \"hsl(220, 20%, 98%)\",\n    100: \"hsl(220, 15%, 95%)\",\n    200: \"hsl(220, 15%, 91%)\",\n    300: \"hsl(220, 10%, 85%)\",\n    400: \"hsl(220, 10%, 70%)\",\n    500: \"hsl(220, 10%, 50%)\",\n    600: \"hsl(220, 10%, 40%)\",\n    700: \"hsl(220, 10%, 30%)\",\n    800: \"hsl(220, 10%, 20%)\",\n    900: \"hsl(220, 15%, 15%)\",\n    950: \"hsl(220, 20%, 10%)\",\n  },\n\n  // Semantic colors for success, error, warning\n  success: {\n    50: \"hsl(145, 80%, 96%)\",\n    100: \"hsl(145, 80%, 92%)\",\n    200: \"hsl(145, 75%, 84%)\",\n    300: \"hsl(145, 70%, 70%)\",\n    400: \"hsl(145, 65%, 55%)\",\n    500: \"hsl(145, 65%, 42%)\", // Main success\n    600: \"hsl(145, 65%, 36%)\",\n    700: \"hsl(145, 65%, 30%)\",\n    800: \"hsl(145, 70%, 24%)\",\n    900: \"hsl(145, 70%, 18%)\",\n    950: \"hsl(145, 80%, 10%)\",\n  },\n\n  error: {\n    50: \"hsl(0, 100%, 97%)\",\n    100: \"hsl(0, 100%, 95%)\",\n    200: \"hsl(0, 100%, 90%)\",\n    300: \"hsl(0, 95%, 82%)\",\n    400: \"hsl(0, 90%, 70%)\",\n    500: \"hsl(0, 85%, 60%)\", // Main error\n    600: \"hsl(0, 80%, 50%)\",\n    700: \"hsl(0, 80%, 40%)\",\n    800: \"hsl(0, 80%, 30%)\",\n    900: \"hsl(0, 80%, 25%)\",\n    950: \"hsl(0, 90%, 15%)\",\n  },\n\n  warning: {\n    50: \"hsl(40, 100%, 97%)\",\n    100: \"hsl(40, 100%, 92%)\",\n    200: \"hsl(40, 95%, 85%)\",\n    300: \"hsl(40, 90%, 75%)\",\n    400: \"hsl(40, 90%, 65%)\",\n    500: \"hsl(40, 90%, 55%)\", // Main warning\n    600: \"hsl(40, 80%, 48%)\",\n    700: \"hsl(40, 80%, 40%)\",\n    800: \"hsl(40, 80%, 30%)\",\n    900: \"hsl(40, 80%, 22%)\",\n    950: \"hsl(40, 90%, 12%)\",\n  },\n\n  // Theme semantic colors (calculated based on mode)\n  theme: {\n    // Surface and background colors\n    background: \"var(--background)\", // Main app background\n    foreground: \"var(--foreground)\", // Main text color\n    card: \"var(--card)\", // Card background\n    cardForeground: \"var(--card-foreground)\", // Card text color\n    popover: \"var(--popover)\", // Popover background\n    popoverForeground: \"var(--popover-foreground)\", // Popover text color\n\n    // UI element colors\n    primary: \"var(--primary)\", // Primary actions\n    primaryForeground: \"var(--primary-foreground)\", // Text on primary bg\n    secondary: \"var(--secondary)\", // Secondary actions\n    secondaryForeground: \"var(--secondary-foreground)\", // Text on secondary bg\n    muted: \"var(--muted)\", // Muted elements\n    mutedForeground: \"var(--muted-foreground)\", // Text on muted bg\n    accent: \"var(--accent)\", // Accent elements\n    accentForeground: \"var(--accent-foreground)\", // Text on accent bg\n\n    // Border colors\n    border: \"var(--border)\", // Default border\n    input: \"var(--input)\", // Input border\n\n    // State colors\n    destructive: \"var(--destructive)\", // Destructive actions\n    destructiveForeground: \"var(--destructive-foreground)\", // Text on destructive bg\n    success: \"var(--success)\", // Success state\n    successForeground: \"var(--success-foreground)\", // Text on success bg\n    warning: \"var(--warning)\", // Warning state\n    warningForeground: \"var(--warning-foreground)\", // Text on warning bg\n\n    // UI feedback\n    ring: \"var(--ring)\", // Focus rings\n  },\n};\n\n// =============================================================================\n// TYPOGRAPHY SYSTEM\n// =============================================================================\n\nexport const typography = {\n  // Font families\n  fontFamily: {\n    sans: \"var(--font-sans)\",\n    mono: \"var(--font-mono)\",\n  },\n\n  // Font weights\n  fontWeight: {\n    normal: \"400\",\n    medium: \"500\",\n    semibold: \"600\",\n    bold: \"700\",\n  },\n\n  // Font sizes with matching line heights\n  fontSize: {\n    xs: {\n      size: \"0.75rem\", // 12px\n      lineHeight: \"1rem\", // 16px\n    },\n    sm: {\n      size: \"0.875rem\", // 14px\n      lineHeight: \"1.25rem\", // 20px\n    },\n    base: {\n      size: \"1rem\", // 16px\n      lineHeight: \"1.5rem\", // 24px\n    },\n    lg: {\n      size: \"1.125rem\", // 18px\n      lineHeight: \"1.75rem\", // 28px\n    },\n    xl: {\n      size: \"1.25rem\", // 20px\n      lineHeight: \"1.875rem\", // 30px\n    },\n    \"2xl\": {\n      size: \"1.5rem\", // 24px\n      lineHeight: \"2rem\", // 32px\n    },\n    \"3xl\": {\n      size: \"1.875rem\", // 30px\n      lineHeight: \"2.375rem\", // 38px\n    },\n    \"4xl\": {\n      size: \"2.25rem\", // 36px\n      lineHeight: \"2.75rem\", // 44px\n    },\n    \"5xl\": {\n      size: \"3rem\", // 48px\n      lineHeight: \"3.5rem\", // 56px\n    },\n  },\n\n  // Heading styles (combines size, weight, and line height)\n  headings: {\n    h1: {\n      fontSize: \"1.875rem\", // 30px\n      lineHeight: \"2.375rem\", // 38px\n      fontWeight: \"700\",\n      letterSpacing: \"-0.02em\",\n    },\n    h2: {\n      fontSize: \"1.5rem\", // 24px\n      lineHeight: \"2rem\", // 32px\n      fontWeight: \"600\",\n      letterSpacing: \"-0.01em\",\n    },\n    h3: {\n      fontSize: \"1.25rem\", // 20px\n      lineHeight: \"1.875rem\", // 30px\n      fontWeight: \"600\",\n      letterSpacing: \"-0.01em\",\n    },\n    h4: {\n      fontSize: \"1.125rem\", // 18px\n      lineHeight: \"1.75rem\", // 28px\n      fontWeight: \"600\",\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "src\\lib\\design-system.ts",
        "start": 1,
        "end": 207,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 207,
          "column": 2,
          "position": 1240
        }
      },
      "secondFile": {
        "name": "src\\core\\design\\theme.ts",
        "start": 1,
        "end": 207,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 207,
          "column": 14,
          "position": 1240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 38,
      "fragment": "0: \"0\",\n  0.5: \"0.125rem\", // 2px\n  1: \"0.25rem\", // 4px\n  1.5: \"0.375rem\", // 6px\n  2: \"0.5rem\", // 8px\n  2.5: \"0.625rem\", // 10px\n  3: \"0.75rem\", // 12px\n  3.5: \"0.875rem\", // 14px\n  4: \"1rem\", // 16px\n  5: \"1.25rem\", // 20px\n  6: \"1.5rem\", // 24px\n  7: \"1.75rem\", // 28px\n  8: \"2rem\", // 32px\n  9: \"2.25rem\", // 36px\n  10: \"2.5rem\", // 40px\n  11: \"2.75rem\", // 44px\n  12: \"3rem\", // 48px\n  14: \"3.5rem\", // 56px\n  16: \"4rem\", // 64px\n  20: \"5rem\", // 80px\n  24: \"6rem\", // 96px\n  28: \"7rem\", // 112px\n  32: \"8rem\", // 128px\n  36: \"9rem\", // 144px\n  40: \"10rem\", // 160px\n  44: \"11rem\", // 176px\n  48: \"12rem\", // 192px\n  52: \"13rem\", // 208px\n  56: \"14rem\", // 224px\n  60: \"15rem\", // 240px\n  64: \"16rem\", // 256px\n  72: \"18rem\", // 288px\n  80: \"20rem\", // 320px\n  96: \"24rem\", // 384px\n};\n\n// =============================================================================\n// BORDER RADIUS SYSTEM",
      "tokens": 0,
      "firstFile": {
        "name": "src\\lib\\design-system.ts",
        "start": 228,
        "end": 265,
        "startLoc": {
          "line": 228,
          "column": 3,
          "position": 1349
        },
        "endLoc": {
          "line": 265,
          "column": 24,
          "position": 1658
        }
      },
      "secondFile": {
        "name": "src\\core\\design\\theme.ts",
        "start": 233,
        "end": 270,
        "startLoc": {
          "line": 233,
          "column": 3,
          "position": 1374
        },
        "endLoc": {
          "line": 270,
          "column": 15,
          "position": 1683
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ";\n\ninterface SidebarProps {\n  isMobile?: boolean;\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\ninterface NavItem {\n  id: string;\n  label: string;\n  path: string;\n  icon: React.ComponentType<{ className?: string }>;\n  description",
      "tokens": 0,
      "firstFile": {
        "name": "src\\layouts\\Sidebar.tsx",
        "start": 97,
        "end": 110,
        "startLoc": {
          "line": 97,
          "column": 2,
          "position": 637
        },
        "endLoc": {
          "line": 110,
          "column": 12,
          "position": 726
        }
      },
      "secondFile": {
        "name": "src\\layouts\\sidebar\\components\\Sidebar.tsx",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 15,
          "position": 104
        },
        "endLoc": {
          "line": 25,
          "column": 6,
          "position": 206
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "}\n  ];\n\n  // Handle navigation\n  const handleNavigate = (path: string) => {\n    navigate(path);\n    if (isMobile && onToggle) {\n      onToggle();\n    }\n  };\n\n  // Check if current path is active\n  const isActivePath = (path: string) => {\n    if (path === '/') {\n      return location.pathname === '/' || location.pathname === '/dashboard';\n    }\n    return location.pathname === path || location.pathname.startsWith(path + '/');\n  };\n\n  return",
      "tokens": 0,
      "firstFile": {
        "name": "src\\layouts\\Sidebar.tsx",
        "start": 171,
        "end": 190,
        "startLoc": {
          "line": 171,
          "column": 5,
          "position": 1107
        },
        "endLoc": {
          "line": 190,
          "column": 7,
          "position": 1261
        }
      },
      "secondFile": {
        "name": "src\\layouts\\sidebar\\components\\Sidebar.tsx",
        "start": 47,
        "end": 66,
        "startLoc": {
          "line": 47,
          "column": 5,
          "position": 400
        },
        "endLoc": {
          "line": 66,
          "column": 36,
          "position": 573
        }
      }
    }
  ]
}